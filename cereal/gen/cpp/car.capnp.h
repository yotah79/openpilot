// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: car.capnp

#ifndef CAPNP_INCLUDED_8e2af1e708af8b8d_
#define CAPNP_INCLUDED_8e2af1e708af8b8d_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9b1657f34caf3ad3);
CAPNP_DECLARE_SCHEMA(baa8c5d505f727de);
enum class EventName_baa8c5d505f727de: uint16_t {
  CAN_ERROR,
  STEER_UNAVAILABLE,
  BRAKE_UNAVAILABLE,
  GAS_UNAVAILABLE,
  WRONG_GEAR,
  DOOR_OPEN,
  SEATBELT_NOT_LATCHED,
  ESP_DISABLED,
  WRONG_CAR_MODE,
  STEER_TEMP_UNAVAILABLE,
  REVERSE_GEAR,
  BUTTON_CANCEL,
  BUTTON_ENABLE,
  PEDAL_PRESSED,
  CRUISE_DISABLED,
  RADAR_CAN_ERROR,
  DATA_NEEDED,
  SPEED_TOO_LOW,
  OUT_OF_SPACE,
  OVERHEAT,
  CALIBRATION_INCOMPLETE,
  CALIBRATION_INVALID,
  CONTROLS_MISMATCH,
  PCM_ENABLE,
  PCM_DISABLE,
  NO_TARGET,
  RADAR_FAULT,
  MODEL_COMM_ISSUE_D_E_P_R_E_C_A_T_E_D,
  BRAKE_HOLD,
  PARK_BRAKE,
  MANUAL_RESTART,
  LOW_SPEED_LOCKOUT,
  PLANNER_ERROR,
  IPAS_OVERRIDE,
  DEBUG_ALERT,
  STEER_TEMP_UNAVAILABLE_MUTE,
  RESUME_REQUIRED,
  PRE_DRIVER_DISTRACTED,
  PROMPT_DRIVER_DISTRACTED,
  DRIVER_DISTRACTED,
  GEOFENCE,
  DRIVER_MONITOR_ON,
  DRIVER_MONITOR_OFF,
  PRE_DRIVER_UNRESPONSIVE,
  PROMPT_DRIVER_UNRESPONSIVE,
  DRIVER_UNRESPONSIVE,
  BELOW_STEER_SPEED,
  CALIBRATION_PROGRESS,
  LOW_BATTERY,
  INVALID_GIRAFFE_HONDA,
  VEHICLE_MODEL_INVALID,
  CONTROLS_FAILED,
  SENSOR_DATA_INVALID,
  COMM_ISSUE,
  TOO_DISTRACTED,
  POSENET_INVALID,
  SOUNDS_UNAVAILABLE,
  PRE_LANE_CHANGE_LEFT,
  PRE_LANE_CHANGE_RIGHT,
  LANE_CHANGE,
  INVALID_GIRAFFE_TOYOTA,
  INTERNET_CONNECTIVITY_NEEDED,
  COMMUNITY_FEATURE_DISALLOWED,
  LOW_MEMORY,
  STOCK_AEB,
  LDW,
  CAR_UNRECOGNIZED,
  RADAR_COMM_ISSUE,
  DRIVER_MONITOR_LOW_ACC,
  TURNING_INDICATOR_ON,
  LKAS_BUTTON_OFF,
  RIGHT_L_C_ABSM,
  LEFT_L_C_ABSM,
  PREVENT_L_C_A,
  STEER_TORQUE_OVER,
};
CAPNP_DECLARE_ENUM(EventName, baa8c5d505f727de);
CAPNP_DECLARE_SCHEMA(9da4fa09e052903c);
CAPNP_DECLARE_SCHEMA(991a37a6155935a3);
CAPNP_DECLARE_SCHEMA(e64e81478e6e60af);
CAPNP_DECLARE_SCHEMA(e004ca45136f6a89);
enum class GearShifter_e004ca45136f6a89: uint16_t {
  UNKNOWN,
  PARK,
  DRIVE,
  NEUTRAL,
  REVERSE,
  SPORT,
  LOW,
  BRAKE,
  ECO,
  MANUMATIC,
};
CAPNP_DECLARE_ENUM(GearShifter, e004ca45136f6a89);
CAPNP_DECLARE_SCHEMA(ff5ca6835b4acef6);
CAPNP_DECLARE_SCHEMA(e16100205414717c);
enum class Type_e16100205414717c: uint16_t {
  UNKNOWN,
  LEFT_BLINKER,
  RIGHT_BLINKER,
  ACCEL_CRUISE,
  DECEL_CRUISE,
  CANCEL,
  ALT_BUTTON1,
  ALT_BUTTON2,
  ALT_BUTTON3,
  SET_CRUISE,
  RESUME_CRUISE,
  GAP_ADJUST_CRUISE,
};
CAPNP_DECLARE_ENUM(Type, e16100205414717c);
CAPNP_DECLARE_SCHEMA(888ad6581cf0aacb);
CAPNP_DECLARE_SCHEMA(e8a86679ebba76ad);
enum class Error_e8a86679ebba76ad: uint16_t {
  CAN_ERROR,
  FAULT,
  WRONG_CONFIG,
};
CAPNP_DECLARE_ENUM(Error, e8a86679ebba76ad);
CAPNP_DECLARE_SCHEMA(8ff333ebac1fdf36);
CAPNP_DECLARE_SCHEMA(f78829049ab814af);
CAPNP_DECLARE_SCHEMA(e97275a919432828);
CAPNP_DECLARE_SCHEMA(b20e386e0e0ba8d3);
CAPNP_DECLARE_SCHEMA(d895c87c4eb03a38);
CAPNP_DECLARE_SCHEMA(90d78e84616e17d4);
enum class VisualAlert_90d78e84616e17d4: uint16_t {
  NONE,
  FCW,
  STEER_REQUIRED,
  BRAKE_PRESSED,
  WRONG_GEAR,
  SEATBELT_UNBUCKLED,
  SPEED_TOO_HIGH,
  LDW,
};
CAPNP_DECLARE_ENUM(VisualAlert, 90d78e84616e17d4);
CAPNP_DECLARE_SCHEMA(f5a5e26c954e339e);
enum class AudibleAlert_f5a5e26c954e339e: uint16_t {
  NONE,
  CHIME_ENGAGE,
  CHIME_DISENGAGE,
  CHIME_ERROR,
  CHIME_WARNING1,
  CHIME_WARNING2,
  CHIME_WARNING_REPEAT,
  CHIME_PROMPT,
  CHIME_READY,
  CHIME_DOOR_OPEN,
  CHIME_GEAR_DRIVE,
  CHIME_LANE_CHANGE,
  CHIME_LANE_DEPARTURE,
  CHIME_ROAD_WARNING,
  CHIME_SEAT_BELT,
  CHIME_VIEW_UNCERTAIN,
};
CAPNP_DECLARE_ENUM(AudibleAlert, f5a5e26c954e339e);
CAPNP_DECLARE_SCHEMA(8c69372490aaa9da);
CAPNP_DECLARE_SCHEMA(b581b23b1c89dda3);
CAPNP_DECLARE_SCHEMA(9622723fcbd14c2e);
CAPNP_DECLARE_SCHEMA(c342cefc303e9b8e);
CAPNP_DECLARE_SCHEMA(a334472e045533b3);
CAPNP_DECLARE_SCHEMA(9d151e3f28616a12);
CAPNP_DECLARE_SCHEMA(95551e5b1edaf451);
enum class SafetyModel_95551e5b1edaf451: uint16_t {
  SILENT,
  HONDA_NIDEC,
  TOYOTA,
  ELM327,
  GM,
  HONDA_BOSCH_GIRAFFE,
  FORD,
  CADILLAC,
  HYUNDAI,
  CHRYSLER,
  TESLA,
  SUBARU,
  GM_PASSIVE,
  MAZDA,
  NISSAN,
  VOLKSWAGEN,
  TOYOTA_IPAS,
  ALL_OUTPUT,
  GM_ASCM,
  NO_OUTPUT,
  HONDA_BOSCH_HARNESS,
  VOLKSWAGEN_PQ,
};
CAPNP_DECLARE_ENUM(SafetyModel, 95551e5b1edaf451);
CAPNP_DECLARE_SCHEMA(d661512be2def77f);
enum class SteerControlType_d661512be2def77f: uint16_t {
  TORQUE,
  ANGLE,
};
CAPNP_DECLARE_ENUM(SteerControlType, d661512be2def77f);
CAPNP_DECLARE_SCHEMA(8f162eeb14bfc0ec);
enum class TransmissionType_8f162eeb14bfc0ec: uint16_t {
  UNKNOWN,
  AUTOMATIC,
  MANUAL,
};
CAPNP_DECLARE_ENUM(TransmissionType, 8f162eeb14bfc0ec);
CAPNP_DECLARE_SCHEMA(962b56180c9359ce);
CAPNP_DECLARE_SCHEMA(f7119bb759d1d691);
enum class Ecu_f7119bb759d1d691: uint16_t {
  EPS,
  ESP,
  FWD_RADAR,
  FWD_CAMERA,
  ENGINE,
  UNKNOWN,
  DSU,
  APGS,
};
CAPNP_DECLARE_ENUM(Ecu, f7119bb759d1d691);
CAPNP_DECLARE_SCHEMA(9fd95523d8dc40ce);
enum class FingerprintSource_9fd95523d8dc40ce: uint16_t {
  CAN,
  FW,
  FIXED,
};
CAPNP_DECLARE_ENUM(FingerprintSource, 9fd95523d8dc40ce);
CAPNP_DECLARE_SCHEMA(93fc580a35339568);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

struct CarEvent {
  CarEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventName_baa8c5d505f727de EventName;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b1657f34caf3ad3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState {
  CarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct WheelSpeeds;
  struct CruiseState;
  typedef ::capnp::schemas::GearShifter_e004ca45136f6a89 GearShifter;

  struct ButtonEvent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da4fa09e052903c, 7, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::WheelSpeeds {
  WheelSpeeds() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(991a37a6155935a3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::CruiseState {
  CruiseState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e64e81478e6e60af, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarState::ButtonEvent {
  ButtonEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e16100205414717c Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff5ca6835b4acef6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData {
  RadarData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Error_e8a86679ebba76ad Error;

  struct RadarPoint;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(888ad6581cf0aacb, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarData::RadarPoint {
  RadarPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ff333ebac1fdf36, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl {
  CarControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Actuators;
  struct CruiseControl;
  struct HUDControl;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f78829049ab814af, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::Actuators {
  Actuators() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e97275a919432828, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::CruiseControl {
  CruiseControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b20e386e0e0ba8d3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::HUDControl {
  HUDControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VisualAlert_90d78e84616e17d4 VisualAlert;

  typedef ::capnp::schemas::AudibleAlert_f5a5e26c954e339e AudibleAlert;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d895c87c4eb03a38, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams {
  CarParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LateralParams;
  struct LateralPIDTuning;
  struct LongitudinalPIDTuning;
  struct LateralINDITuning;
  struct LateralLQRTuning;
  typedef ::capnp::schemas::SafetyModel_95551e5b1edaf451 SafetyModel;

  typedef ::capnp::schemas::SteerControlType_d661512be2def77f SteerControlType;

  typedef ::capnp::schemas::TransmissionType_8f162eeb14bfc0ec TransmissionType;

  struct CarFw;
  typedef ::capnp::schemas::Ecu_f7119bb759d1d691 Ecu;

  typedef ::capnp::schemas::FingerprintSource_9fd95523d8dc40ce FingerprintSource;

  struct LateralTuning;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c69372490aaa9da, 11, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralParams {
  LateralParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b581b23b1c89dda3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralPIDTuning {
  LateralPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9622723fcbd14c2e, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LongitudinalPIDTuning {
  LongitudinalPIDTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c342cefc303e9b8e, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralINDITuning {
  LateralINDITuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a334472e045533b3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralLQRTuning {
  LateralLQRTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d151e3f28616a12, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::CarFw {
  CarFw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(962b56180c9359ce, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarParams::LateralTuning {
  LateralTuning() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PID,
    INDI,
    LQR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93fc580a35339568, 11, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CarEvent::Reader {
public:
  typedef CarEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarEvent::EventName getName() const;

  inline bool getEnable() const;

  inline bool getNoEntry() const;

  inline bool getWarning() const;

  inline bool getUserDisable() const;

  inline bool getSoftDisable() const;

  inline bool getImmediateDisable() const;

  inline bool getPreEnable() const;

  inline bool getPermanent() const;

  inline bool getResetVCruise() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarEvent::Builder {
public:
  typedef CarEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarEvent::EventName getName();
  inline void setName( ::cereal::CarEvent::EventName value);

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getNoEntry();
  inline void setNoEntry(bool value);

  inline bool getWarning();
  inline void setWarning(bool value);

  inline bool getUserDisable();
  inline void setUserDisable(bool value);

  inline bool getSoftDisable();
  inline void setSoftDisable(bool value);

  inline bool getImmediateDisable();
  inline void setImmediateDisable(bool value);

  inline bool getPreEnable();
  inline void setPreEnable(bool value);

  inline bool getPermanent();
  inline void setPermanent(bool value);

  inline bool getResetVCruise();
  inline void setResetVCruise(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarEvent::Pipeline {
public:
  typedef CarEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::Reader {
public:
  typedef CarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::CarEvent::EventName>::Reader getErrorsDEPRECATED() const;

  inline float getVEgo() const;

  inline bool hasWheelSpeeds() const;
  inline  ::cereal::CarState::WheelSpeeds::Reader getWheelSpeeds() const;

  inline float getGas() const;

  inline bool getGasPressed() const;

  inline float getBrake() const;

  inline bool getBrakePressed() const;

  inline float getSteeringAngle() const;

  inline float getSteeringTorque() const;

  inline bool getSteeringPressed() const;

  inline bool hasCruiseState() const;
  inline  ::cereal::CarState::CruiseState::Reader getCruiseState() const;

  inline bool hasButtonEvents() const;
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader getButtonEvents() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent>::Reader getEvents() const;

  inline  ::cereal::CarState::GearShifter getGearShifter() const;

  inline float getSteeringRate() const;

  inline float getAEgo() const;

  inline float getVEgoRaw() const;

  inline bool getStandstill() const;

  inline bool getBrakeLights() const;

  inline bool getLeftBlinker() const;

  inline bool getRightBlinker() const;

  inline float getYawRate() const;

  inline bool getGenericToggle() const;

  inline bool getDoorOpen() const;

  inline bool getSeatbeltUnlatched() const;

  inline bool getCanValid() const;

  inline float getSteeringTorqueEps() const;

  inline bool getClutchPressed() const;

  inline bool getSteeringRateLimited() const;

  inline bool getStockAeb() const;

  inline bool getStockFcw() const;

  inline float getReaddistancelines() const;

  inline float getDistanceToggle() const;

  inline bool getLaneDepartureToggle() const;

  inline bool getLkMode() const;

  inline bool getLcaLeft() const;

  inline bool getLcaRight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::Builder {
public:
  typedef CarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrorsDEPRECATED();
  inline  ::capnp::List< ::cereal::CarEvent::EventName>::Builder getErrorsDEPRECATED();
  inline void setErrorsDEPRECATED( ::capnp::List< ::cereal::CarEvent::EventName>::Reader value);
  inline void setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::CarEvent::EventName> value);
  inline  ::capnp::List< ::cereal::CarEvent::EventName>::Builder initErrorsDEPRECATED(unsigned int size);
  inline void adoptErrorsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName>> disownErrorsDEPRECATED();

  inline float getVEgo();
  inline void setVEgo(float value);

  inline bool hasWheelSpeeds();
  inline  ::cereal::CarState::WheelSpeeds::Builder getWheelSpeeds();
  inline void setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value);
  inline  ::cereal::CarState::WheelSpeeds::Builder initWheelSpeeds();
  inline void adoptWheelSpeeds(::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> disownWheelSpeeds();

  inline float getGas();
  inline void setGas(float value);

  inline bool getGasPressed();
  inline void setGasPressed(bool value);

  inline float getBrake();
  inline void setBrake(float value);

  inline bool getBrakePressed();
  inline void setBrakePressed(bool value);

  inline float getSteeringAngle();
  inline void setSteeringAngle(float value);

  inline float getSteeringTorque();
  inline void setSteeringTorque(float value);

  inline bool getSteeringPressed();
  inline void setSteeringPressed(bool value);

  inline bool hasCruiseState();
  inline  ::cereal::CarState::CruiseState::Builder getCruiseState();
  inline void setCruiseState( ::cereal::CarState::CruiseState::Reader value);
  inline  ::cereal::CarState::CruiseState::Builder initCruiseState();
  inline void adoptCruiseState(::capnp::Orphan< ::cereal::CarState::CruiseState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState::CruiseState> disownCruiseState();

  inline bool hasButtonEvents();
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder getButtonEvents();
  inline void setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder initButtonEvents(unsigned int size);
  inline void adoptButtonEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>> disownButtonEvents();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::CarEvent>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::CarEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> disownEvents();

  inline  ::cereal::CarState::GearShifter getGearShifter();
  inline void setGearShifter( ::cereal::CarState::GearShifter value);

  inline float getSteeringRate();
  inline void setSteeringRate(float value);

  inline float getAEgo();
  inline void setAEgo(float value);

  inline float getVEgoRaw();
  inline void setVEgoRaw(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

  inline bool getBrakeLights();
  inline void setBrakeLights(bool value);

  inline bool getLeftBlinker();
  inline void setLeftBlinker(bool value);

  inline bool getRightBlinker();
  inline void setRightBlinker(bool value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline bool getGenericToggle();
  inline void setGenericToggle(bool value);

  inline bool getDoorOpen();
  inline void setDoorOpen(bool value);

  inline bool getSeatbeltUnlatched();
  inline void setSeatbeltUnlatched(bool value);

  inline bool getCanValid();
  inline void setCanValid(bool value);

  inline float getSteeringTorqueEps();
  inline void setSteeringTorqueEps(float value);

  inline bool getClutchPressed();
  inline void setClutchPressed(bool value);

  inline bool getSteeringRateLimited();
  inline void setSteeringRateLimited(bool value);

  inline bool getStockAeb();
  inline void setStockAeb(bool value);

  inline bool getStockFcw();
  inline void setStockFcw(bool value);

  inline float getReaddistancelines();
  inline void setReaddistancelines(float value);

  inline float getDistanceToggle();
  inline void setDistanceToggle(float value);

  inline bool getLaneDepartureToggle();
  inline void setLaneDepartureToggle(bool value);

  inline bool getLkMode();
  inline void setLkMode(bool value);

  inline bool getLcaLeft();
  inline void setLcaLeft(bool value);

  inline bool getLcaRight();
  inline void setLcaRight(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::Pipeline {
public:
  typedef CarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarState::WheelSpeeds::Pipeline getWheelSpeeds();
  inline  ::cereal::CarState::CruiseState::Pipeline getCruiseState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::WheelSpeeds::Reader {
public:
  typedef WheelSpeeds Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getFl() const;

  inline float getFr() const;

  inline float getRl() const;

  inline float getRr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::WheelSpeeds::Builder {
public:
  typedef WheelSpeeds Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFl();
  inline void setFl(float value);

  inline float getFr();
  inline void setFr(float value);

  inline float getRl();
  inline void setRl(float value);

  inline float getRr();
  inline void setRr(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::WheelSpeeds::Pipeline {
public:
  typedef WheelSpeeds Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::CruiseState::Reader {
public:
  typedef CruiseState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getSpeed() const;

  inline bool getAvailable() const;

  inline float getSpeedOffset() const;

  inline bool getStandstill() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::CruiseState::Builder {
public:
  typedef CruiseState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline bool getAvailable();
  inline void setAvailable(bool value);

  inline float getSpeedOffset();
  inline void setSpeedOffset(float value);

  inline bool getStandstill();
  inline void setStandstill(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::CruiseState::Pipeline {
public:
  typedef CruiseState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarState::ButtonEvent::Reader {
public:
  typedef ButtonEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPressed() const;

  inline  ::cereal::CarState::ButtonEvent::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarState::ButtonEvent::Builder {
public:
  typedef ButtonEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPressed();
  inline void setPressed(bool value);

  inline  ::cereal::CarState::ButtonEvent::Type getType();
  inline void setType( ::cereal::CarState::ButtonEvent::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarState::ButtonEvent::Pipeline {
public:
  typedef ButtonEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::Reader {
public:
  typedef RadarData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrors() const;
  inline  ::capnp::List< ::cereal::RadarData::Error>::Reader getErrors() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Reader getPoints() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::Builder {
public:
  typedef RadarData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrors();
  inline  ::capnp::List< ::cereal::RadarData::Error>::Builder getErrors();
  inline void setErrors( ::capnp::List< ::cereal::RadarData::Error>::Reader value);
  inline void setErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value);
  inline  ::capnp::List< ::cereal::RadarData::Error>::Builder initErrors(unsigned int size);
  inline void adoptErrors(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>> disownErrors();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint>::Reader value);
  inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint>> disownPoints();

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::Pipeline {
public:
  typedef RadarData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarData::RadarPoint::Reader {
public:
  typedef RadarPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getYvRel() const;

  inline bool getMeasured() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarData::RadarPoint::Builder {
public:
  typedef RadarPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTrackId();
  inline void setTrackId( ::uint64_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getYvRel();
  inline void setYvRel(float value);

  inline bool getMeasured();
  inline void setMeasured(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarData::RadarPoint::Pipeline {
public:
  typedef RadarPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Reader {
public:
  typedef CarControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline float getGasDEPRECATED() const;

  inline float getBrakeDEPRECATED() const;

  inline float getSteeringTorqueDEPRECATED() const;

  inline bool hasCruiseControl() const;
  inline  ::cereal::CarControl::CruiseControl::Reader getCruiseControl() const;

  inline bool hasHudControl() const;
  inline  ::cereal::CarControl::HUDControl::Reader getHudControl() const;

  inline bool hasActuators() const;
  inline  ::cereal::CarControl::Actuators::Reader getActuators() const;

  inline bool getActive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Builder {
public:
  typedef CarControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline float getGasDEPRECATED();
  inline void setGasDEPRECATED(float value);

  inline float getBrakeDEPRECATED();
  inline void setBrakeDEPRECATED(float value);

  inline float getSteeringTorqueDEPRECATED();
  inline void setSteeringTorqueDEPRECATED(float value);

  inline bool hasCruiseControl();
  inline  ::cereal::CarControl::CruiseControl::Builder getCruiseControl();
  inline void setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value);
  inline  ::cereal::CarControl::CruiseControl::Builder initCruiseControl();
  inline void adoptCruiseControl(::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> disownCruiseControl();

  inline bool hasHudControl();
  inline  ::cereal::CarControl::HUDControl::Builder getHudControl();
  inline void setHudControl( ::cereal::CarControl::HUDControl::Reader value);
  inline  ::cereal::CarControl::HUDControl::Builder initHudControl();
  inline void adoptHudControl(::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> disownHudControl();

  inline bool hasActuators();
  inline  ::cereal::CarControl::Actuators::Builder getActuators();
  inline void setActuators( ::cereal::CarControl::Actuators::Reader value);
  inline  ::cereal::CarControl::Actuators::Builder initActuators();
  inline void adoptActuators(::capnp::Orphan< ::cereal::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl::Actuators> disownActuators();

  inline bool getActive();
  inline void setActive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Pipeline {
public:
  typedef CarControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarControl::CruiseControl::Pipeline getCruiseControl();
  inline  ::cereal::CarControl::HUDControl::Pipeline getHudControl();
  inline  ::cereal::CarControl::Actuators::Pipeline getActuators();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Actuators::Reader {
public:
  typedef Actuators Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getGas() const;

  inline float getBrake() const;

  inline float getSteer() const;

  inline float getSteerAngle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Actuators::Builder {
public:
  typedef Actuators Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getGas();
  inline void setGas(float value);

  inline float getBrake();
  inline void setBrake(float value);

  inline float getSteer();
  inline void setSteer(float value);

  inline float getSteerAngle();
  inline void setSteerAngle(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Actuators::Pipeline {
public:
  typedef Actuators Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::CruiseControl::Reader {
public:
  typedef CruiseControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCancel() const;

  inline bool getOverride() const;

  inline float getSpeedOverride() const;

  inline float getAccelOverride() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::CruiseControl::Builder {
public:
  typedef CruiseControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCancel();
  inline void setCancel(bool value);

  inline bool getOverride();
  inline void setOverride(bool value);

  inline float getSpeedOverride();
  inline void setSpeedOverride(float value);

  inline float getAccelOverride();
  inline void setAccelOverride(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::CruiseControl::Pipeline {
public:
  typedef CruiseControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::HUDControl::Reader {
public:
  typedef HUDControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible() const;

  inline float getSetSpeed() const;

  inline bool getLanesVisible() const;

  inline bool getLeadVisible() const;

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert() const;

  inline bool getRightLaneVisible() const;

  inline bool getLeftLaneVisible() const;

  inline bool getRightLaneDepart() const;

  inline bool getLeftLaneDepart() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::HUDControl::Builder {
public:
  typedef HUDControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedVisible();
  inline void setSpeedVisible(bool value);

  inline float getSetSpeed();
  inline void setSetSpeed(float value);

  inline bool getLanesVisible();
  inline void setLanesVisible(bool value);

  inline bool getLeadVisible();
  inline void setLeadVisible(bool value);

  inline  ::cereal::CarControl::HUDControl::VisualAlert getVisualAlert();
  inline void setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAudibleAlert();
  inline void setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline bool getRightLaneVisible();
  inline void setRightLaneVisible(bool value);

  inline bool getLeftLaneVisible();
  inline void setLeftLaneVisible(bool value);

  inline bool getRightLaneDepart();
  inline void setRightLaneDepart(bool value);

  inline bool getLeftLaneDepart();
  inline void setLeftLaneDepart(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::HUDControl::Pipeline {
public:
  typedef HUDControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::Reader {
public:
  typedef CarParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCarName() const;
  inline  ::capnp::Text::Reader getCarName() const;

  inline bool hasCarFingerprint() const;
  inline  ::capnp::Text::Reader getCarFingerprint() const;

  inline bool getEnableGasInterceptor() const;

  inline bool getEnableCruise() const;

  inline bool getEnableCamera() const;

  inline bool getEnableDsu() const;

  inline bool getEnableApgs() const;

  inline float getMinEnableSpeed() const;

  inline float getMinSteerSpeed() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::int16_t getSafetyParam() const;

  inline bool hasSteerMaxBP() const;
  inline  ::capnp::List<float>::Reader getSteerMaxBP() const;

  inline bool hasSteerMaxV() const;
  inline  ::capnp::List<float>::Reader getSteerMaxV() const;

  inline bool hasGasMaxBP() const;
  inline  ::capnp::List<float>::Reader getGasMaxBP() const;

  inline bool hasGasMaxV() const;
  inline  ::capnp::List<float>::Reader getGasMaxV() const;

  inline bool hasBrakeMaxBP() const;
  inline  ::capnp::List<float>::Reader getBrakeMaxBP() const;

  inline bool hasBrakeMaxV() const;
  inline  ::capnp::List<float>::Reader getBrakeMaxV() const;

  inline float getMass() const;

  inline float getWheelbase() const;

  inline float getCenterToFront() const;

  inline float getSteerRatio() const;

  inline float getSteerRatioRear() const;

  inline float getRotationalInertia() const;

  inline float getTireStiffnessFront() const;

  inline float getTireStiffnessRear() const;

  inline bool hasLongitudinalTuning() const;
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader getLongitudinalTuning() const;

  inline typename LateralTuning::Reader getLateralTuning() const;

  inline bool getSteerLimitAlert() const;

  inline float getVEgoStopping() const;

  inline bool getDirectAccelControl() const;

  inline bool getStoppingControl() const;

  inline float getStartAccel() const;

  inline float getSteerRateCost() const;

  inline  ::cereal::CarParams::SteerControlType getSteerControlType() const;

  inline bool getRadarOffCan() const;

  inline float getSteerActuatorDelay() const;

  inline bool getOpenpilotLongitudinalControl() const;

  inline bool hasCarVin() const;
  inline  ::capnp::Text::Reader getCarVin() const;

  inline bool getIsPandaBlack() const;

  inline bool getDashcamOnly() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassive() const;

  inline  ::cereal::CarParams::TransmissionType getTransmissionType() const;

  inline bool hasCarFw() const;
  inline  ::capnp::List< ::cereal::CarParams::CarFw>::Reader getCarFw() const;

  inline float getRadarTimeStep() const;

  inline bool getCommunityFeature() const;

  inline float getSteerLimitTimer() const;

  inline bool hasLateralParams() const;
  inline  ::cereal::CarParams::LateralParams::Reader getLateralParams() const;

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource() const;

  inline  ::int8_t getMdpsBus() const;

  inline  ::int8_t getSasBus() const;

  inline  ::int8_t getSccBus() const;

  inline  ::int8_t getAutoLcaEnabled() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::Builder {
public:
  typedef CarParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCarName();
  inline  ::capnp::Text::Builder getCarName();
  inline void setCarName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarName(unsigned int size);
  inline void adoptCarName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarName();

  inline bool hasCarFingerprint();
  inline  ::capnp::Text::Builder getCarFingerprint();
  inline void setCarFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarFingerprint(unsigned int size);
  inline void adoptCarFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarFingerprint();

  inline bool getEnableGasInterceptor();
  inline void setEnableGasInterceptor(bool value);

  inline bool getEnableCruise();
  inline void setEnableCruise(bool value);

  inline bool getEnableCamera();
  inline void setEnableCamera(bool value);

  inline bool getEnableDsu();
  inline void setEnableDsu(bool value);

  inline bool getEnableApgs();
  inline void setEnableApgs(bool value);

  inline float getMinEnableSpeed();
  inline void setMinEnableSpeed(float value);

  inline float getMinSteerSpeed();
  inline void setMinSteerSpeed(float value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::int16_t getSafetyParam();
  inline void setSafetyParam( ::int16_t value);

  inline bool hasSteerMaxBP();
  inline  ::capnp::List<float>::Builder getSteerMaxBP();
  inline void setSteerMaxBP( ::capnp::List<float>::Reader value);
  inline void setSteerMaxBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initSteerMaxBP(unsigned int size);
  inline void adoptSteerMaxBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownSteerMaxBP();

  inline bool hasSteerMaxV();
  inline  ::capnp::List<float>::Builder getSteerMaxV();
  inline void setSteerMaxV( ::capnp::List<float>::Reader value);
  inline void setSteerMaxV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initSteerMaxV(unsigned int size);
  inline void adoptSteerMaxV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownSteerMaxV();

  inline bool hasGasMaxBP();
  inline  ::capnp::List<float>::Builder getGasMaxBP();
  inline void setGasMaxBP( ::capnp::List<float>::Reader value);
  inline void setGasMaxBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initGasMaxBP(unsigned int size);
  inline void adoptGasMaxBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownGasMaxBP();

  inline bool hasGasMaxV();
  inline  ::capnp::List<float>::Builder getGasMaxV();
  inline void setGasMaxV( ::capnp::List<float>::Reader value);
  inline void setGasMaxV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initGasMaxV(unsigned int size);
  inline void adoptGasMaxV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownGasMaxV();

  inline bool hasBrakeMaxBP();
  inline  ::capnp::List<float>::Builder getBrakeMaxBP();
  inline void setBrakeMaxBP( ::capnp::List<float>::Reader value);
  inline void setBrakeMaxBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initBrakeMaxBP(unsigned int size);
  inline void adoptBrakeMaxBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownBrakeMaxBP();

  inline bool hasBrakeMaxV();
  inline  ::capnp::List<float>::Builder getBrakeMaxV();
  inline void setBrakeMaxV( ::capnp::List<float>::Reader value);
  inline void setBrakeMaxV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initBrakeMaxV(unsigned int size);
  inline void adoptBrakeMaxV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownBrakeMaxV();

  inline float getMass();
  inline void setMass(float value);

  inline float getWheelbase();
  inline void setWheelbase(float value);

  inline float getCenterToFront();
  inline void setCenterToFront(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline float getSteerRatioRear();
  inline void setSteerRatioRear(float value);

  inline float getRotationalInertia();
  inline void setRotationalInertia(float value);

  inline float getTireStiffnessFront();
  inline void setTireStiffnessFront(float value);

  inline float getTireStiffnessRear();
  inline void setTireStiffnessRear(float value);

  inline bool hasLongitudinalTuning();
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder getLongitudinalTuning();
  inline void setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value);
  inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder initLongitudinalTuning();
  inline void adoptLongitudinalTuning(::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> disownLongitudinalTuning();

  inline typename LateralTuning::Builder getLateralTuning();
  inline typename LateralTuning::Builder initLateralTuning();

  inline bool getSteerLimitAlert();
  inline void setSteerLimitAlert(bool value);

  inline float getVEgoStopping();
  inline void setVEgoStopping(float value);

  inline bool getDirectAccelControl();
  inline void setDirectAccelControl(bool value);

  inline bool getStoppingControl();
  inline void setStoppingControl(bool value);

  inline float getStartAccel();
  inline void setStartAccel(float value);

  inline float getSteerRateCost();
  inline void setSteerRateCost(float value);

  inline  ::cereal::CarParams::SteerControlType getSteerControlType();
  inline void setSteerControlType( ::cereal::CarParams::SteerControlType value);

  inline bool getRadarOffCan();
  inline void setRadarOffCan(bool value);

  inline float getSteerActuatorDelay();
  inline void setSteerActuatorDelay(float value);

  inline bool getOpenpilotLongitudinalControl();
  inline void setOpenpilotLongitudinalControl(bool value);

  inline bool hasCarVin();
  inline  ::capnp::Text::Builder getCarVin();
  inline void setCarVin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCarVin(unsigned int size);
  inline void adoptCarVin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCarVin();

  inline bool getIsPandaBlack();
  inline void setIsPandaBlack(bool value);

  inline bool getDashcamOnly();
  inline void setDashcamOnly(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModelPassive();
  inline void setSafetyModelPassive( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::CarParams::TransmissionType getTransmissionType();
  inline void setTransmissionType( ::cereal::CarParams::TransmissionType value);

  inline bool hasCarFw();
  inline  ::capnp::List< ::cereal::CarParams::CarFw>::Builder getCarFw();
  inline void setCarFw( ::capnp::List< ::cereal::CarParams::CarFw>::Reader value);
  inline  ::capnp::List< ::cereal::CarParams::CarFw>::Builder initCarFw(unsigned int size);
  inline void adoptCarFw(::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw>> disownCarFw();

  inline float getRadarTimeStep();
  inline void setRadarTimeStep(float value);

  inline bool getCommunityFeature();
  inline void setCommunityFeature(bool value);

  inline float getSteerLimitTimer();
  inline void setSteerLimitTimer(float value);

  inline bool hasLateralParams();
  inline  ::cereal::CarParams::LateralParams::Builder getLateralParams();
  inline void setLateralParams( ::cereal::CarParams::LateralParams::Reader value);
  inline  ::cereal::CarParams::LateralParams::Builder initLateralParams();
  inline void adoptLateralParams(::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> disownLateralParams();

  inline  ::cereal::CarParams::FingerprintSource getFingerprintSource();
  inline void setFingerprintSource( ::cereal::CarParams::FingerprintSource value);

  inline  ::int8_t getMdpsBus();
  inline void setMdpsBus( ::int8_t value);

  inline  ::int8_t getSasBus();
  inline void setSasBus( ::int8_t value);

  inline  ::int8_t getSccBus();
  inline void setSccBus( ::int8_t value);

  inline  ::int8_t getAutoLcaEnabled();
  inline void setAutoLcaEnabled( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::Pipeline {
public:
  typedef CarParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline getLongitudinalTuning();
  inline typename LateralTuning::Pipeline getLateralTuning();
  inline  ::cereal::CarParams::LateralParams::Pipeline getLateralParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralParams::Reader {
public:
  typedef LateralParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP() const;
  inline  ::capnp::List< ::int32_t>::Reader getTorqueBP() const;

  inline bool hasTorqueV() const;
  inline  ::capnp::List< ::int32_t>::Reader getTorqueV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralParams::Builder {
public:
  typedef LateralParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTorqueBP();
  inline  ::capnp::List< ::int32_t>::Builder getTorqueBP();
  inline void setTorqueBP( ::capnp::List< ::int32_t>::Reader value);
  inline void setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initTorqueBP(unsigned int size);
  inline void adoptTorqueBP(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownTorqueBP();

  inline bool hasTorqueV();
  inline  ::capnp::List< ::int32_t>::Builder getTorqueV();
  inline void setTorqueV( ::capnp::List< ::int32_t>::Reader value);
  inline void setTorqueV(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initTorqueV(unsigned int size);
  inline void adoptTorqueV(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownTorqueV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralParams::Pipeline {
public:
  typedef LateralParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralPIDTuning::Reader {
public:
  typedef LateralPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float>::Reader getKiV() const;

  inline float getKf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralPIDTuning::Builder {
public:
  typedef LateralPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float>::Builder getKpV();
  inline void setKpV( ::capnp::List<float>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float>::Builder getKiV();
  inline void setKiV( ::capnp::List<float>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKiV();

  inline float getKf();
  inline void setKf(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralPIDTuning::Pipeline {
public:
  typedef LateralPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LongitudinalPIDTuning::Reader {
public:
  typedef LongitudinalPIDTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKpBP() const;
  inline  ::capnp::List<float>::Reader getKpBP() const;

  inline bool hasKpV() const;
  inline  ::capnp::List<float>::Reader getKpV() const;

  inline bool hasKiBP() const;
  inline  ::capnp::List<float>::Reader getKiBP() const;

  inline bool hasKiV() const;
  inline  ::capnp::List<float>::Reader getKiV() const;

  inline bool hasDeadzoneBP() const;
  inline  ::capnp::List<float>::Reader getDeadzoneBP() const;

  inline bool hasDeadzoneV() const;
  inline  ::capnp::List<float>::Reader getDeadzoneV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LongitudinalPIDTuning::Builder {
public:
  typedef LongitudinalPIDTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKpBP();
  inline  ::capnp::List<float>::Builder getKpBP();
  inline void setKpBP( ::capnp::List<float>::Reader value);
  inline void setKpBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKpBP(unsigned int size);
  inline void adoptKpBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKpBP();

  inline bool hasKpV();
  inline  ::capnp::List<float>::Builder getKpV();
  inline void setKpV( ::capnp::List<float>::Reader value);
  inline void setKpV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKpV(unsigned int size);
  inline void adoptKpV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKpV();

  inline bool hasKiBP();
  inline  ::capnp::List<float>::Builder getKiBP();
  inline void setKiBP( ::capnp::List<float>::Reader value);
  inline void setKiBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKiBP(unsigned int size);
  inline void adoptKiBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKiBP();

  inline bool hasKiV();
  inline  ::capnp::List<float>::Builder getKiV();
  inline void setKiV( ::capnp::List<float>::Reader value);
  inline void setKiV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initKiV(unsigned int size);
  inline void adoptKiV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownKiV();

  inline bool hasDeadzoneBP();
  inline  ::capnp::List<float>::Builder getDeadzoneBP();
  inline void setDeadzoneBP( ::capnp::List<float>::Reader value);
  inline void setDeadzoneBP(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDeadzoneBP(unsigned int size);
  inline void adoptDeadzoneBP(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDeadzoneBP();

  inline bool hasDeadzoneV();
  inline  ::capnp::List<float>::Builder getDeadzoneV();
  inline void setDeadzoneV( ::capnp::List<float>::Reader value);
  inline void setDeadzoneV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDeadzoneV(unsigned int size);
  inline void adoptDeadzoneV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDeadzoneV();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LongitudinalPIDTuning::Pipeline {
public:
  typedef LongitudinalPIDTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralINDITuning::Reader {
public:
  typedef LateralINDITuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGain() const;

  inline float getInnerLoopGain() const;

  inline float getTimeConstant() const;

  inline float getActuatorEffectiveness() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralINDITuning::Builder {
public:
  typedef LateralINDITuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getOuterLoopGain();
  inline void setOuterLoopGain(float value);

  inline float getInnerLoopGain();
  inline void setInnerLoopGain(float value);

  inline float getTimeConstant();
  inline void setTimeConstant(float value);

  inline float getActuatorEffectiveness();
  inline void setActuatorEffectiveness(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralINDITuning::Pipeline {
public:
  typedef LateralINDITuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralLQRTuning::Reader {
public:
  typedef LateralLQRTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getScale() const;

  inline float getKi() const;

  inline float getDcGain() const;

  inline bool hasA() const;
  inline  ::capnp::List<float>::Reader getA() const;

  inline bool hasB() const;
  inline  ::capnp::List<float>::Reader getB() const;

  inline bool hasC() const;
  inline  ::capnp::List<float>::Reader getC() const;

  inline bool hasK() const;
  inline  ::capnp::List<float>::Reader getK() const;

  inline bool hasL() const;
  inline  ::capnp::List<float>::Reader getL() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralLQRTuning::Builder {
public:
  typedef LateralLQRTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getScale();
  inline void setScale(float value);

  inline float getKi();
  inline void setKi(float value);

  inline float getDcGain();
  inline void setDcGain(float value);

  inline bool hasA();
  inline  ::capnp::List<float>::Builder getA();
  inline void setA( ::capnp::List<float>::Reader value);
  inline void setA(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownA();

  inline bool hasB();
  inline  ::capnp::List<float>::Builder getB();
  inline void setB( ::capnp::List<float>::Reader value);
  inline void setB(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initB(unsigned int size);
  inline void adoptB(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownB();

  inline bool hasC();
  inline  ::capnp::List<float>::Builder getC();
  inline void setC( ::capnp::List<float>::Reader value);
  inline void setC(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initC(unsigned int size);
  inline void adoptC(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownC();

  inline bool hasK();
  inline  ::capnp::List<float>::Builder getK();
  inline void setK( ::capnp::List<float>::Reader value);
  inline void setK(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initK(unsigned int size);
  inline void adoptK(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownK();

  inline bool hasL();
  inline  ::capnp::List<float>::Builder getL();
  inline void setL( ::capnp::List<float>::Reader value);
  inline void setL(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initL(unsigned int size);
  inline void adoptL(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownL();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralLQRTuning::Pipeline {
public:
  typedef LateralLQRTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::CarFw::Reader {
public:
  typedef CarFw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu() const;

  inline bool hasFwVersion() const;
  inline  ::capnp::Data::Reader getFwVersion() const;

  inline  ::uint32_t getAddress() const;

  inline  ::uint8_t getSubAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::CarFw::Builder {
public:
  typedef CarFw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::CarParams::Ecu getEcu();
  inline void setEcu( ::cereal::CarParams::Ecu value);

  inline bool hasFwVersion();
  inline  ::capnp::Data::Builder getFwVersion();
  inline void setFwVersion( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFwVersion(unsigned int size);
  inline void adoptFwVersion(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFwVersion();

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint8_t getSubAddress();
  inline void setSubAddress( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::CarFw::Pipeline {
public:
  typedef CarFw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarParams::LateralTuning::Reader {
public:
  typedef LateralTuning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isPid() const;
  inline bool hasPid() const;
  inline  ::cereal::CarParams::LateralPIDTuning::Reader getPid() const;

  inline bool isIndi() const;
  inline bool hasIndi() const;
  inline  ::cereal::CarParams::LateralINDITuning::Reader getIndi() const;

  inline bool isLqr() const;
  inline bool hasLqr() const;
  inline  ::cereal::CarParams::LateralLQRTuning::Reader getLqr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarParams::LateralTuning::Builder {
public:
  typedef LateralTuning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isPid();
  inline bool hasPid();
  inline  ::cereal::CarParams::LateralPIDTuning::Builder getPid();
  inline void setPid( ::cereal::CarParams::LateralPIDTuning::Reader value);
  inline  ::cereal::CarParams::LateralPIDTuning::Builder initPid();
  inline void adoptPid(::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> disownPid();

  inline bool isIndi();
  inline bool hasIndi();
  inline  ::cereal::CarParams::LateralINDITuning::Builder getIndi();
  inline void setIndi( ::cereal::CarParams::LateralINDITuning::Reader value);
  inline  ::cereal::CarParams::LateralINDITuning::Builder initIndi();
  inline void adoptIndi(::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> disownIndi();

  inline bool isLqr();
  inline bool hasLqr();
  inline  ::cereal::CarParams::LateralLQRTuning::Builder getLqr();
  inline void setLqr( ::cereal::CarParams::LateralLQRTuning::Reader value);
  inline  ::cereal::CarParams::LateralLQRTuning::Builder initLqr();
  inline void adoptLqr(::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> disownLqr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarParams::LateralTuning::Pipeline {
public:
  typedef LateralTuning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::cereal::CarEvent::EventName CarEvent::Reader::getName() const {
  return _reader.getDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarEvent::EventName CarEvent::Builder::getName() {
  return _builder.getDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setName( ::cereal::CarEvent::EventName value) {
  _builder.setDataField< ::cereal::CarEvent::EventName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getNoEntry() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getNoEntry() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setNoEntry(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getWarning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getWarning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setWarning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getUserDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getUserDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setUserDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getSoftDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getSoftDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setSoftDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getImmediateDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getImmediateDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setImmediateDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getPreEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getPreEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setPreEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getPermanent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getPermanent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setPermanent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool CarEvent::Reader::getResetVCruise() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool CarEvent::Builder::getResetVCruise() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void CarEvent::Builder::setResetVCruise(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasErrorsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasErrorsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent::EventName>::Reader CarState::Reader::getErrorsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent::EventName>::Builder CarState::Builder::getErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setErrorsDEPRECATED( ::capnp::List< ::cereal::CarEvent::EventName>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setErrorsDEPRECATED(::kj::ArrayPtr<const  ::cereal::CarEvent::EventName> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent::EventName>::Builder CarState::Builder::initErrorsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptErrorsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent::EventName>> CarState::Builder::disownErrorsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent::EventName>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasWheelSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasWheelSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::WheelSpeeds::Reader CarState::Reader::getWheelSpeeds() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::getWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::WheelSpeeds::Pipeline CarState::Pipeline::getWheelSpeeds() {
  return  ::cereal::CarState::WheelSpeeds::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setWheelSpeeds( ::cereal::CarState::WheelSpeeds::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::WheelSpeeds::Builder CarState::Builder::initWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptWheelSpeeds(
    ::capnp::Orphan< ::cereal::CarState::WheelSpeeds>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::WheelSpeeds> CarState::Builder::disownWheelSpeeds() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::WheelSpeeds>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float CarState::Reader::getGas() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getGas() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGas(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGasPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGasPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGasPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakePressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakePressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakePressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::hasCruiseState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCruiseState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::CruiseState::Reader CarState::Reader::getCruiseState() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::getCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarState::CruiseState::Pipeline CarState::Pipeline::getCruiseState() {
  return  ::cereal::CarState::CruiseState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarState::Builder::setCruiseState( ::cereal::CarState::CruiseState::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::CruiseState::Builder CarState::Builder::initCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarState::Builder::adoptCruiseState(
    ::capnp::Orphan< ::cereal::CarState::CruiseState>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState::CruiseState> CarState::Builder::disownCruiseState() {
  return ::capnp::_::PointerHelpers< ::cereal::CarState::CruiseState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasButtonEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasButtonEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader CarState::Reader::getButtonEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder CarState::Builder::getButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setButtonEvents( ::capnp::List< ::cereal::CarState::ButtonEvent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarState::ButtonEvent>::Builder CarState::Builder::initButtonEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptButtonEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarState::ButtonEvent>> CarState::Builder::disownButtonEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarState::ButtonEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader CarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder CarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder CarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> CarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarState::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarState::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent>::Reader CarState::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder CarState::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarState::Builder::setEvents( ::capnp::List< ::cereal::CarEvent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder CarState::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarState::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> CarState::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::cereal::CarState::GearShifter CarState::Reader::getGearShifter() const {
  return _reader.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::GearShifter CarState::Builder::getGearShifter() {
  return _builder.getDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGearShifter( ::cereal::CarState::GearShifter value) {
  _builder.setDataField< ::cereal::CarState::GearShifter>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getAEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getAEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setAEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getVEgoRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getVEgoRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setVEgoRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getBrakeLights() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getBrakeLights() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setBrakeLights(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLeftBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLeftBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLeftBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getRightBlinker() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getRightBlinker() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setRightBlinker(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getGenericToggle() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getGenericToggle() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setGenericToggle(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getDoorOpen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getDoorOpen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setDoorOpen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSeatbeltUnlatched() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSeatbeltUnlatched() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSeatbeltUnlatched(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getCanValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getCanValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setCanValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getSteeringTorqueEps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getSteeringTorqueEps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringTorqueEps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getClutchPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getClutchPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setClutchPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getSteeringRateLimited() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getSteeringRateLimited() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setSteeringRateLimited(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockAeb() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockAeb() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockAeb(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getStockFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getStockFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setStockFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getReaddistancelines() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getReaddistancelines() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setReaddistancelines(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float CarState::Reader::getDistanceToggle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarState::Builder::getDistanceToggle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setDistanceToggle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLaneDepartureToggle() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLaneDepartureToggle() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLaneDepartureToggle(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLkMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<416>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLkMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<416>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLkMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<416>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLcaLeft() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<417>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLcaLeft() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<417>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLcaLeft(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<417>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::Reader::getLcaRight() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<418>() * ::capnp::ELEMENTS);
}

inline bool CarState::Builder::getLcaRight() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<418>() * ::capnp::ELEMENTS);
}
inline void CarState::Builder::setLcaRight(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<418>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarState::WheelSpeeds::Reader::getRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarState::WheelSpeeds::Builder::getRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarState::WheelSpeeds::Builder::setRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarState::CruiseState::Reader::getSpeedOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarState::CruiseState::Builder::getSpeedOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setSpeedOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::CruiseState::Reader::getStandstill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarState::CruiseState::Builder::getStandstill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarState::CruiseState::Builder::setStandstill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarState::ButtonEvent::Reader::getPressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarState::ButtonEvent::Builder::getPressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setPressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarState::ButtonEvent::Type CarState::ButtonEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarState::ButtonEvent::Builder::setType( ::cereal::CarState::ButtonEvent::Type value) {
  _builder.setDataField< ::cereal::CarState::ButtonEvent::Type>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::Reader::hasErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Reader RadarData::Reader::getErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Builder RadarData::Builder::getErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setErrors( ::capnp::List< ::cereal::RadarData::Error>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Builder RadarData::Builder::initErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>> RadarData::Builder::disownErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Reader RadarData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Builder RadarData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setPoints( ::capnp::List< ::cereal::RadarData::RadarPoint>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::RadarPoint>::Builder RadarData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::RadarPoint>> RadarData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::RadarPoint>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarData::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarData::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader RadarData::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder RadarData::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarData::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void RadarData::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder RadarData::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RadarData::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> RadarData::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarData::RadarPoint::Reader::getTrackId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarData::RadarPoint::Builder::getTrackId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setTrackId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarData::RadarPoint::Reader::getYvRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarData::RadarPoint::Builder::getYvRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setYvRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool RadarData::RadarPoint::Reader::getMeasured() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}

inline bool RadarData::RadarPoint::Builder::getMeasured() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS);
}
inline void RadarData::RadarPoint::Builder::setMeasured(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<224>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getGasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getGasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setGasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getBrakeDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getBrakeDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setBrakeDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Reader::getSteeringTorqueDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Builder::getSteeringTorqueDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setSteeringTorqueDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasCruiseControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasCruiseControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::CruiseControl::Reader CarControl::Reader::getCruiseControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::getCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::CruiseControl::Pipeline CarControl::Pipeline::getCruiseControl() {
  return  ::cereal::CarControl::CruiseControl::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setCruiseControl( ::cereal::CarControl::CruiseControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::CruiseControl::Builder CarControl::Builder::initCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptCruiseControl(
    ::capnp::Orphan< ::cereal::CarControl::CruiseControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::CruiseControl> CarControl::Builder::disownCruiseControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::CruiseControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasHudControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasHudControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::HUDControl::Reader CarControl::Reader::getHudControl() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::getHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::HUDControl::Pipeline CarControl::Pipeline::getHudControl() {
  return  ::cereal::CarControl::HUDControl::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setHudControl( ::cereal::CarControl::HUDControl::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::HUDControl::Builder CarControl::Builder::initHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptHudControl(
    ::capnp::Orphan< ::cereal::CarControl::HUDControl>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::HUDControl> CarControl::Builder::disownHudControl() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::HUDControl>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::hasActuators() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuators() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Actuators::Reader CarControl::Reader::getActuators() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::getActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuators() {
  return  ::cereal::CarControl::Actuators::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuators( ::cereal::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Actuators::Builder CarControl::Builder::initActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuators(
    ::capnp::Orphan< ::cereal::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl::Actuators> CarControl::Builder::disownActuators() {
  return ::capnp::_::PointerHelpers< ::cereal::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarControl::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getGas() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getGas() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setGas(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getBrake() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getBrake() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setBrake(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSteer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getSteerAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteerAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteerAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getCancel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getCancel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setCancel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::CruiseControl::Reader::getOverride() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::CruiseControl::Builder::getOverride() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setOverride(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getSpeedOverride() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getSpeedOverride() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setSpeedOverride(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::CruiseControl::Reader::getAccelOverride() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarControl::CruiseControl::Builder::getAccelOverride() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::CruiseControl::Builder::setAccelOverride(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getSpeedVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getSpeedVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSpeedVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::HUDControl::Reader::getSetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::HUDControl::Builder::getSetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setSetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLanesVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLanesVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLanesVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeadVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeadVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeadVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Reader::getVisualAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::VisualAlert CarControl::HUDControl::Builder::getVisualAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setVisualAlert( ::cereal::CarControl::HUDControl::VisualAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::VisualAlert>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Reader::getAudibleAlert() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert CarControl::HUDControl::Builder::getAudibleAlert() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setAudibleAlert( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getRightLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getRightLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setRightLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::HUDControl::Reader::getLeftLaneDepart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarControl::HUDControl::Builder::getLeftLaneDepart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarControl::HUDControl::Builder::setLeftLaneDepart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasCarFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getEnableGasInterceptor() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableGasInterceptor() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableGasInterceptor(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableCruise() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableCruise() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableCruise(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableCamera() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableCamera() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableCamera(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableDsu() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableDsu() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableDsu(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getEnableApgs() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getEnableApgs() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setEnableApgs(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinEnableSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinEnableSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinEnableSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getMinSteerSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMinSteerSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMinSteerSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CarParams::Reader::getSafetyParam() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CarParams::Builder::getSafetyParam() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyParam( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasSteerMaxBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getSteerMaxBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getSteerMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initSteerMaxBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownSteerMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasSteerMaxV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasSteerMaxV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getSteerMaxV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getSteerMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setSteerMaxV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setSteerMaxV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initSteerMaxV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptSteerMaxV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownSteerMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getGasMaxBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getGasMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initGasMaxBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownGasMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasGasMaxV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasGasMaxV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getGasMaxV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getGasMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setGasMaxV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setGasMaxV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initGasMaxV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptGasMaxV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownGasMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getBrakeMaxBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getBrakeMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initBrakeMaxBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownBrakeMaxBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::hasBrakeMaxV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasBrakeMaxV() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::Reader::getBrakeMaxV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::Builder::getBrakeMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setBrakeMaxV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CarParams::Builder::setBrakeMaxV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::Builder::initBrakeMaxV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptBrakeMaxV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::Builder::disownBrakeMaxV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getMass() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getMass() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMass(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getWheelbase() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getWheelbase() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setWheelbase(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getCenterToFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getCenterToFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCenterToFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRatioRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRatioRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRatioRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getRotationalInertia() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getRotationalInertia() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRotationalInertia(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getTireStiffnessRear() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getTireStiffnessRear() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTireStiffnessRear(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLongitudinalTuning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLongitudinalTuning() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Reader CarParams::Reader::getLongitudinalTuning() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::getLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline CarParams::Pipeline::getLongitudinalTuning() {
  return  ::cereal::CarParams::LongitudinalPIDTuning::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLongitudinalTuning( ::cereal::CarParams::LongitudinalPIDTuning::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LongitudinalPIDTuning::Builder CarParams::Builder::initLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLongitudinalTuning(
    ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LongitudinalPIDTuning> CarParams::Builder::disownLongitudinalTuning() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LongitudinalPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline typename CarParams::LateralTuning::Reader CarParams::Reader::getLateralTuning() const {
  return typename CarParams::LateralTuning::Reader(_reader);
}
inline typename CarParams::LateralTuning::Builder CarParams::Builder::getLateralTuning() {
  return typename CarParams::LateralTuning::Builder(_builder);
}
#if !CAPNP_LITE
inline typename CarParams::LateralTuning::Pipeline CarParams::Pipeline::getLateralTuning() {
  return typename CarParams::LateralTuning::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename CarParams::LateralTuning::Builder CarParams::Builder::initLateralTuning() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<7>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS).clear();
  return typename CarParams::LateralTuning::Builder(_builder);
}
inline bool CarParams::Reader::getSteerLimitAlert() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getSteerLimitAlert() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitAlert(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getVEgoStopping() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getVEgoStopping() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setVEgoStopping(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDirectAccelControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDirectAccelControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDirectAccelControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getStoppingControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getStoppingControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStoppingControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getStartAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getStartAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setStartAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerRateCost() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerRateCost() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerRateCost(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Reader::getSteerControlType() const {
  return _reader.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SteerControlType CarParams::Builder::getSteerControlType() {
  return _builder.getDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerControlType( ::cereal::CarParams::SteerControlType value) {
  _builder.setDataField< ::cereal::CarParams::SteerControlType>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getRadarOffCan() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getRadarOffCan() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setRadarOffCan(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerActuatorDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerActuatorDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerActuatorDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getOpenpilotLongitudinalControl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getOpenpilotLongitudinalControl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setOpenpilotLongitudinalControl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarVin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarVin() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CarParams::Reader::getCarVin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CarParams::Builder::getCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarVin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CarParams::Builder::initCarVin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarVin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CarParams::Builder::disownCarVin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool CarParams::Reader::getIsPandaBlack() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getIsPandaBlack() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setIsPandaBlack(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::getDashcamOnly() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getDashcamOnly() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setDashcamOnly(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Reader::getSafetyModelPassive() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel CarParams::Builder::getSafetyModelPassive() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSafetyModelPassive( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Reader::getTransmissionType() const {
  return _reader.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::TransmissionType CarParams::Builder::getTransmissionType() {
  return _builder.getDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setTransmissionType( ::cereal::CarParams::TransmissionType value) {
  _builder.setDataField< ::cereal::CarParams::TransmissionType>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasCarFw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasCarFw() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarParams::CarFw>::Reader CarParams::Reader::getCarFw() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarParams::CarFw>::Builder CarParams::Builder::getCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::setCarFw( ::capnp::List< ::cereal::CarParams::CarFw>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarParams::CarFw>::Builder CarParams::Builder::initCarFw(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void CarParams::Builder::adoptCarFw(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarParams::CarFw>> CarParams::Builder::disownCarFw() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarParams::CarFw>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline float CarParams::Reader::getRadarTimeStep() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}

inline float CarParams::Builder::getRadarTimeStep() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 1028443341u);
}
inline void CarParams::Builder::setRadarTimeStep(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 1028443341u);
}

inline bool CarParams::Reader::getCommunityFeature() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool CarParams::Builder::getCommunityFeature() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setCommunityFeature(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::Reader::getSteerLimitTimer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float CarParams::Builder::getSteerLimitTimer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSteerLimitTimer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::Reader::hasLateralParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::Builder::hasLateralParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralParams::Reader CarParams::Reader::getLateralParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::getLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::CarParams::LateralParams::Pipeline CarParams::Pipeline::getLateralParams() {
  return  ::cereal::CarParams::LateralParams::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void CarParams::Builder::setLateralParams( ::cereal::CarParams::LateralParams::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralParams::Builder CarParams::Builder::initLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void CarParams::Builder::adoptLateralParams(
    ::capnp::Orphan< ::cereal::CarParams::LateralParams>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralParams> CarParams::Builder::disownLateralParams() {
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralParams>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Reader::getFingerprintSource() const {
  return _reader.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::FingerprintSource CarParams::Builder::getFingerprintSource() {
  return _builder.getDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setFingerprintSource( ::cereal::CarParams::FingerprintSource value) {
  _builder.setDataField< ::cereal::CarParams::FingerprintSource>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t CarParams::Reader::getMdpsBus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline  ::int8_t CarParams::Builder::getMdpsBus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setMdpsBus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t CarParams::Reader::getSasBus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}

inline  ::int8_t CarParams::Builder::getSasBus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSasBus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t CarParams::Reader::getSccBus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline  ::int8_t CarParams::Builder::getSccBus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setSccBus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t CarParams::Reader::getAutoLcaEnabled() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}

inline  ::int8_t CarParams::Builder::getAutoLcaEnabled() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}
inline void CarParams::Builder::setAutoLcaEnabled( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralParams::Reader::hasTorqueBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader CarParams::LateralParams::Reader::getTorqueBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder CarParams::LateralParams::Builder::getTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueBP( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueBP(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder CarParams::LateralParams::Builder::initTorqueBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueBP(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> CarParams::LateralParams::Builder::disownTorqueBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralParams::Reader::hasTorqueV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralParams::Builder::hasTorqueV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader CarParams::LateralParams::Reader::getTorqueV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder CarParams::LateralParams::Builder::getTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralParams::Builder::setTorqueV( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralParams::Builder::setTorqueV(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder CarParams::LateralParams::Builder::initTorqueV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralParams::Builder::adoptTorqueV(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> CarParams::LateralParams::Builder::disownTorqueV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKpV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralPIDTuning::Builder::setKiV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float CarParams::LateralPIDTuning::Reader::getKf() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralPIDTuning::Builder::getKf() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralPIDTuning::Builder::setKf(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownKpBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKpV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKpV() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getKpV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKpV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initKpV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKpV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownKpV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownKiBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasKiV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasKiV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getKiV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setKiV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initKiV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptKiV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownKiV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneBP() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneBP() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneBP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBP( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneBP(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneBP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneBP(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneBP() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CarParams::LongitudinalPIDTuning::Reader::hasDeadzoneV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LongitudinalPIDTuning::Builder::hasDeadzoneV() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LongitudinalPIDTuning::Reader::getDeadzoneV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::getDeadzoneV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CarParams::LongitudinalPIDTuning::Builder::setDeadzoneV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LongitudinalPIDTuning::Builder::initDeadzoneV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CarParams::LongitudinalPIDTuning::Builder::adoptDeadzoneV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LongitudinalPIDTuning::Builder::disownDeadzoneV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float CarParams::LateralINDITuning::Reader::getOuterLoopGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getOuterLoopGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setOuterLoopGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getInnerLoopGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getInnerLoopGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setInnerLoopGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getTimeConstant() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getTimeConstant() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setTimeConstant(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralINDITuning::Reader::getActuatorEffectiveness() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralINDITuning::Builder::getActuatorEffectiveness() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralINDITuning::Builder::setActuatorEffectiveness(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getKi() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getKi() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setKi(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float CarParams::LateralLQRTuning::Reader::getDcGain() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CarParams::LateralLQRTuning::Builder::getDcGain() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::LateralLQRTuning::Builder::setDcGain(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::LateralLQRTuning::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralLQRTuning::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setA( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setA(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralLQRTuning::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasB() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasB() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralLQRTuning::Reader::getB() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::getB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setB( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setB(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::initB(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptB(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralLQRTuning::Builder::disownB() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasC() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasC() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralLQRTuning::Reader::getC() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::getC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setC( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setC(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::initC(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptC(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralLQRTuning::Builder::disownC() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasK() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasK() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralLQRTuning::Reader::getK() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::getK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setK( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setK(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::initK(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptK(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralLQRTuning::Builder::disownK() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralLQRTuning::Reader::hasL() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralLQRTuning::Builder::hasL() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CarParams::LateralLQRTuning::Reader::getL() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::getL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CarParams::LateralLQRTuning::Builder::setL( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CarParams::LateralLQRTuning::Builder::setL(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CarParams::LateralLQRTuning::Builder::initL(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CarParams::LateralLQRTuning::Builder::adoptL(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CarParams::LateralLQRTuning::Builder::disownL() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Reader::getEcu() const {
  return _reader.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::Ecu CarParams::CarFw::Builder::getEcu() {
  return _builder.getDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setEcu( ::cereal::CarParams::Ecu value) {
  _builder.setDataField< ::cereal::CarParams::Ecu>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarParams::CarFw::Reader::hasFwVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::CarFw::Builder::hasFwVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CarParams::CarFw::Reader::getFwVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::getFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarParams::CarFw::Builder::setFwVersion( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CarParams::CarFw::Builder::initFwVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CarParams::CarFw::Builder::adoptFwVersion(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CarParams::CarFw::Builder::disownFwVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t CarParams::CarFw::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CarParams::CarFw::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CarParams::CarFw::Reader::getSubAddress() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CarParams::CarFw::Builder::getSubAddress() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CarParams::CarFw::Builder::setSubAddress( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::cereal::CarParams::LateralTuning::Which CarParams::LateralTuning::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool CarParams::LateralTuning::Reader::isPid() const {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Builder::isPid() {
  return which() == CarParams::LateralTuning::PID;
}
inline bool CarParams::LateralTuning::Reader::hasPid() const {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasPid() {
  if (which() != CarParams::LateralTuning::PID) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralPIDTuning::Reader CarParams::LateralTuning::Reader::getPid() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::getPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setPid( ::cereal::CarParams::LateralPIDTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralPIDTuning::Builder CarParams::LateralTuning::Builder::initPid() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptPid(
    ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::PID);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralPIDTuning> CarParams::LateralTuning::Builder::disownPid() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::PID),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralPIDTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isIndi() const {
  return which() == CarParams::LateralTuning::INDI;
}
inline bool CarParams::LateralTuning::Builder::isIndi() {
  return which() == CarParams::LateralTuning::INDI;
}
inline bool CarParams::LateralTuning::Reader::hasIndi() const {
  if (which() != CarParams::LateralTuning::INDI) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasIndi() {
  if (which() != CarParams::LateralTuning::INDI) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralINDITuning::Reader CarParams::LateralTuning::Reader::getIndi() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::getIndi() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setIndi( ::cereal::CarParams::LateralINDITuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralINDITuning::Builder CarParams::LateralTuning::Builder::initIndi() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptIndi(
    ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::INDI);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralINDITuning> CarParams::LateralTuning::Builder::disownIndi() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::INDI),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralINDITuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CarParams::LateralTuning::Reader::isLqr() const {
  return which() == CarParams::LateralTuning::LQR;
}
inline bool CarParams::LateralTuning::Builder::isLqr() {
  return which() == CarParams::LateralTuning::LQR;
}
inline bool CarParams::LateralTuning::Reader::hasLqr() const {
  if (which() != CarParams::LateralTuning::LQR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CarParams::LateralTuning::Builder::hasLqr() {
  if (which() != CarParams::LateralTuning::LQR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::LateralLQRTuning::Reader CarParams::LateralTuning::Reader::getLqr() const {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::getLqr() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::setLqr( ::cereal::CarParams::LateralLQRTuning::Reader value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::LateralLQRTuning::Builder CarParams::LateralTuning::Builder::initLqr() {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CarParams::LateralTuning::Builder::adoptLqr(
    ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning>&& value) {
  _builder.setDataField<CarParams::LateralTuning::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, CarParams::LateralTuning::LQR);
  ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams::LateralLQRTuning> CarParams::LateralTuning::Builder::disownLqr() {
  KJ_IREQUIRE((which() == CarParams::LateralTuning::LQR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams::LateralLQRTuning>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_8e2af1e708af8b8d_
