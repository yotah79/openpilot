// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: log.capnp

#ifndef CAPNP_INCLUDED_f3b1f17e25a4285b_
#define CAPNP_INCLUDED_f3b1f17e25a4285b_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "car.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d578fb3372ed5043);
CAPNP_DECLARE_SCHEMA(f8b13ce2183eb696);
CAPNP_DECLARE_SCHEMA(a5dfdd084a6eea0e);
CAPNP_DECLARE_SCHEMA(e71008caeb3fb65c);
CAPNP_DECLARE_SCHEMA(9d5d7238eba86608);
enum class DeviceType_9d5d7238eba86608: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  CHFFR_IOS,
};
CAPNP_DECLARE_ENUM(DeviceType, 9d5d7238eba86608);
CAPNP_DECLARE_SCHEMA(fe2919d5c21f426c);
CAPNP_DECLARE_SCHEMA(9b513b93a887dbcd);
CAPNP_DECLARE_SCHEMA(9cfb5d53a4f615a5);
CAPNP_DECLARE_SCHEMA(d97e3b28239f5580);
CAPNP_DECLARE_SCHEMA(e673e8725cdff0ad);
CAPNP_DECLARE_SCHEMA(ea0245f695ae0a33);
CAPNP_DECLARE_SCHEMA(ddb169f01e102879);
enum class FrameType_ddb169f01e102879: uint16_t {
  UNKNOWN,
  NEO,
  CHFFR_ANDROID,
  FRONT,
};
CAPNP_DECLARE_ENUM(FrameType, ddb169f01e102879);
CAPNP_DECLARE_SCHEMA(bcc3efbac41d2048);
CAPNP_DECLARE_SCHEMA(b65fce64120af7d3);
CAPNP_DECLARE_SCHEMA(9d291d7813ba4a88);
CAPNP_DECLARE_SCHEMA(a2b29a69d44529a1);
CAPNP_DECLARE_SCHEMA(a43429bd2bfc24fc);
CAPNP_DECLARE_SCHEMA(e49b3ce8f7f48d0d);
enum class SensorSource_e49b3ce8f7f48d0d: uint16_t {
  ANDROID,
  I_O_S,
  FIBER,
  VELODYNE,
  BNO055,
  LSM6DS3,
  BMP280,
  MMC3416X,
};
CAPNP_DECLARE_ENUM(SensorSource, e49b3ce8f7f48d0d);
CAPNP_DECLARE_SCHEMA(e946524859add50e);
CAPNP_DECLARE_SCHEMA(d3ff79f25c734863);
enum class SensorSource_d3ff79f25c734863: uint16_t {
  ANDROID,
  I_O_S,
  CAR,
  VELODYNE,
  FUSION,
  EXTERNAL,
  UBLOX,
  TRIMBLE,
};
CAPNP_DECLARE_ENUM(SensorSource, d3ff79f25c734863);
CAPNP_DECLARE_SCHEMA(8785009a964c7c59);
CAPNP_DECLARE_SCHEMA(8d8231a40b7fe6e0);
CAPNP_DECLARE_SCHEMA(98c15adf4549151f);
enum class ThermalStatus_98c15adf4549151f: uint16_t {
  GREEN,
  YELLOW,
  RED,
  DANGER,
};
CAPNP_DECLARE_ENUM(ThermalStatus, 98c15adf4549151f);
CAPNP_DECLARE_SCHEMA(be9411d70903973e);
enum class NetworkType_be9411d70903973e: uint16_t {
  NONE,
  WIFI,
  CELL2_G,
  CELL3_G,
  CELL4_G,
  CELL5_G,
};
CAPNP_DECLARE_ENUM(NetworkType, be9411d70903973e);
CAPNP_DECLARE_SCHEMA(cfa2b0c2c82af1e4);
CAPNP_DECLARE_SCHEMA(dba986d5085e7841);
enum class FaultStatus_dba986d5085e7841: uint16_t {
  NONE,
  FAULT_TEMP,
  FAULT_PERM,
};
CAPNP_DECLARE_ENUM(FaultStatus, dba986d5085e7841);
CAPNP_DECLARE_SCHEMA(861b4c91fc3f20df);
enum class FaultType_861b4c91fc3f20df: uint16_t {
  RELAY_MALFUNCTION,
};
CAPNP_DECLARE_ENUM(FaultType, 861b4c91fc3f20df);
CAPNP_DECLARE_SCHEMA(8a58adf93e5b3751);
enum class HwType_8a58adf93e5b3751: uint16_t {
  UNKNOWN,
  WHITE_PANDA,
  GREY_PANDA,
  BLACK_PANDA,
  PEDAL,
  UNO,
};
CAPNP_DECLARE_ENUM(HwType, 8a58adf93e5b3751);
CAPNP_DECLARE_SCHEMA(c306478a6828188f);
enum class UsbPowerMode_c306478a6828188f: uint16_t {
  NONE,
  CLIENT,
  CDP,
  DCP,
};
CAPNP_DECLARE_ENUM(UsbPowerMode, c306478a6828188f);
CAPNP_DECLARE_SCHEMA(c08240f996aefced);
CAPNP_DECLARE_SCHEMA(9a185389d6fdd05f);
CAPNP_DECLARE_SCHEMA(b96f3ad9170cf085);
CAPNP_DECLARE_SCHEMA(96df70754d8390bc);
CAPNP_DECLARE_SCHEMA(8faa644732dec251);
CAPNP_DECLARE_SCHEMA(97ff69c53601abf1);
CAPNP_DECLARE_SCHEMA(dbe58b96d2d1ac61);
enum class OpenpilotState_dbe58b96d2d1ac61: uint16_t {
  DISABLED,
  PRE_ENABLED,
  ENABLED,
  SOFT_DISABLING,
};
CAPNP_DECLARE_ENUM(OpenpilotState, dbe58b96d2d1ac61);
CAPNP_DECLARE_SCHEMA(e40f3a917d908282);
enum class LongControlState_e40f3a917d908282: uint16_t {
  OFF,
  PID,
  STOPPING,
  STARTING,
};
CAPNP_DECLARE_ENUM(LongControlState, e40f3a917d908282);
CAPNP_DECLARE_SCHEMA(a0d0dcd113193c62);
enum class AlertStatus_a0d0dcd113193c62: uint16_t {
  NORMAL,
  USER_PROMPT,
  CRITICAL,
};
CAPNP_DECLARE_ENUM(AlertStatus, a0d0dcd113193c62);
CAPNP_DECLARE_SCHEMA(e98bb99d6e985f64);
enum class AlertSize_e98bb99d6e985f64: uint16_t {
  NONE,
  SMALL,
  MID,
  FULL,
};
CAPNP_DECLARE_ENUM(AlertSize, e98bb99d6e985f64);
CAPNP_DECLARE_SCHEMA(939463348632375e);
CAPNP_DECLARE_SCHEMA(f28c5dc9e09375e3);
CAPNP_DECLARE_SCHEMA(9024e2d790c82ade);
CAPNP_DECLARE_SCHEMA(fd5b914d6b444695);
CAPNP_DECLARE_SCHEMA(94b7baa90c5c321e);
CAPNP_DECLARE_SCHEMA(b8aad62cffef28a9);
CAPNP_DECLARE_SCHEMA(8817eeea389e9f08);
CAPNP_DECLARE_SCHEMA(d1c9bef96d26fa91);
CAPNP_DECLARE_SCHEMA(a26e3710efd3e914);
CAPNP_DECLARE_SCHEMA(9744f25fb60f2bf8);
CAPNP_DECLARE_SCHEMA(f98f999c6a071122);
CAPNP_DECLARE_SCHEMA(8fdfadb254ea867a);
CAPNP_DECLARE_SCHEMA(89d394e3541735fc);
CAPNP_DECLARE_SCHEMA(c0ad259ec157ccd3);
enum class Type_c0ad259ec157ccd3: uint16_t {
  BIG_BOX_LOSSLESS,
  FULL_H_E_V_C,
  BIG_BOX_H_E_V_C,
  CHFFR_ANDROID_H264,
  FULL_LOSSLESS_CLIP,
  FRONT,
};
CAPNP_DECLARE_ENUM(Type, c0ad259ec157ccd3);
CAPNP_DECLARE_SCHEMA(ea095da1894f7d85);
CAPNP_DECLARE_SCHEMA(9811e1f38f62f2d1);
CAPNP_DECLARE_SCHEMA(e00b5b3eba12876c);
CAPNP_DECLARE_SCHEMA(8cfeb072f5301000);
CAPNP_DECLARE_SCHEMA(b231a753cc079120);
enum class LongitudinalPlanSource_b231a753cc079120: uint16_t {
  CRUISE,
  MPC1,
  MPC2,
  MPC3,
  MODEL,
};
CAPNP_DECLARE_ENUM(LongitudinalPlanSource, b231a753cc079120);
CAPNP_DECLARE_SCHEMA(e1e9318e2ae8b51e);
CAPNP_DECLARE_SCHEMA(bb53ef3fcf2a7f0d);
enum class Desire_bb53ef3fcf2a7f0d: uint16_t {
  NONE,
  TURN_LEFT,
  TURN_RIGHT,
  LANE_CHANGE_LEFT,
  LANE_CHANGE_RIGHT,
  KEEP_LEFT,
  KEEP_RIGHT,
};
CAPNP_DECLARE_ENUM(Desire, bb53ef3fcf2a7f0d);
CAPNP_DECLARE_SCHEMA(fac297f195ce56d2);
enum class LaneChangeState_fac297f195ce56d2: uint16_t {
  OFF,
  PRE_LANE_CHANGE,
  LANE_CHANGE_STARTING,
  LANE_CHANGE_FINISHING,
};
CAPNP_DECLARE_ENUM(LaneChangeState, fac297f195ce56d2);
CAPNP_DECLARE_SCHEMA(f7396311bcbad303);
enum class LaneChangeDirection_f7396311bcbad303: uint16_t {
  NONE,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(LaneChangeDirection, f7396311bcbad303);
CAPNP_DECLARE_SCHEMA(83559420cd88c648);
enum class LaneChangeBSM_83559420cd88c648: uint16_t {
  OFF,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(LaneChangeBSM, 83559420cd88c648);
CAPNP_DECLARE_SCHEMA(b99b2bc7a57e8128);
CAPNP_DECLARE_SCHEMA(943dc4625473b03f);
CAPNP_DECLARE_SCHEMA(c871d3cc252af657);
enum class SensorSource_c871d3cc252af657: uint16_t {
  APPLANIX,
  KALMAN,
  ORBSLAM,
  TIMING,
  DUMMY,
};
CAPNP_DECLARE_ENUM(SensorSource, c871d3cc252af657);
CAPNP_DECLARE_SCHEMA(a99a9d5b33cf5859);
CAPNP_DECLARE_SCHEMA(db98be6565516acb);
CAPNP_DECLARE_SCHEMA(9eaef9187cadbb9b);
CAPNP_DECLARE_SCHEMA(a5b39b4fc4d7da3f);
CAPNP_DECLARE_SCHEMA(c5417a637451246f);
enum class Instruction_c5417a637451246f: uint16_t {
  TURN_LEFT,
  TURN_RIGHT,
  KEEP_LEFT,
  KEEP_RIGHT,
  STRAIGHT,
  ROUNDABOUT_EXIT_NUMBER,
  ROUNDABOUT_EXIT,
  ROUNDABOUT_TURN_LEFT,
  UNKN8,
  ROUNDABOUT_STRAIGHT,
  UNKN10,
  ROUNDABOUT_TURN_RIGHT,
  UNKN12,
  ROUNDABOUT_UTURN,
  UNKN14,
  ARRIVE,
  EXIT_LEFT,
  EXIT_RIGHT,
  UNKN18,
  UTURN,
};
CAPNP_DECLARE_ENUM(Instruction, c5417a637451246f);
CAPNP_DECLARE_SCHEMA(bd8822120928120c);
CAPNP_DECLARE_SCHEMA(ce7cd672cacc7814);
CAPNP_DECLARE_SCHEMA(cff7566681c277ce);
CAPNP_DECLARE_SCHEMA(d4df5a192382ba0b);
CAPNP_DECLARE_SCHEMA(cb6a279f015f6b51);
enum class ChannelWidth_cb6a279f015f6b51: uint16_t {
  W20_MHZ,
  W40_MHZ,
  W80_MHZ,
  W160_MHZ,
  W80_PLUS80_MHZ,
};
CAPNP_DECLARE_ENUM(ChannelWidth, cb6a279f015f6b51);
CAPNP_DECLARE_SCHEMA(dfdf30d03fc485bd);
CAPNP_DECLARE_SCHEMA(a20710d4f428d6cd);
CAPNP_DECLARE_SCHEMA(a0e27b453a38f450);
CAPNP_DECLARE_SCHEMA(d949bf717d77614d);
CAPNP_DECLARE_SCHEMA(9ef1f3ff0deb5ffb);
enum class Constellation_9ef1f3ff0deb5ffb: uint16_t {
  UNKNOWN,
  GPS,
  SBAS,
  GLONASS,
  QZSS,
  BEIDOU,
  GALILEO,
};
CAPNP_DECLARE_ENUM(Constellation, 9ef1f3ff0deb5ffb);
CAPNP_DECLARE_SCHEMA(cbb9490adce12d72);
enum class State_cbb9490adce12d72: uint16_t {
  UNKNOWN,
  CODE_LOCK,
  BIT_SYNC,
  SUBFRAME_SYNC,
  TOW_DECODED,
  MSEC_AMBIGUOUS,
  SYMBOL_SYNC,
  GLO_STRING_SYNC,
  GLO_TOD_DECODED,
  BDS_D2_BIT_SYNC,
  BDS_D2_SUBFRAME_SYNC,
  GAL_E1BC_CODE_LOCK,
  GAL_E1C2ND_CODE_LOCK,
  GAL_E1B_PAGE_SYNC,
  SBAS_SYNC,
};
CAPNP_DECLARE_ENUM(State, cbb9490adce12d72);
CAPNP_DECLARE_SCHEMA(c04e7b6231d4caa8);
enum class MultipathIndicator_c04e7b6231d4caa8: uint16_t {
  UNKNOWN,
  DETECTED,
  NOT_DETECTED,
};
CAPNP_DECLARE_ENUM(MultipathIndicator, c04e7b6231d4caa8);
CAPNP_DECLARE_SCHEMA(e2517b083095fd4e);
CAPNP_DECLARE_SCHEMA(ec1ff7996b35366f);
enum class Status_ec1ff7996b35366f: uint16_t {
  UNKNOWN,
  PARITY_PASSED,
  PARITY_REBUILT,
};
CAPNP_DECLARE_ENUM(Status, ec1ff7996b35366f);
CAPNP_DECLARE_SCHEMA(de94674b07ae51c1);
CAPNP_DECLARE_SCHEMA(d71a12b6faada7ee);
enum class MeasurementSource_d71a12b6faada7ee: uint16_t {
  GPS,
  GLONASS,
  BEIDOU,
};
CAPNP_DECLARE_ENUM(MeasurementSource, d71a12b6faada7ee);
CAPNP_DECLARE_SCHEMA(e81e829a0d6c83e9);
enum class SVObservationState_e81e829a0d6c83e9: uint16_t {
  IDLE,
  SEARCH,
  SEARCH_VERIFY,
  BIT_EDGE,
  TRACK_VERIFY,
  TRACK,
  RESTART,
  DPO,
  GLO10MS_BE,
  GLO10MS_AT,
};
CAPNP_DECLARE_ENUM(SVObservationState, e81e829a0d6c83e9);
CAPNP_DECLARE_SCHEMA(e501010e1bcae83b);
CAPNP_DECLARE_SCHEMA(f580d7d86b7b8692);
CAPNP_DECLARE_SCHEMA(f10c595ae7bb2c27);
CAPNP_DECLARE_SCHEMA(ca965e4add8f4f0b);
CAPNP_DECLARE_SCHEMA(8053c39445c6c75c);
CAPNP_DECLARE_SCHEMA(f08b81df8cbf459c);
CAPNP_DECLARE_SCHEMA(b1fb80811a673270);
CAPNP_DECLARE_SCHEMA(e3d6685d4e9d8f7a);
CAPNP_DECLARE_SCHEMA(af85387b3f681406);
CAPNP_DECLARE_SCHEMA(b0b85613f19e6d28);
CAPNP_DECLARE_SCHEMA(f189c8c5bf2ce087);
CAPNP_DECLARE_SCHEMA(fd095f94f08b3fd4);
CAPNP_DECLARE_SCHEMA(85dddd7ce6cefa5d);
CAPNP_DECLARE_SCHEMA(a73ba546a29820f4);
CAPNP_DECLARE_SCHEMA(fbb838d65160aab6);
CAPNP_DECLARE_SCHEMA(8f8a655f5e326401);
CAPNP_DECLARE_SCHEMA(e8efb3a802b299b2);
CAPNP_DECLARE_SCHEMA(d8418c788118f85c);
CAPNP_DECLARE_SCHEMA(c3a3a8de519a4a26);
CAPNP_DECLARE_SCHEMA(ebb036b114275aa8);
CAPNP_DECLARE_SCHEMA(c23e1128ab4d5b53);
enum class AntennaSupervisorState_c23e1128ab4d5b53: uint16_t {
  INIT,
  DONTKNOW,
  OK,
  SHORT,
  OPEN,
};
CAPNP_DECLARE_ENUM(AntennaSupervisorState, c23e1128ab4d5b53);
CAPNP_DECLARE_SCHEMA(fe3b51a924e46559);
enum class AntennaPowerStatus_fe3b51a924e46559: uint16_t {
  OFF,
  ON,
  DONTKNOW,
};
CAPNP_DECLARE_ENUM(AntennaPowerStatus, fe3b51a924e46559);
CAPNP_DECLARE_SCHEMA(c95fb49a7bdc4618);
CAPNP_DECLARE_SCHEMA(92a5e332a85f32a0);
CAPNP_DECLARE_SCHEMA(e7e17c434f865ae2);
CAPNP_DECLARE_SCHEMA(e10e21168db0c7f7);
CAPNP_DECLARE_SCHEMA(c25bbbd524983447);
CAPNP_DECLARE_SCHEMA(ab54c59699f8f9f3);
CAPNP_DECLARE_SCHEMA(f5ad1d90cdc1dd6b);
CAPNP_DECLARE_SCHEMA(acfa74a094e62626);
CAPNP_DECLARE_SCHEMA(d85d75253435bf4b);
enum class Type_d85d75253435bf4b: uint16_t {
  STOP_SIGN,
  LIGHT_RED,
  LIGHT_YELLOW,
  LIGHT_GREEN,
  STOP_LIGHT,
};
CAPNP_DECLARE_ENUM(Type, d85d75253435bf4b);
CAPNP_DECLARE_SCHEMA(a6f6ce72165ccb49);
enum class Action_a6f6ce72165ccb49: uint16_t {
  NONE,
  YIELD,
  STOP,
  RESUME_READY,
};
CAPNP_DECLARE_ENUM(Action, a6f6ce72165ccb49);
CAPNP_DECLARE_SCHEMA(8afd33dc9b35e1aa);
CAPNP_DECLARE_SCHEMA(9b326d4e436afec7);
CAPNP_DECLARE_SCHEMA(90c8426c3eaddd3b);
CAPNP_DECLARE_SCHEMA(e8db07dcf8fcea05);
enum class Type_e8db07dcf8fcea05: uint16_t {
  NONE,
  LANE_CHANGE_LEFT,
  LANE_CHANGE_RIGHT,
  MERGE_LEFT,
  MERGE_RIGHT,
  TURN_LEFT,
  TURN_RIGHT,
};
CAPNP_DECLARE_ENUM(Type, e8db07dcf8fcea05);
CAPNP_DECLARE_SCHEMA(b9aa88c75ef99a1f);
enum class Status_b9aa88c75ef99a1f: uint16_t {
  NONE,
  PASSIVE,
  APPROACHING,
  ACTIVE,
};
CAPNP_DECLARE_ENUM(Status, b9aa88c75ef99a1f);
CAPNP_DECLARE_SCHEMA(88dcce08ad29dda0);
CAPNP_DECLARE_SCHEMA(9917470acf94d285);
enum class App_9917470acf94d285: uint16_t {
  HOME,
  MUSIC,
  NAV,
  SETTINGS,
};
CAPNP_DECLARE_ENUM(App, 9917470acf94d285);
CAPNP_DECLARE_SCHEMA(e42401658e2715e2);
CAPNP_DECLARE_SCHEMA(d7700859ed1f5b76);
CAPNP_DECLARE_SCHEMA(cd60164a8a0159ef);
CAPNP_DECLARE_SCHEMA(d500d30c5803fa4f);
CAPNP_DECLARE_SCHEMA(c8233c0345e27e24);
CAPNP_DECLARE_SCHEMA(b83c6cc593ed0a00);
CAPNP_DECLARE_SCHEMA(b83cda094a1da284);
CAPNP_DECLARE_SCHEMA(a12e8670927a2549);
CAPNP_DECLARE_SCHEMA(d9058dcb967c2753);
CAPNP_DECLARE_SCHEMA(9854f620f0d3b9cc);
CAPNP_DECLARE_SCHEMA(fa9a296b9fd41a96);
CAPNP_DECLARE_SCHEMA(92e21bb7ea38793a);
CAPNP_DECLARE_SCHEMA(d314cfd957229c11);

}  // namespace schemas
}  // namespace capnp

namespace cereal {

static constexpr  ::int32_t LOG_VERSION = 1;
template <typename Key = ::capnp::AnyPointer, typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8b13ce2183eb696, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5dfdd084a6eea0e, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct InitData {
  InitData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DeviceType_9d5d7238eba86608 DeviceType;

  struct AndroidBuildInfo;
  struct AndroidSensor;
  struct ChffrAndroidExtra;
  struct IosBuildInfo;
  struct PandaInfo;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e71008caeb3fb65c, 1, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidBuildInfo {
  AndroidBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe2919d5c21f426c, 2, 21)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::AndroidSensor {
  AndroidSensor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b513b93a887dbcd, 6, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::ChffrAndroidExtra {
  ChffrAndroidExtra() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9cfb5d53a4f615a5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::IosBuildInfo {
  IosBuildInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d97e3b28239f5580, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitData::PandaInfo {
  PandaInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e673e8725cdff0ad, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData {
  FrameData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FrameType_ddb169f01e102879 FrameType;

  struct AndroidCaptureResult;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea0245f695ae0a33, 8, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameData::AndroidCaptureResult {
  AndroidCaptureResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcc3efbac41d2048, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Thumbnail {
  Thumbnail() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b65fce64120af7d3, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSNMEAData {
  GPSNMEAData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d291d7813ba4a88, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData {
  SensorEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACCELERATION,
    MAGNETIC,
    ORIENTATION,
    GYRO,
    PRESSURE,
    MAGNETIC_UNCALIBRATED,
    GYRO_UNCALIBRATED,
    PROXIMITY,
    LIGHT,
  };
  struct SensorVec;
  typedef ::capnp::schemas::SensorSource_e49b3ce8f7f48d0d SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2b29a69d44529a1, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorEventData::SensorVec {
  SensorVec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a43429bd2bfc24fc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GpsLocationData {
  GpsLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::SensorSource_d3ff79f25c734863 SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e946524859add50e, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CanData {
  CanData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8785009a964c7c59, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ThermalData {
  ThermalData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ThermalStatus_98c15adf4549151f ThermalStatus;

  typedef ::capnp::schemas::NetworkType_be9411d70903973e NetworkType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d8231a40b7fe6e0, 7, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HealthData {
  HealthData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::FaultStatus_dba986d5085e7841 FaultStatus;

  typedef ::capnp::schemas::FaultType_861b4c91fc3f20df FaultType;

  typedef ::capnp::schemas::HwType_8a58adf93e5b3751 HwType;

  typedef ::capnp::schemas::UsbPowerMode_c306478a6828188f UsbPowerMode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfa2b0c2c82af1e4, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveUI {
  LiveUI() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c08240f996aefced, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState {
  RadarState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LeadData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a185389d6fdd05f, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarState::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b96f3ad9170cf085, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveCalibrationData {
  LiveCalibrationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96df70754d8390bc, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveTracks {
  LiveTracks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8faa644732dec251, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState {
  ControlsState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::OpenpilotState_dbe58b96d2d1ac61 OpenpilotState;

  typedef ::capnp::schemas::LongControlState_e40f3a917d908282 LongControlState;

  typedef ::capnp::schemas::AlertStatus_a0d0dcd113193c62 AlertStatus;

  typedef ::capnp::schemas::AlertSize_e98bb99d6e985f64 AlertSize;

  struct LateralINDIState;
  struct LateralPIDState;
  struct LateralLQRState;
  struct LateralControlState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97ff69c53601abf1, 22, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralINDIState {
  LateralINDIState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(939463348632375e, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralPIDState {
  LateralPIDState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f28c5dc9e09375e3, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralLQRState {
  LateralLQRState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9024e2d790c82ade, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlsState::LateralControlState {
  LateralControlState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INDI_STATE,
    PID_STATE,
    LQR_STATE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd5b914d6b444695, 22, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveEventData {
  LiveEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94b7baa90c5c321e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData {
  ModelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PathData;
  struct LeadData;
  struct ModelSettings;
  struct MetaData;
  struct LongitudinalData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8aad62cffef28a9, 2, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::PathData {
  PathData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8817eeea389e9f08, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::LeadData {
  LeadData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1c9bef96d26fa91, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::ModelSettings {
  ModelSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a26e3710efd3e914, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::MetaData {
  MetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9744f25fb60f2bf8, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelData::LongitudinalData {
  LongitudinalData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98f999c6a071122, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CalibrationFeatures {
  CalibrationFeatures() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fdfadb254ea867a, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EncodeIndex {
  EncodeIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_c0ad259ec157ccd3 Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89d394e3541735fc, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidLogEntry {
  AndroidLogEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea095da1894f7d85, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LogRotate {
  LogRotate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9811e1f38f62f2d1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Plan {
  Plan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct GpsTrajectory;
  typedef ::capnp::schemas::LongitudinalPlanSource_b231a753cc079120 LongitudinalPlanSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e00b5b3eba12876c, 10, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Plan::GpsTrajectory {
  GpsTrajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cfeb072f5301000, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PathPlan {
  PathPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Desire_bb53ef3fcf2a7f0d Desire;

  typedef ::capnp::schemas::LaneChangeState_fac297f195ce56d2 LaneChangeState;

  typedef ::capnp::schemas::LaneChangeDirection_f7396311bcbad303 LaneChangeDirection;

  typedef ::capnp::schemas::LaneChangeBSM_83559420cd88c648 LaneChangeBSM;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1e9318e2ae8b51e, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationData {
  LiveLocationData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Accuracy;
  typedef ::capnp::schemas::SensorSource_c871d3cc252af657 SensorSource;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b99b2bc7a57e8128, 10, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLocationData::Accuracy {
  Accuracy() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(943dc4625473b03f, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EthernetPacket {
  EthernetPacket() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a99a9d5b33cf5859, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate {
  NavUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LatLng;
  struct Segment;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db98be6565516acb, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate::LatLng {
  LatLng() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9eaef9187cadbb9b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavUpdate::Segment {
  Segment() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Instruction_c5417a637451246f Instruction;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5b39b4fc4d7da3f, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStatus {
  NavStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Address;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd8822120928120c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStatus::Address {
  Address() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce7cd672cacc7814, 2, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CellInfo {
  CellInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cff7566681c277ce, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WifiScan {
  WifiScan() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ChannelWidth_cb6a279f015f6b51 ChannelWidth;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4df5a192382ba0b, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss {
  AndroidGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENTS,
    NAVIGATION_MESSAGE,
  };
  struct Measurements;
  struct NavigationMessage;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfdf30d03fc485bd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements {
  Measurements() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Clock;
  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a20710d4f428d6cd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements::Clock {
  Clock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0e27b453a38f450, 9, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::Measurements::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Constellation_9ef1f3ff0deb5ffb Constellation;

  typedef ::capnp::schemas::State_cbb9490adce12d72 State;

  typedef ::capnp::schemas::MultipathIndicator_c04e7b6231d4caa8 MultipathIndicator;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d949bf717d77614d, 15, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AndroidGnss::NavigationMessage {
  NavigationMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_ec1ff7996b35366f Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2517b083095fd4e, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss {
  QcomGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENT_REPORT,
    CLOCK_REPORT,
    DR_MEASUREMENT_REPORT,
    DR_SV_POLY,
    RAW_LOG,
  };
  typedef ::capnp::schemas::MeasurementSource_d71a12b6faada7ee MeasurementSource;

  typedef ::capnp::schemas::SVObservationState_e81e829a0d6c83e9 SVObservationState;

  struct MeasurementStatus;
  struct MeasurementReport;
  struct ClockReport;
  struct DrMeasurementReport;
  struct DrSvPolyReport;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de94674b07ae51c1, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementStatus {
  MeasurementStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e501010e1bcae83b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementReport {
  MeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SV;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f580d7d86b7b8692, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::MeasurementReport::SV {
  SV() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f10c595ae7bb2c27, 8, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::ClockReport {
  ClockReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca965e4add8f4f0b, 18, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrMeasurementReport {
  DrMeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SV;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8053c39445c6c75c, 10, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrMeasurementReport::SV {
  SV() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f08b81df8cbf459c, 12, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QcomGnss::DrSvPolyReport {
  DrSvPolyReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1fb80811a673270, 7, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LidarPts {
  LidarPts() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3d6685d4e9d8f7a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog {
  ProcLog() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Process;
  struct CPUTimes;
  struct Mem;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af85387b3f681406, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Process {
  Process() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0b85613f19e6d28, 9, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::CPUTimes {
  CPUTimes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f189c8c5bf2ce087, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ProcLog::Mem {
  Mem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd095f94f08b3fd4, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss {
  UbloxGnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MEASUREMENT_REPORT,
    EPHEMERIS,
    IONO_DATA,
    HW_STATUS,
  };
  struct MeasurementReport;
  struct Ephemeris;
  struct IonoData;
  struct HwStatus;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85dddd7ce6cefa5d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport {
  MeasurementReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ReceiverStatus;
  struct Measurement;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a73ba546a29820f4, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::ReceiverStatus {
  ReceiverStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbb838d65160aab6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement {
  Measurement() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TrackingStatus;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f8a655f5e326401, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::MeasurementReport::Measurement::TrackingStatus {
  TrackingStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8efb3a802b299b2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::Ephemeris {
  Ephemeris() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8418c788118f85c, 33, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::IonoData {
  IonoData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3a3a8de519a4a26, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UbloxGnss::HwStatus {
  HwStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::AntennaSupervisorState_c23e1128ab4d5b53 AntennaSupervisorState;

  typedef ::capnp::schemas::AntennaPowerStatus_fe3b51a924e46559 AntennaPowerStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebb036b114275aa8, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Clocks {
  Clocks() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c95fb49a7bdc4618, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMpcData {
  LiveMpcData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92a5e332a85f32a0, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveLongitudinalMpcData {
  LiveLongitudinalMpcData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7e17c434f865ae2, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ECEFPointDEPRECATED {
  ECEFPointDEPRECATED() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e10e21168db0c7f7, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ECEFPoint {
  ECEFPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c25bbbd524983447, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSPlannerPoints {
  GPSPlannerPoints() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab54c59699f8f9f3, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GPSPlannerPlan {
  GPSPlannerPlan() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5ad1d90cdc1dd6b, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficEvent {
  TrafficEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_d85d75253435bf4b Type;

  typedef ::capnp::schemas::Action_a6f6ce72165ccb49 Action;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acfa74a094e62626, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbslamCorrection {
  OrbslamCorrection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8afd33dc9b35e1aa, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbObservation {
  OrbObservation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b326d4e436afec7, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UiNavigationEvent {
  UiNavigationEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e8db07dcf8fcea05 Type;

  typedef ::capnp::schemas::Status_b9aa88c75ef99a1f Status;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90c8426c3eaddd3b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UiLayoutState {
  UiLayoutState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::App_9917470acf94d285 App;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88dcce08ad29dda0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Joystick {
  Joystick() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e42401658e2715e2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbOdometry {
  OrbOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7700859ed1f5b76, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbFeatures {
  OrbFeatures() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd60164a8a0159ef, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbFeaturesSummary {
  OrbFeaturesSummary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d500d30c5803fa4f, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrbKeyFrame {
  OrbKeyFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8233c0345e27e24, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverState {
  DriverState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b83c6cc593ed0a00, 4, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DMonitoringState {
  DMonitoringState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b83cda094a1da284, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Boot {
  Boot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a12e8670927a2549, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveParametersData {
  LiveParametersData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9058dcb967c2753, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LiveMapData {
  LiveMapData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9854f620f0d3b9cc, 5, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraOdometry {
  CameraOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa9a296b9fd41a96, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct KalmanOdometry {
  KalmanOdometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92e21bb7ea38793a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INIT_DATA,
    FRAME,
    GPS_N_M_E_A,
    SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D,
    CAN,
    THERMAL,
    CONTROLS_STATE,
    LIVE_EVENT_D_E_P_R_E_C_A_T_E_D,
    MODEL,
    FEATURES,
    SENSOR_EVENTS,
    HEALTH,
    RADAR_STATE,
    LIVE_U_I_D_E_P_R_E_C_A_T_E_D,
    ENCODE_IDX,
    LIVE_TRACKS,
    SENDCAN,
    LOG_MESSAGE,
    LIVE_CALIBRATION,
    ANDROID_LOG_ENTRY,
    GPS_LOCATION,
    CAR_STATE,
    CAR_CONTROL,
    PLAN,
    LIVE_LOCATION,
    ETHERNET_DATA,
    NAV_UPDATE,
    CELL_INFO,
    WIFI_SCAN,
    ANDROID_GNSS,
    QCOM_GNSS,
    LIDAR_PTS,
    PROC_LOG,
    UBLOX_GNSS,
    CLOCKS,
    LIVE_MPC,
    LIVE_LONGITUDINAL_MPC,
    NAV_STATUS,
    UBLOX_RAW,
    GPS_PLANNER_POINTS,
    GPS_PLANNER_PLAN,
    APPLANIX_RAW,
    TRAFFIC_EVENTS,
    LIVE_LOCATION_TIMING,
    ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D,
    LIVE_LOCATION_CORRECTED,
    ORB_OBSERVATION,
    GPS_LOCATION_EXTERNAL,
    LOCATION,
    UI_NAVIGATION_EVENT,
    LIVE_LOCATION_KALMAN,
    TEST_JOYSTICK,
    ORB_ODOMETRY,
    ORB_FEATURES,
    APPLANIX_LOCATION,
    ORB_KEY_FRAME,
    UI_LAYOUT_STATE,
    ORB_FEATURES_SUMMARY,
    DRIVER_STATE,
    BOOT,
    LIVE_PARAMETERS,
    LIVE_MAP_DATA,
    CAMERA_ODOMETRY,
    PATH_PLAN,
    KALMAN_ODOMETRY,
    THUMBNAIL,
    CAR_EVENTS,
    CAR_PARAMS,
    FRONT_FRAME,
    D_MONITORING_STATE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d314cfd957229c11, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Reader value);
  inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline  ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<Value> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline  ::capnp::BuilderFor<Key> getKey();
  inline void setKey( ::capnp::ReaderFor<Key> value);
  inline  ::capnp::BuilderFor<Key> initKey();
  inline  ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline  ::capnp::BuilderFor<Value> getValue();
  inline void setValue( ::capnp::ReaderFor<Value> value);
  inline  ::capnp::BuilderFor<Value> initValue();
  inline  ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Key> getKey();
  inline  ::capnp::PipelineFor<Value> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::Reader {
public:
  typedef InitData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getKernelArgs() const;

  inline bool hasGctx() const;
  inline  ::capnp::Text::Reader getGctx() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline  ::cereal::InitData::DeviceType getDeviceType() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasAndroidBuildInfo() const;
  inline  ::cereal::InitData::AndroidBuildInfo::Reader getAndroidBuildInfo() const;

  inline bool hasAndroidSensors() const;
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Reader getAndroidSensors() const;

  inline bool hasChffrAndroidExtra() const;
  inline  ::cereal::InitData::ChffrAndroidExtra::Reader getChffrAndroidExtra() const;

  inline bool hasPandaInfo() const;
  inline  ::cereal::InitData::PandaInfo::Reader getPandaInfo() const;

  inline bool getDirty() const;

  inline bool hasGitCommit() const;
  inline  ::capnp::Text::Reader getGitCommit() const;

  inline bool hasGitBranch() const;
  inline  ::capnp::Text::Reader getGitBranch() const;

  inline bool getPassive() const;

  inline bool hasGitRemote() const;
  inline  ::capnp::Text::Reader getGitRemote() const;

  inline bool hasIosBuildInfo() const;
  inline  ::cereal::InitData::IosBuildInfo::Reader getIosBuildInfo() const;

  inline bool hasKernelVersion() const;
  inline  ::capnp::Text::Reader getKernelVersion() const;

  inline bool hasAndroidProperties() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAndroidProperties() const;

  inline bool hasParams() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::Builder {
public:
  typedef InitData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKernelArgs();
  inline  ::capnp::List< ::capnp::Text>::Builder getKernelArgs();
  inline void setKernelArgs( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initKernelArgs(unsigned int size);
  inline void adoptKernelArgs(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownKernelArgs();

  inline bool hasGctx();
  inline  ::capnp::Text::Builder getGctx();
  inline void setGctx( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGctx(unsigned int size);
  inline void adoptGctx(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGctx();

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline  ::cereal::InitData::DeviceType getDeviceType();
  inline void setDeviceType( ::cereal::InitData::DeviceType value);

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasAndroidBuildInfo();
  inline  ::cereal::InitData::AndroidBuildInfo::Builder getAndroidBuildInfo();
  inline void setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value);
  inline  ::cereal::InitData::AndroidBuildInfo::Builder initAndroidBuildInfo();
  inline void adoptAndroidBuildInfo(::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> disownAndroidBuildInfo();

  inline bool hasAndroidSensors();
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Builder getAndroidSensors();
  inline void setAndroidSensors( ::capnp::List< ::cereal::InitData::AndroidSensor>::Reader value);
  inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Builder initAndroidSensors(unsigned int size);
  inline void adoptAndroidSensors(::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor>> disownAndroidSensors();

  inline bool hasChffrAndroidExtra();
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder getChffrAndroidExtra();
  inline void setChffrAndroidExtra( ::cereal::InitData::ChffrAndroidExtra::Reader value);
  inline  ::cereal::InitData::ChffrAndroidExtra::Builder initChffrAndroidExtra();
  inline void adoptChffrAndroidExtra(::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> disownChffrAndroidExtra();

  inline bool hasPandaInfo();
  inline  ::cereal::InitData::PandaInfo::Builder getPandaInfo();
  inline void setPandaInfo( ::cereal::InitData::PandaInfo::Reader value);
  inline  ::cereal::InitData::PandaInfo::Builder initPandaInfo();
  inline void adoptPandaInfo(::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> disownPandaInfo();

  inline bool getDirty();
  inline void setDirty(bool value);

  inline bool hasGitCommit();
  inline  ::capnp::Text::Builder getGitCommit();
  inline void setGitCommit( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitCommit(unsigned int size);
  inline void adoptGitCommit(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitCommit();

  inline bool hasGitBranch();
  inline  ::capnp::Text::Builder getGitBranch();
  inline void setGitBranch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitBranch(unsigned int size);
  inline void adoptGitBranch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitBranch();

  inline bool getPassive();
  inline void setPassive(bool value);

  inline bool hasGitRemote();
  inline  ::capnp::Text::Builder getGitRemote();
  inline void setGitRemote( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGitRemote(unsigned int size);
  inline void adoptGitRemote(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGitRemote();

  inline bool hasIosBuildInfo();
  inline  ::cereal::InitData::IosBuildInfo::Builder getIosBuildInfo();
  inline void setIosBuildInfo( ::cereal::InitData::IosBuildInfo::Reader value);
  inline  ::cereal::InitData::IosBuildInfo::Builder initIosBuildInfo();
  inline void adoptIosBuildInfo(::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value);
  inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> disownIosBuildInfo();

  inline bool hasKernelVersion();
  inline  ::capnp::Text::Builder getKernelVersion();
  inline void setKernelVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKernelVersion(unsigned int size);
  inline void adoptKernelVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKernelVersion();

  inline bool hasAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAndroidProperties();
  inline void setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAndroidProperties();
  inline void adoptAndroidProperties(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAndroidProperties();

  inline bool hasParams();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getParams();
  inline void setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::Pipeline {
public:
  typedef InitData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::InitData::AndroidBuildInfo::Pipeline getAndroidBuildInfo();
  inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline getChffrAndroidExtra();
  inline  ::cereal::InitData::PandaInfo::Pipeline getPandaInfo();
  inline  ::cereal::InitData::IosBuildInfo::Pipeline getIosBuildInfo();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAndroidProperties();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidBuildInfo::Reader {
public:
  typedef AndroidBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBoard() const;
  inline  ::capnp::Text::Reader getBoard() const;

  inline bool hasBootloader() const;
  inline  ::capnp::Text::Reader getBootloader() const;

  inline bool hasBrand() const;
  inline  ::capnp::Text::Reader getBrand() const;

  inline bool hasDevice() const;
  inline  ::capnp::Text::Reader getDevice() const;

  inline bool hasDisplay() const;
  inline  ::capnp::Text::Reader getDisplay() const;

  inline bool hasFingerprint() const;
  inline  ::capnp::Text::Reader getFingerprint() const;

  inline bool hasHardware() const;
  inline  ::capnp::Text::Reader getHardware() const;

  inline bool hasHost() const;
  inline  ::capnp::Text::Reader getHost() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasManufacturer() const;
  inline  ::capnp::Text::Reader getManufacturer() const;

  inline bool hasModel() const;
  inline  ::capnp::Text::Reader getModel() const;

  inline bool hasProduct() const;
  inline  ::capnp::Text::Reader getProduct() const;

  inline bool hasRadioVersion() const;
  inline  ::capnp::Text::Reader getRadioVersion() const;

  inline bool hasSerial() const;
  inline  ::capnp::Text::Reader getSerial() const;

  inline bool hasSupportedAbis() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getSupportedAbis() const;

  inline bool hasTags() const;
  inline  ::capnp::Text::Reader getTags() const;

  inline  ::int64_t getTime() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasVersionCodename() const;
  inline  ::capnp::Text::Reader getVersionCodename() const;

  inline bool hasVersionRelease() const;
  inline  ::capnp::Text::Reader getVersionRelease() const;

  inline  ::int32_t getVersionSdk() const;

  inline bool hasVersionSecurityPatch() const;
  inline  ::capnp::Text::Reader getVersionSecurityPatch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidBuildInfo::Builder {
public:
  typedef AndroidBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBoard();
  inline  ::capnp::Text::Builder getBoard();
  inline void setBoard( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBoard(unsigned int size);
  inline void adoptBoard(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBoard();

  inline bool hasBootloader();
  inline  ::capnp::Text::Builder getBootloader();
  inline void setBootloader( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBootloader(unsigned int size);
  inline void adoptBootloader(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBootloader();

  inline bool hasBrand();
  inline  ::capnp::Text::Builder getBrand();
  inline void setBrand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBrand(unsigned int size);
  inline void adoptBrand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBrand();

  inline bool hasDevice();
  inline  ::capnp::Text::Builder getDevice();
  inline void setDevice( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDevice(unsigned int size);
  inline void adoptDevice(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDevice();

  inline bool hasDisplay();
  inline  ::capnp::Text::Builder getDisplay();
  inline void setDisplay( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisplay(unsigned int size);
  inline void adoptDisplay(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisplay();

  inline bool hasFingerprint();
  inline  ::capnp::Text::Builder getFingerprint();
  inline void setFingerprint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFingerprint(unsigned int size);
  inline void adoptFingerprint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFingerprint();

  inline bool hasHardware();
  inline  ::capnp::Text::Builder getHardware();
  inline void setHardware( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHardware(unsigned int size);
  inline void adoptHardware(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHardware();

  inline bool hasHost();
  inline  ::capnp::Text::Builder getHost();
  inline void setHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHost();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasManufacturer();
  inline  ::capnp::Text::Builder getManufacturer();
  inline void setManufacturer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManufacturer(unsigned int size);
  inline void adoptManufacturer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManufacturer();

  inline bool hasModel();
  inline  ::capnp::Text::Builder getModel();
  inline void setModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModel(unsigned int size);
  inline void adoptModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModel();

  inline bool hasProduct();
  inline  ::capnp::Text::Builder getProduct();
  inline void setProduct( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProduct(unsigned int size);
  inline void adoptProduct(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProduct();

  inline bool hasRadioVersion();
  inline  ::capnp::Text::Builder getRadioVersion();
  inline void setRadioVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRadioVersion(unsigned int size);
  inline void adoptRadioVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRadioVersion();

  inline bool hasSerial();
  inline  ::capnp::Text::Builder getSerial();
  inline void setSerial( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSerial(unsigned int size);
  inline void adoptSerial(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSerial();

  inline bool hasSupportedAbis();
  inline  ::capnp::List< ::capnp::Text>::Builder getSupportedAbis();
  inline void setSupportedAbis( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initSupportedAbis(unsigned int size);
  inline void adoptSupportedAbis(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownSupportedAbis();

  inline bool hasTags();
  inline  ::capnp::Text::Builder getTags();
  inline void setTags( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTags();

  inline  ::int64_t getTime();
  inline void setTime( ::int64_t value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasVersionCodename();
  inline  ::capnp::Text::Builder getVersionCodename();
  inline void setVersionCodename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionCodename(unsigned int size);
  inline void adoptVersionCodename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionCodename();

  inline bool hasVersionRelease();
  inline  ::capnp::Text::Builder getVersionRelease();
  inline void setVersionRelease( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionRelease(unsigned int size);
  inline void adoptVersionRelease(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionRelease();

  inline  ::int32_t getVersionSdk();
  inline void setVersionSdk( ::int32_t value);

  inline bool hasVersionSecurityPatch();
  inline  ::capnp::Text::Builder getVersionSecurityPatch();
  inline void setVersionSecurityPatch( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersionSecurityPatch(unsigned int size);
  inline void adoptVersionSecurityPatch(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersionSecurityPatch();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidBuildInfo::Pipeline {
public:
  typedef AndroidBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::AndroidSensor::Reader {
public:
  typedef AndroidSensor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasVendor() const;
  inline  ::capnp::Text::Reader getVendor() const;

  inline  ::int32_t getVersion() const;

  inline  ::int32_t getHandle() const;

  inline  ::int32_t getType() const;

  inline float getMaxRange() const;

  inline float getResolution() const;

  inline float getPower() const;

  inline  ::int32_t getMinDelay() const;

  inline  ::uint32_t getFifoReservedEventCount() const;

  inline  ::uint32_t getFifoMaxEventCount() const;

  inline bool hasStringType() const;
  inline  ::capnp::Text::Reader getStringType() const;

  inline  ::int32_t getMaxDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::AndroidSensor::Builder {
public:
  typedef AndroidSensor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasVendor();
  inline  ::capnp::Text::Builder getVendor();
  inline void setVendor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVendor(unsigned int size);
  inline void adoptVendor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVendor();

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getHandle();
  inline void setHandle( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline float getMaxRange();
  inline void setMaxRange(float value);

  inline float getResolution();
  inline void setResolution(float value);

  inline float getPower();
  inline void setPower(float value);

  inline  ::int32_t getMinDelay();
  inline void setMinDelay( ::int32_t value);

  inline  ::uint32_t getFifoReservedEventCount();
  inline void setFifoReservedEventCount( ::uint32_t value);

  inline  ::uint32_t getFifoMaxEventCount();
  inline void setFifoMaxEventCount( ::uint32_t value);

  inline bool hasStringType();
  inline  ::capnp::Text::Builder getStringType();
  inline void setStringType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStringType(unsigned int size);
  inline void adoptStringType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStringType();

  inline  ::int32_t getMaxDelay();
  inline void setMaxDelay( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::AndroidSensor::Pipeline {
public:
  typedef AndroidSensor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::ChffrAndroidExtra::Reader {
public:
  typedef ChffrAndroidExtra Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics() const;
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader getAllCameraCharacteristics() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::ChffrAndroidExtra::Builder {
public:
  typedef ChffrAndroidExtra Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAllCameraCharacteristics();
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder getAllCameraCharacteristics();
  inline void setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value);
  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder initAllCameraCharacteristics();
  inline void adoptAllCameraCharacteristics(::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> disownAllCameraCharacteristics();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::ChffrAndroidExtra::Pipeline {
public:
  typedef ChffrAndroidExtra Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline getAllCameraCharacteristics();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::IosBuildInfo::Reader {
public:
  typedef IosBuildInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion() const;
  inline  ::capnp::Text::Reader getAppVersion() const;

  inline  ::uint32_t getAppBuild() const;

  inline bool hasOsVersion() const;
  inline  ::capnp::Text::Reader getOsVersion() const;

  inline bool hasDeviceModel() const;
  inline  ::capnp::Text::Reader getDeviceModel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::IosBuildInfo::Builder {
public:
  typedef IosBuildInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppVersion();
  inline  ::capnp::Text::Builder getAppVersion();
  inline void setAppVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppVersion(unsigned int size);
  inline void adoptAppVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppVersion();

  inline  ::uint32_t getAppBuild();
  inline void setAppBuild( ::uint32_t value);

  inline bool hasOsVersion();
  inline  ::capnp::Text::Builder getOsVersion();
  inline void setOsVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOsVersion(unsigned int size);
  inline void adoptOsVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOsVersion();

  inline bool hasDeviceModel();
  inline  ::capnp::Text::Builder getDeviceModel();
  inline void setDeviceModel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDeviceModel(unsigned int size);
  inline void adoptDeviceModel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDeviceModel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::IosBuildInfo::Pipeline {
public:
  typedef IosBuildInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitData::PandaInfo::Reader {
public:
  typedef PandaInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHasPanda() const;

  inline bool hasDongleId() const;
  inline  ::capnp::Text::Reader getDongleId() const;

  inline bool hasStVersion() const;
  inline  ::capnp::Text::Reader getStVersion() const;

  inline bool hasEspVersion() const;
  inline  ::capnp::Text::Reader getEspVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitData::PandaInfo::Builder {
public:
  typedef PandaInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHasPanda();
  inline void setHasPanda(bool value);

  inline bool hasDongleId();
  inline  ::capnp::Text::Builder getDongleId();
  inline void setDongleId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDongleId(unsigned int size);
  inline void adoptDongleId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDongleId();

  inline bool hasStVersion();
  inline  ::capnp::Text::Builder getStVersion();
  inline void setStVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStVersion(unsigned int size);
  inline void adoptStVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStVersion();

  inline bool hasEspVersion();
  inline  ::capnp::Text::Builder getEspVersion();
  inline void setEspVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEspVersion(unsigned int size);
  inline void adoptEspVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEspVersion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitData::PandaInfo::Pipeline {
public:
  typedef PandaInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::Reader {
public:
  typedef FrameData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline  ::int32_t getFrameLength() const;

  inline  ::int32_t getIntegLines() const;

  inline  ::int32_t getGlobalGain() const;

  inline bool hasImage() const;
  inline  ::capnp::Data::Reader getImage() const;

  inline  ::cereal::FrameData::FrameType getFrameType() const;

  inline  ::uint64_t getTimestampSof() const;

  inline bool hasAndroidCaptureResult() const;
  inline  ::cereal::FrameData::AndroidCaptureResult::Reader getAndroidCaptureResult() const;

  inline bool hasTransform() const;
  inline  ::capnp::List<float>::Reader getTransform() const;

  inline  ::int32_t getLensPos() const;

  inline float getLensSag() const;

  inline float getLensErr() const;

  inline float getLensTruePos() const;

  inline float getGainFrac() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::Builder {
public:
  typedef FrameData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::int32_t getFrameLength();
  inline void setFrameLength( ::int32_t value);

  inline  ::int32_t getIntegLines();
  inline void setIntegLines( ::int32_t value);

  inline  ::int32_t getGlobalGain();
  inline void setGlobalGain( ::int32_t value);

  inline bool hasImage();
  inline  ::capnp::Data::Builder getImage();
  inline void setImage( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownImage();

  inline  ::cereal::FrameData::FrameType getFrameType();
  inline void setFrameType( ::cereal::FrameData::FrameType value);

  inline  ::uint64_t getTimestampSof();
  inline void setTimestampSof( ::uint64_t value);

  inline bool hasAndroidCaptureResult();
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder getAndroidCaptureResult();
  inline void setAndroidCaptureResult( ::cereal::FrameData::AndroidCaptureResult::Reader value);
  inline  ::cereal::FrameData::AndroidCaptureResult::Builder initAndroidCaptureResult();
  inline void adoptAndroidCaptureResult(::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> disownAndroidCaptureResult();

  inline bool hasTransform();
  inline  ::capnp::List<float>::Builder getTransform();
  inline void setTransform( ::capnp::List<float>::Reader value);
  inline void setTransform(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTransform(unsigned int size);
  inline void adoptTransform(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTransform();

  inline  ::int32_t getLensPos();
  inline void setLensPos( ::int32_t value);

  inline float getLensSag();
  inline void setLensSag(float value);

  inline float getLensErr();
  inline void setLensErr(float value);

  inline float getLensTruePos();
  inline void setLensTruePos(float value);

  inline float getGainFrac();
  inline void setGainFrac(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::Pipeline {
public:
  typedef FrameData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline getAndroidCaptureResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameData::AndroidCaptureResult::Reader {
public:
  typedef AndroidCaptureResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity() const;

  inline  ::int64_t getFrameDuration() const;

  inline  ::int64_t getExposureTime() const;

  inline  ::uint64_t getRollingShutterSkew() const;

  inline bool hasColorCorrectionTransform() const;
  inline  ::capnp::List< ::int32_t>::Reader getColorCorrectionTransform() const;

  inline bool hasColorCorrectionGains() const;
  inline  ::capnp::List<float>::Reader getColorCorrectionGains() const;

  inline  ::int8_t getDisplayRotation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameData::AndroidCaptureResult::Builder {
public:
  typedef AndroidCaptureResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensitivity();
  inline void setSensitivity( ::int32_t value);

  inline  ::int64_t getFrameDuration();
  inline void setFrameDuration( ::int64_t value);

  inline  ::int64_t getExposureTime();
  inline void setExposureTime( ::int64_t value);

  inline  ::uint64_t getRollingShutterSkew();
  inline void setRollingShutterSkew( ::uint64_t value);

  inline bool hasColorCorrectionTransform();
  inline  ::capnp::List< ::int32_t>::Builder getColorCorrectionTransform();
  inline void setColorCorrectionTransform( ::capnp::List< ::int32_t>::Reader value);
  inline void setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initColorCorrectionTransform(unsigned int size);
  inline void adoptColorCorrectionTransform(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownColorCorrectionTransform();

  inline bool hasColorCorrectionGains();
  inline  ::capnp::List<float>::Builder getColorCorrectionGains();
  inline void setColorCorrectionGains( ::capnp::List<float>::Reader value);
  inline void setColorCorrectionGains(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initColorCorrectionGains(unsigned int size);
  inline void adoptColorCorrectionGains(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownColorCorrectionGains();

  inline  ::int8_t getDisplayRotation();
  inline void setDisplayRotation( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameData::AndroidCaptureResult::Pipeline {
public:
  typedef AndroidCaptureResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Thumbnail::Reader {
public:
  typedef Thumbnail Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasThumbnail() const;
  inline  ::capnp::Data::Reader getThumbnail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Thumbnail::Builder {
public:
  typedef Thumbnail Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasThumbnail();
  inline  ::capnp::Data::Builder getThumbnail();
  inline void setThumbnail( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initThumbnail(unsigned int size);
  inline void adoptThumbnail(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownThumbnail();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Thumbnail::Pipeline {
public:
  typedef Thumbnail Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSNMEAData::Reader {
public:
  typedef GPSNMEAData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp() const;

  inline  ::uint64_t getLocalWallTime() const;

  inline bool hasNmea() const;
  inline  ::capnp::Text::Reader getNmea() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSNMEAData::Builder {
public:
  typedef GPSNMEAData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::uint64_t getLocalWallTime();
  inline void setLocalWallTime( ::uint64_t value);

  inline bool hasNmea();
  inline  ::capnp::Text::Builder getNmea();
  inline void setNmea( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmea(unsigned int size);
  inline void adoptNmea(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmea();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSNMEAData::Pipeline {
public:
  typedef GPSNMEAData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::Reader {
public:
  typedef SensorEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int32_t getVersion() const;

  inline  ::int32_t getSensor() const;

  inline  ::int32_t getType() const;

  inline  ::int64_t getTimestamp() const;

  inline bool isAcceleration() const;
  inline bool hasAcceleration() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getAcceleration() const;

  inline bool isMagnetic() const;
  inline bool hasMagnetic() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagnetic() const;

  inline bool isOrientation() const;
  inline bool hasOrientation() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getOrientation() const;

  inline bool isGyro() const;
  inline bool hasGyro() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyro() const;

  inline  ::cereal::SensorEventData::SensorSource getSource() const;

  inline bool isPressure() const;
  inline bool hasPressure() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getPressure() const;

  inline bool getUncalibratedDEPRECATED() const;

  inline bool isMagneticUncalibrated() const;
  inline bool hasMagneticUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getMagneticUncalibrated() const;

  inline bool isGyroUncalibrated() const;
  inline bool hasGyroUncalibrated() const;
  inline  ::cereal::SensorEventData::SensorVec::Reader getGyroUncalibrated() const;

  inline bool isProximity() const;
  inline float getProximity() const;

  inline bool isLight() const;
  inline float getLight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::Builder {
public:
  typedef SensorEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::int32_t getSensor();
  inline void setSensor( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline bool isAcceleration();
  inline bool hasAcceleration();
  inline  ::cereal::SensorEventData::SensorVec::Builder getAcceleration();
  inline void setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownAcceleration();

  inline bool isMagnetic();
  inline bool hasMagnetic();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagnetic();
  inline void setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagnetic();
  inline void adoptMagnetic(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagnetic();

  inline bool isOrientation();
  inline bool hasOrientation();
  inline  ::cereal::SensorEventData::SensorVec::Builder getOrientation();
  inline void setOrientation( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownOrientation();

  inline bool isGyro();
  inline bool hasGyro();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyro();
  inline void setGyro( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyro();
  inline void adoptGyro(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyro();

  inline  ::cereal::SensorEventData::SensorSource getSource();
  inline void setSource( ::cereal::SensorEventData::SensorSource value);

  inline bool isPressure();
  inline bool hasPressure();
  inline  ::cereal::SensorEventData::SensorVec::Builder getPressure();
  inline void setPressure( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initPressure();
  inline void adoptPressure(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownPressure();

  inline bool getUncalibratedDEPRECATED();
  inline void setUncalibratedDEPRECATED(bool value);

  inline bool isMagneticUncalibrated();
  inline bool hasMagneticUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getMagneticUncalibrated();
  inline void setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initMagneticUncalibrated();
  inline void adoptMagneticUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownMagneticUncalibrated();

  inline bool isGyroUncalibrated();
  inline bool hasGyroUncalibrated();
  inline  ::cereal::SensorEventData::SensorVec::Builder getGyroUncalibrated();
  inline void setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value);
  inline  ::cereal::SensorEventData::SensorVec::Builder initGyroUncalibrated();
  inline void adoptGyroUncalibrated(::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> disownGyroUncalibrated();

  inline bool isProximity();
  inline float getProximity();
  inline void setProximity(float value);

  inline bool isLight();
  inline float getLight();
  inline void setLight(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::Pipeline {
public:
  typedef SensorEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorEventData::SensorVec::Reader {
public:
  typedef SensorVec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List<float>::Reader getV() const;

  inline  ::int8_t getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorEventData::SensorVec::Builder {
public:
  typedef SensorVec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List<float>::Builder getV();
  inline void setV( ::capnp::List<float>::Reader value);
  inline void setV(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownV();

  inline  ::int8_t getStatus();
  inline void setStatus( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorEventData::SensorVec::Pipeline {
public:
  typedef SensorVec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GpsLocationData::Reader {
public:
  typedef GpsLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags() const;

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getAltitude() const;

  inline float getSpeed() const;

  inline float getBearing() const;

  inline float getAccuracy() const;

  inline  ::int64_t getTimestamp() const;

  inline  ::cereal::GpsLocationData::SensorSource getSource() const;

  inline bool hasVNED() const;
  inline  ::capnp::List<float>::Reader getVNED() const;

  inline float getVerticalAccuracy() const;

  inline float getBearingAccuracy() const;

  inline float getSpeedAccuracy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GpsLocationData::Builder {
public:
  typedef GpsLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFlags();
  inline void setFlags( ::uint16_t value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getBearing();
  inline void setBearing(float value);

  inline float getAccuracy();
  inline void setAccuracy(float value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::cereal::GpsLocationData::SensorSource getSource();
  inline void setSource( ::cereal::GpsLocationData::SensorSource value);

  inline bool hasVNED();
  inline  ::capnp::List<float>::Builder getVNED();
  inline void setVNED( ::capnp::List<float>::Reader value);
  inline void setVNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initVNED(unsigned int size);
  inline void adoptVNED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownVNED();

  inline float getVerticalAccuracy();
  inline void setVerticalAccuracy(float value);

  inline float getBearingAccuracy();
  inline void setBearingAccuracy(float value);

  inline float getSpeedAccuracy();
  inline void setSpeedAccuracy(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GpsLocationData::Pipeline {
public:
  typedef GpsLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CanData::Reader {
public:
  typedef CanData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress() const;

  inline  ::uint16_t getBusTime() const;

  inline bool hasDat() const;
  inline  ::capnp::Data::Reader getDat() const;

  inline  ::uint8_t getSrc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CanData::Builder {
public:
  typedef CanData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getAddress();
  inline void setAddress( ::uint32_t value);

  inline  ::uint16_t getBusTime();
  inline void setBusTime( ::uint16_t value);

  inline bool hasDat();
  inline  ::capnp::Data::Builder getDat();
  inline void setDat( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDat(unsigned int size);
  inline void adoptDat(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDat();

  inline  ::uint8_t getSrc();
  inline void setSrc( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CanData::Pipeline {
public:
  typedef CanData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThermalData::Reader {
public:
  typedef ThermalData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0() const;

  inline  ::uint16_t getCpu1() const;

  inline  ::uint16_t getCpu2() const;

  inline  ::uint16_t getCpu3() const;

  inline  ::uint16_t getMem() const;

  inline  ::uint16_t getGpu() const;

  inline  ::uint32_t getBat() const;

  inline float getFreeSpace() const;

  inline  ::int16_t getBatteryPercent() const;

  inline bool hasBatteryStatus() const;
  inline  ::capnp::Text::Reader getBatteryStatus() const;

  inline  ::uint16_t getFanSpeed() const;

  inline bool getStarted() const;

  inline bool getUsbOnline() const;

  inline  ::uint64_t getStartedTs() const;

  inline  ::cereal::ThermalData::ThermalStatus getThermalStatus() const;

  inline  ::int32_t getBatteryCurrent() const;

  inline  ::int32_t getBatteryVoltage() const;

  inline bool getChargingError() const;

  inline bool getChargingDisabled() const;

  inline  ::int8_t getMemUsedPercent() const;

  inline  ::int8_t getCpuPerc() const;

  inline  ::uint16_t getPa0() const;

  inline  ::cereal::ThermalData::NetworkType getNetworkType() const;

  inline  ::uint32_t getOffroadPowerUsage() const;

  inline bool hasIpAddr() const;
  inline  ::capnp::Text::Reader getIpAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThermalData::Builder {
public:
  typedef ThermalData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCpu0();
  inline void setCpu0( ::uint16_t value);

  inline  ::uint16_t getCpu1();
  inline void setCpu1( ::uint16_t value);

  inline  ::uint16_t getCpu2();
  inline void setCpu2( ::uint16_t value);

  inline  ::uint16_t getCpu3();
  inline void setCpu3( ::uint16_t value);

  inline  ::uint16_t getMem();
  inline void setMem( ::uint16_t value);

  inline  ::uint16_t getGpu();
  inline void setGpu( ::uint16_t value);

  inline  ::uint32_t getBat();
  inline void setBat( ::uint32_t value);

  inline float getFreeSpace();
  inline void setFreeSpace(float value);

  inline  ::int16_t getBatteryPercent();
  inline void setBatteryPercent( ::int16_t value);

  inline bool hasBatteryStatus();
  inline  ::capnp::Text::Builder getBatteryStatus();
  inline void setBatteryStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBatteryStatus(unsigned int size);
  inline void adoptBatteryStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBatteryStatus();

  inline  ::uint16_t getFanSpeed();
  inline void setFanSpeed( ::uint16_t value);

  inline bool getStarted();
  inline void setStarted(bool value);

  inline bool getUsbOnline();
  inline void setUsbOnline(bool value);

  inline  ::uint64_t getStartedTs();
  inline void setStartedTs( ::uint64_t value);

  inline  ::cereal::ThermalData::ThermalStatus getThermalStatus();
  inline void setThermalStatus( ::cereal::ThermalData::ThermalStatus value);

  inline  ::int32_t getBatteryCurrent();
  inline void setBatteryCurrent( ::int32_t value);

  inline  ::int32_t getBatteryVoltage();
  inline void setBatteryVoltage( ::int32_t value);

  inline bool getChargingError();
  inline void setChargingError(bool value);

  inline bool getChargingDisabled();
  inline void setChargingDisabled(bool value);

  inline  ::int8_t getMemUsedPercent();
  inline void setMemUsedPercent( ::int8_t value);

  inline  ::int8_t getCpuPerc();
  inline void setCpuPerc( ::int8_t value);

  inline  ::uint16_t getPa0();
  inline void setPa0( ::uint16_t value);

  inline  ::cereal::ThermalData::NetworkType getNetworkType();
  inline void setNetworkType( ::cereal::ThermalData::NetworkType value);

  inline  ::uint32_t getOffroadPowerUsage();
  inline void setOffroadPowerUsage( ::uint32_t value);

  inline bool hasIpAddr();
  inline  ::capnp::Text::Builder getIpAddr();
  inline void setIpAddr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIpAddr(unsigned int size);
  inline void adoptIpAddr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIpAddr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThermalData::Pipeline {
public:
  typedef ThermalData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HealthData::Reader {
public:
  typedef HealthData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage() const;

  inline  ::uint32_t getCurrent() const;

  inline bool getIgnitionLine() const;

  inline bool getControlsAllowed() const;

  inline bool getGasInterceptorDetected() const;

  inline bool getStartedSignalDetectedDeprecated() const;

  inline bool getHasGps() const;

  inline  ::uint32_t getCanSendErrs() const;

  inline  ::uint32_t getCanFwdErrs() const;

  inline  ::uint32_t getGmlanSendErrs() const;

  inline  ::cereal::HealthData::HwType getHwType() const;

  inline  ::uint16_t getFanSpeedRpm() const;

  inline  ::cereal::HealthData::UsbPowerMode getUsbPowerMode() const;

  inline bool getIgnitionCan() const;

  inline  ::cereal::CarParams::SafetyModel getSafetyModel() const;

  inline  ::cereal::HealthData::FaultStatus getFaultStatus() const;

  inline bool getPowerSaveEnabled() const;

  inline  ::uint32_t getUptime() const;

  inline bool hasFaults() const;
  inline  ::capnp::List< ::cereal::HealthData::FaultType>::Reader getFaults() const;

  inline  ::uint32_t getCanRxErrs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HealthData::Builder {
public:
  typedef HealthData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVoltage();
  inline void setVoltage( ::uint32_t value);

  inline  ::uint32_t getCurrent();
  inline void setCurrent( ::uint32_t value);

  inline bool getIgnitionLine();
  inline void setIgnitionLine(bool value);

  inline bool getControlsAllowed();
  inline void setControlsAllowed(bool value);

  inline bool getGasInterceptorDetected();
  inline void setGasInterceptorDetected(bool value);

  inline bool getStartedSignalDetectedDeprecated();
  inline void setStartedSignalDetectedDeprecated(bool value);

  inline bool getHasGps();
  inline void setHasGps(bool value);

  inline  ::uint32_t getCanSendErrs();
  inline void setCanSendErrs( ::uint32_t value);

  inline  ::uint32_t getCanFwdErrs();
  inline void setCanFwdErrs( ::uint32_t value);

  inline  ::uint32_t getGmlanSendErrs();
  inline void setGmlanSendErrs( ::uint32_t value);

  inline  ::cereal::HealthData::HwType getHwType();
  inline void setHwType( ::cereal::HealthData::HwType value);

  inline  ::uint16_t getFanSpeedRpm();
  inline void setFanSpeedRpm( ::uint16_t value);

  inline  ::cereal::HealthData::UsbPowerMode getUsbPowerMode();
  inline void setUsbPowerMode( ::cereal::HealthData::UsbPowerMode value);

  inline bool getIgnitionCan();
  inline void setIgnitionCan(bool value);

  inline  ::cereal::CarParams::SafetyModel getSafetyModel();
  inline void setSafetyModel( ::cereal::CarParams::SafetyModel value);

  inline  ::cereal::HealthData::FaultStatus getFaultStatus();
  inline void setFaultStatus( ::cereal::HealthData::FaultStatus value);

  inline bool getPowerSaveEnabled();
  inline void setPowerSaveEnabled(bool value);

  inline  ::uint32_t getUptime();
  inline void setUptime( ::uint32_t value);

  inline bool hasFaults();
  inline  ::capnp::List< ::cereal::HealthData::FaultType>::Builder getFaults();
  inline void setFaults( ::capnp::List< ::cereal::HealthData::FaultType>::Reader value);
  inline void setFaults(::kj::ArrayPtr<const  ::cereal::HealthData::FaultType> value);
  inline  ::capnp::List< ::cereal::HealthData::FaultType>::Builder initFaults(unsigned int size);
  inline void adoptFaults(::capnp::Orphan< ::capnp::List< ::cereal::HealthData::FaultType>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::HealthData::FaultType>> disownFaults();

  inline  ::uint32_t getCanRxErrs();
  inline void setCanRxErrs( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HealthData::Pipeline {
public:
  typedef HealthData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveUI::Reader {
public:
  typedef LiveUI Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveUI::Builder {
public:
  typedef LiveUI Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getRearViewCam();
  inline void setRearViewCam(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveUI::Pipeline {
public:
  typedef LiveUI Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::Reader {
public:
  typedef RadarState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED() const;
  inline  ::capnp::List<float>::Reader getWarpMatrixDEPRECATED() const;

  inline float getAngleOffsetDEPRECATED() const;

  inline  ::int8_t getCalStatusDEPRECATED() const;

  inline bool hasLeadOne() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadOne() const;

  inline bool hasLeadTwo() const;
  inline  ::cereal::RadarState::LeadData::Reader getLeadTwo() const;

  inline float getCumLagMs() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline  ::uint64_t getFtMonoTimeDEPRECATED() const;

  inline  ::int32_t getCalCycleDEPRECATED() const;

  inline  ::int8_t getCalPercDEPRECATED() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

  inline  ::uint64_t getControlsStateMonoTime() const;

  inline bool hasRadarErrors() const;
  inline  ::capnp::List< ::cereal::RadarData::Error>::Reader getRadarErrors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::Builder {
public:
  typedef RadarState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrixDEPRECATED();
  inline  ::capnp::List<float>::Builder getWarpMatrixDEPRECATED();
  inline void setWarpMatrixDEPRECATED( ::capnp::List<float>::Reader value);
  inline void setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrixDEPRECATED(unsigned int size);
  inline void adoptWarpMatrixDEPRECATED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrixDEPRECATED();

  inline float getAngleOffsetDEPRECATED();
  inline void setAngleOffsetDEPRECATED(float value);

  inline  ::int8_t getCalStatusDEPRECATED();
  inline void setCalStatusDEPRECATED( ::int8_t value);

  inline bool hasLeadOne();
  inline  ::cereal::RadarState::LeadData::Builder getLeadOne();
  inline void setLeadOne( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadOne();
  inline void adoptLeadOne(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadOne();

  inline bool hasLeadTwo();
  inline  ::cereal::RadarState::LeadData::Builder getLeadTwo();
  inline void setLeadTwo( ::cereal::RadarState::LeadData::Reader value);
  inline  ::cereal::RadarState::LeadData::Builder initLeadTwo();
  inline void adoptLeadTwo(::capnp::Orphan< ::cereal::RadarState::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState::LeadData> disownLeadTwo();

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline  ::uint64_t getFtMonoTimeDEPRECATED();
  inline void setFtMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::int32_t getCalCycleDEPRECATED();
  inline void setCalCycleDEPRECATED( ::int32_t value);

  inline  ::int8_t getCalPercDEPRECATED();
  inline void setCalPercDEPRECATED( ::int8_t value);

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

  inline  ::uint64_t getControlsStateMonoTime();
  inline void setControlsStateMonoTime( ::uint64_t value);

  inline bool hasRadarErrors();
  inline  ::capnp::List< ::cereal::RadarData::Error>::Builder getRadarErrors();
  inline void setRadarErrors( ::capnp::List< ::cereal::RadarData::Error>::Reader value);
  inline void setRadarErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value);
  inline  ::capnp::List< ::cereal::RadarData::Error>::Builder initRadarErrors(unsigned int size);
  inline void adoptRadarErrors(::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>> disownRadarErrors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::Pipeline {
public:
  typedef RadarState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::RadarState::LeadData::Pipeline getLeadOne();
  inline  ::cereal::RadarState::LeadData::Pipeline getLeadTwo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarState::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getVLead() const;

  inline float getALeadDEPRECATED() const;

  inline float getDPath() const;

  inline float getVLat() const;

  inline float getVLeadK() const;

  inline float getALeadK() const;

  inline bool getFcw() const;

  inline bool getStatus() const;

  inline float getALeadTau() const;

  inline float getModelProb() const;

  inline bool getRadar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarState::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getVLead();
  inline void setVLead(float value);

  inline float getALeadDEPRECATED();
  inline void setALeadDEPRECATED(float value);

  inline float getDPath();
  inline void setDPath(float value);

  inline float getVLat();
  inline void setVLat(float value);

  inline float getVLeadK();
  inline void setVLeadK(float value);

  inline float getALeadK();
  inline void setALeadK(float value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline bool getStatus();
  inline void setStatus(bool value);

  inline float getALeadTau();
  inline void setALeadTau(float value);

  inline float getModelProb();
  inline void setModelProb(float value);

  inline bool getRadar();
  inline void setRadar(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarState::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveCalibrationData::Reader {
public:
  typedef LiveCalibrationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrix() const;
  inline  ::capnp::List<float>::Reader getWarpMatrix() const;

  inline  ::int8_t getCalStatus() const;

  inline  ::int32_t getCalCycle() const;

  inline  ::int8_t getCalPerc() const;

  inline bool hasExtrinsicMatrix() const;
  inline  ::capnp::List<float>::Reader getExtrinsicMatrix() const;

  inline bool hasWarpMatrix2() const;
  inline  ::capnp::List<float>::Reader getWarpMatrix2() const;

  inline bool hasWarpMatrixBig() const;
  inline  ::capnp::List<float>::Reader getWarpMatrixBig() const;

  inline bool hasRpyCalib() const;
  inline  ::capnp::List<float>::Reader getRpyCalib() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveCalibrationData::Builder {
public:
  typedef LiveCalibrationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWarpMatrix();
  inline  ::capnp::List<float>::Builder getWarpMatrix();
  inline void setWarpMatrix( ::capnp::List<float>::Reader value);
  inline void setWarpMatrix(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrix(unsigned int size);
  inline void adoptWarpMatrix(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrix();

  inline  ::int8_t getCalStatus();
  inline void setCalStatus( ::int8_t value);

  inline  ::int32_t getCalCycle();
  inline void setCalCycle( ::int32_t value);

  inline  ::int8_t getCalPerc();
  inline void setCalPerc( ::int8_t value);

  inline bool hasExtrinsicMatrix();
  inline  ::capnp::List<float>::Builder getExtrinsicMatrix();
  inline void setExtrinsicMatrix( ::capnp::List<float>::Reader value);
  inline void setExtrinsicMatrix(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initExtrinsicMatrix(unsigned int size);
  inline void adoptExtrinsicMatrix(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownExtrinsicMatrix();

  inline bool hasWarpMatrix2();
  inline  ::capnp::List<float>::Builder getWarpMatrix2();
  inline void setWarpMatrix2( ::capnp::List<float>::Reader value);
  inline void setWarpMatrix2(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrix2(unsigned int size);
  inline void adoptWarpMatrix2(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrix2();

  inline bool hasWarpMatrixBig();
  inline  ::capnp::List<float>::Builder getWarpMatrixBig();
  inline void setWarpMatrixBig( ::capnp::List<float>::Reader value);
  inline void setWarpMatrixBig(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initWarpMatrixBig(unsigned int size);
  inline void adoptWarpMatrixBig(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownWarpMatrixBig();

  inline bool hasRpyCalib();
  inline  ::capnp::List<float>::Builder getRpyCalib();
  inline void setRpyCalib( ::capnp::List<float>::Reader value);
  inline void setRpyCalib(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRpyCalib(unsigned int size);
  inline void adoptRpyCalib(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRpyCalib();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveCalibrationData::Pipeline {
public:
  typedef LiveCalibrationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveTracks::Reader {
public:
  typedef LiveTracks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId() const;

  inline float getDRel() const;

  inline float getYRel() const;

  inline float getVRel() const;

  inline float getARel() const;

  inline float getTimeStamp() const;

  inline float getStatus() const;

  inline float getCurrentTime() const;

  inline bool getStationary() const;

  inline bool getOncoming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveTracks::Builder {
public:
  typedef LiveTracks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getDRel();
  inline void setDRel(float value);

  inline float getYRel();
  inline void setYRel(float value);

  inline float getVRel();
  inline void setVRel(float value);

  inline float getARel();
  inline void setARel(float value);

  inline float getTimeStamp();
  inline void setTimeStamp(float value);

  inline float getStatus();
  inline void setStatus(float value);

  inline float getCurrentTime();
  inline void setCurrentTime(float value);

  inline bool getStationary();
  inline void setStationary(bool value);

  inline bool getOncoming();
  inline void setOncoming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveTracks::Pipeline {
public:
  typedef LiveTracks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::Reader {
public:
  typedef ControlsState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVEgo() const;

  inline float getAEgoDEPRECATED() const;

  inline float getVPid() const;

  inline float getVTargetLead() const;

  inline float getUpAccelCmd() const;

  inline float getUiAccelCmd() const;

  inline float getYActualDEPRECATED() const;

  inline float getYDesDEPRECATED() const;

  inline float getUpSteerDEPRECATED() const;

  inline float getUiSteerDEPRECATED() const;

  inline float getATargetMinDEPRECATED() const;

  inline float getATargetMaxDEPRECATED() const;

  inline float getJerkFactor() const;

  inline float getAngleSteers() const;

  inline  ::int32_t getHudLeadDEPRECATED() const;

  inline float getCumLagMs() const;

  inline  ::uint64_t getCanMonoTimeDEPRECATED() const;

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED() const;

  inline  ::uint64_t getMdMonoTimeDEPRECATED() const;

  inline bool getEnabled() const;

  inline bool getSteerOverride() const;

  inline bool hasCanMonoTimes() const;
  inline  ::capnp::List< ::uint64_t>::Reader getCanMonoTimes() const;

  inline float getVCruise() const;

  inline bool getRearViewCam() const;

  inline bool hasAlertText1() const;
  inline  ::capnp::Text::Reader getAlertText1() const;

  inline bool hasAlertText2() const;
  inline  ::capnp::Text::Reader getAlertText2() const;

  inline float getAwarenessStatus() const;

  inline float getAngleModelBiasDEPRECATED() const;

  inline  ::uint64_t getPlanMonoTime() const;

  inline float getAngleSteersDes() const;

  inline  ::cereal::ControlsState::LongControlState getLongControlState() const;

  inline  ::cereal::ControlsState::OpenpilotState getState() const;

  inline float getVEgoRaw() const;

  inline float getUfAccelCmd() const;

  inline float getUfSteerDEPRECATED() const;

  inline float getATarget() const;

  inline bool getActive() const;

  inline float getCurvature() const;

  inline  ::cereal::ControlsState::AlertStatus getAlertStatus() const;

  inline  ::cereal::ControlsState::AlertSize getAlertSize() const;

  inline bool getGpsPlannerActive() const;

  inline bool getEngageable() const;

  inline float getAlertBlinkingRate() const;

  inline bool getDriverMonitoringOn() const;

  inline bool hasAlertType() const;
  inline  ::capnp::Text::Reader getAlertType() const;

  inline bool hasAlertSoundDEPRECATED() const;
  inline  ::capnp::Text::Reader getAlertSoundDEPRECATED() const;

  inline float getVCurvature() const;

  inline bool getDecelForTurn() const;

  inline  ::uint64_t getStartMonoTime() const;

  inline bool getMapValid() const;

  inline  ::uint64_t getPathPlanMonoTime() const;

  inline bool getForceDecel() const;

  inline typename LateralControlState::Reader getLateralControlState() const;

  inline bool getDecelForModel() const;

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound() const;

  inline  ::uint32_t getCanErrorCounter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::Builder {
public:
  typedef ControlsState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVEgo();
  inline void setVEgo(float value);

  inline float getAEgoDEPRECATED();
  inline void setAEgoDEPRECATED(float value);

  inline float getVPid();
  inline void setVPid(float value);

  inline float getVTargetLead();
  inline void setVTargetLead(float value);

  inline float getUpAccelCmd();
  inline void setUpAccelCmd(float value);

  inline float getUiAccelCmd();
  inline void setUiAccelCmd(float value);

  inline float getYActualDEPRECATED();
  inline void setYActualDEPRECATED(float value);

  inline float getYDesDEPRECATED();
  inline void setYDesDEPRECATED(float value);

  inline float getUpSteerDEPRECATED();
  inline void setUpSteerDEPRECATED(float value);

  inline float getUiSteerDEPRECATED();
  inline void setUiSteerDEPRECATED(float value);

  inline float getATargetMinDEPRECATED();
  inline void setATargetMinDEPRECATED(float value);

  inline float getATargetMaxDEPRECATED();
  inline void setATargetMaxDEPRECATED(float value);

  inline float getJerkFactor();
  inline void setJerkFactor(float value);

  inline float getAngleSteers();
  inline void setAngleSteers(float value);

  inline  ::int32_t getHudLeadDEPRECATED();
  inline void setHudLeadDEPRECATED( ::int32_t value);

  inline float getCumLagMs();
  inline void setCumLagMs(float value);

  inline  ::uint64_t getCanMonoTimeDEPRECATED();
  inline void setCanMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getRadarStateMonoTimeDEPRECATED();
  inline void setRadarStateMonoTimeDEPRECATED( ::uint64_t value);

  inline  ::uint64_t getMdMonoTimeDEPRECATED();
  inline void setMdMonoTimeDEPRECATED( ::uint64_t value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool getSteerOverride();
  inline void setSteerOverride(bool value);

  inline bool hasCanMonoTimes();
  inline  ::capnp::List< ::uint64_t>::Builder getCanMonoTimes();
  inline void setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value);
  inline void setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initCanMonoTimes(unsigned int size);
  inline void adoptCanMonoTimes(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownCanMonoTimes();

  inline float getVCruise();
  inline void setVCruise(float value);

  inline bool getRearViewCam();
  inline void setRearViewCam(bool value);

  inline bool hasAlertText1();
  inline  ::capnp::Text::Builder getAlertText1();
  inline void setAlertText1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText1(unsigned int size);
  inline void adoptAlertText1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText1();

  inline bool hasAlertText2();
  inline  ::capnp::Text::Builder getAlertText2();
  inline void setAlertText2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertText2(unsigned int size);
  inline void adoptAlertText2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertText2();

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

  inline float getAngleModelBiasDEPRECATED();
  inline void setAngleModelBiasDEPRECATED(float value);

  inline  ::uint64_t getPlanMonoTime();
  inline void setPlanMonoTime( ::uint64_t value);

  inline float getAngleSteersDes();
  inline void setAngleSteersDes(float value);

  inline  ::cereal::ControlsState::LongControlState getLongControlState();
  inline void setLongControlState( ::cereal::ControlsState::LongControlState value);

  inline  ::cereal::ControlsState::OpenpilotState getState();
  inline void setState( ::cereal::ControlsState::OpenpilotState value);

  inline float getVEgoRaw();
  inline void setVEgoRaw(float value);

  inline float getUfAccelCmd();
  inline void setUfAccelCmd(float value);

  inline float getUfSteerDEPRECATED();
  inline void setUfSteerDEPRECATED(float value);

  inline float getATarget();
  inline void setATarget(float value);

  inline bool getActive();
  inline void setActive(bool value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline  ::cereal::ControlsState::AlertStatus getAlertStatus();
  inline void setAlertStatus( ::cereal::ControlsState::AlertStatus value);

  inline  ::cereal::ControlsState::AlertSize getAlertSize();
  inline void setAlertSize( ::cereal::ControlsState::AlertSize value);

  inline bool getGpsPlannerActive();
  inline void setGpsPlannerActive(bool value);

  inline bool getEngageable();
  inline void setEngageable(bool value);

  inline float getAlertBlinkingRate();
  inline void setAlertBlinkingRate(float value);

  inline bool getDriverMonitoringOn();
  inline void setDriverMonitoringOn(bool value);

  inline bool hasAlertType();
  inline  ::capnp::Text::Builder getAlertType();
  inline void setAlertType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertType(unsigned int size);
  inline void adoptAlertType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertType();

  inline bool hasAlertSoundDEPRECATED();
  inline  ::capnp::Text::Builder getAlertSoundDEPRECATED();
  inline void setAlertSoundDEPRECATED( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertSoundDEPRECATED(unsigned int size);
  inline void adoptAlertSoundDEPRECATED(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertSoundDEPRECATED();

  inline float getVCurvature();
  inline void setVCurvature(float value);

  inline bool getDecelForTurn();
  inline void setDecelForTurn(bool value);

  inline  ::uint64_t getStartMonoTime();
  inline void setStartMonoTime( ::uint64_t value);

  inline bool getMapValid();
  inline void setMapValid(bool value);

  inline  ::uint64_t getPathPlanMonoTime();
  inline void setPathPlanMonoTime( ::uint64_t value);

  inline bool getForceDecel();
  inline void setForceDecel(bool value);

  inline typename LateralControlState::Builder getLateralControlState();
  inline typename LateralControlState::Builder initLateralControlState();

  inline bool getDecelForModel();
  inline void setDecelForModel(bool value);

  inline  ::cereal::CarControl::HUDControl::AudibleAlert getAlertSound();
  inline void setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value);

  inline  ::uint32_t getCanErrorCounter();
  inline void setCanErrorCounter( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::Pipeline {
public:
  typedef ControlsState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename LateralControlState::Pipeline getLateralControlState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralINDIState::Reader {
public:
  typedef LateralINDIState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteerAngle() const;

  inline float getSteerRate() const;

  inline float getSteerAccel() const;

  inline float getRateSetPoint() const;

  inline float getAccelSetPoint() const;

  inline float getAccelError() const;

  inline float getDelayedOutput() const;

  inline float getDelta() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralINDIState::Builder {
public:
  typedef LateralINDIState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteerAngle();
  inline void setSteerAngle(float value);

  inline float getSteerRate();
  inline void setSteerRate(float value);

  inline float getSteerAccel();
  inline void setSteerAccel(float value);

  inline float getRateSetPoint();
  inline void setRateSetPoint(float value);

  inline float getAccelSetPoint();
  inline void setAccelSetPoint(float value);

  inline float getAccelError();
  inline void setAccelError(float value);

  inline float getDelayedOutput();
  inline void setDelayedOutput(float value);

  inline float getDelta();
  inline void setDelta(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralINDIState::Pipeline {
public:
  typedef LateralINDIState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralPIDState::Reader {
public:
  typedef LateralPIDState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteerAngle() const;

  inline float getSteerRate() const;

  inline float getAngleError() const;

  inline float getP() const;

  inline float getI() const;

  inline float getF() const;

  inline float getOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralPIDState::Builder {
public:
  typedef LateralPIDState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteerAngle();
  inline void setSteerAngle(float value);

  inline float getSteerRate();
  inline void setSteerRate(float value);

  inline float getAngleError();
  inline void setAngleError(float value);

  inline float getP();
  inline void setP(float value);

  inline float getI();
  inline void setI(float value);

  inline float getF();
  inline void setF(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralPIDState::Pipeline {
public:
  typedef LateralPIDState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralLQRState::Reader {
public:
  typedef LateralLQRState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getActive() const;

  inline float getSteerAngle() const;

  inline float getI() const;

  inline float getOutput() const;

  inline float getLqrOutput() const;

  inline bool getSaturated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralLQRState::Builder {
public:
  typedef LateralLQRState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getActive();
  inline void setActive(bool value);

  inline float getSteerAngle();
  inline void setSteerAngle(float value);

  inline float getI();
  inline void setI(float value);

  inline float getOutput();
  inline void setOutput(float value);

  inline float getLqrOutput();
  inline void setLqrOutput(float value);

  inline bool getSaturated();
  inline void setSaturated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralLQRState::Pipeline {
public:
  typedef LateralLQRState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlsState::LateralControlState::Reader {
public:
  typedef LateralControlState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIndiState() const;
  inline bool hasIndiState() const;
  inline  ::cereal::ControlsState::LateralINDIState::Reader getIndiState() const;

  inline bool isPidState() const;
  inline bool hasPidState() const;
  inline  ::cereal::ControlsState::LateralPIDState::Reader getPidState() const;

  inline bool isLqrState() const;
  inline bool hasLqrState() const;
  inline  ::cereal::ControlsState::LateralLQRState::Reader getLqrState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlsState::LateralControlState::Builder {
public:
  typedef LateralControlState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIndiState();
  inline bool hasIndiState();
  inline  ::cereal::ControlsState::LateralINDIState::Builder getIndiState();
  inline void setIndiState( ::cereal::ControlsState::LateralINDIState::Reader value);
  inline  ::cereal::ControlsState::LateralINDIState::Builder initIndiState();
  inline void adoptIndiState(::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> disownIndiState();

  inline bool isPidState();
  inline bool hasPidState();
  inline  ::cereal::ControlsState::LateralPIDState::Builder getPidState();
  inline void setPidState( ::cereal::ControlsState::LateralPIDState::Reader value);
  inline  ::cereal::ControlsState::LateralPIDState::Builder initPidState();
  inline void adoptPidState(::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> disownPidState();

  inline bool isLqrState();
  inline bool hasLqrState();
  inline  ::cereal::ControlsState::LateralLQRState::Builder getLqrState();
  inline void setLqrState( ::cereal::ControlsState::LateralLQRState::Reader value);
  inline  ::cereal::ControlsState::LateralLQRState::Builder initLqrState();
  inline void adoptLqrState(::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> disownLqrState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlsState::LateralControlState::Pipeline {
public:
  typedef LateralControlState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveEventData::Reader {
public:
  typedef LiveEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int32_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveEventData::Builder {
public:
  typedef LiveEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int32_t getValue();
  inline void setValue( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveEventData::Pipeline {
public:
  typedef LiveEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::Reader {
public:
  typedef ModelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasPath() const;
  inline  ::cereal::ModelData::PathData::Reader getPath() const;

  inline bool hasLeftLane() const;
  inline  ::cereal::ModelData::PathData::Reader getLeftLane() const;

  inline bool hasRightLane() const;
  inline  ::cereal::ModelData::PathData::Reader getRightLane() const;

  inline bool hasLead() const;
  inline  ::cereal::ModelData::LeadData::Reader getLead() const;

  inline bool hasSettings() const;
  inline  ::cereal::ModelData::ModelSettings::Reader getSettings() const;

  inline bool hasFreePath() const;
  inline  ::capnp::List<float>::Reader getFreePath() const;

  inline bool hasLeadFuture() const;
  inline  ::cereal::ModelData::LeadData::Reader getLeadFuture() const;

  inline bool hasSpeed() const;
  inline  ::capnp::List<float>::Reader getSpeed() const;

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasMeta() const;
  inline  ::cereal::ModelData::MetaData::Reader getMeta() const;

  inline bool hasLongitudinal() const;
  inline  ::cereal::ModelData::LongitudinalData::Reader getLongitudinal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::Builder {
public:
  typedef ModelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasPath();
  inline  ::cereal::ModelData::PathData::Builder getPath();
  inline void setPath( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownPath();

  inline bool hasLeftLane();
  inline  ::cereal::ModelData::PathData::Builder getLeftLane();
  inline void setLeftLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initLeftLane();
  inline void adoptLeftLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownLeftLane();

  inline bool hasRightLane();
  inline  ::cereal::ModelData::PathData::Builder getRightLane();
  inline void setRightLane( ::cereal::ModelData::PathData::Reader value);
  inline  ::cereal::ModelData::PathData::Builder initRightLane();
  inline void adoptRightLane(::capnp::Orphan< ::cereal::ModelData::PathData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::PathData> disownRightLane();

  inline bool hasLead();
  inline  ::cereal::ModelData::LeadData::Builder getLead();
  inline void setLead( ::cereal::ModelData::LeadData::Reader value);
  inline  ::cereal::ModelData::LeadData::Builder initLead();
  inline void adoptLead(::capnp::Orphan< ::cereal::ModelData::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LeadData> disownLead();

  inline bool hasSettings();
  inline  ::cereal::ModelData::ModelSettings::Builder getSettings();
  inline void setSettings( ::cereal::ModelData::ModelSettings::Reader value);
  inline  ::cereal::ModelData::ModelSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> disownSettings();

  inline bool hasFreePath();
  inline  ::capnp::List<float>::Builder getFreePath();
  inline void setFreePath( ::capnp::List<float>::Reader value);
  inline void setFreePath(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFreePath(unsigned int size);
  inline void adoptFreePath(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFreePath();

  inline bool hasLeadFuture();
  inline  ::cereal::ModelData::LeadData::Builder getLeadFuture();
  inline void setLeadFuture( ::cereal::ModelData::LeadData::Reader value);
  inline  ::cereal::ModelData::LeadData::Builder initLeadFuture();
  inline void adoptLeadFuture(::capnp::Orphan< ::cereal::ModelData::LeadData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LeadData> disownLeadFuture();

  inline bool hasSpeed();
  inline  ::capnp::List<float>::Builder getSpeed();
  inline void setSpeed( ::capnp::List<float>::Reader value);
  inline void setSpeed(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initSpeed(unsigned int size);
  inline void adoptSpeed(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownSpeed();

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasMeta();
  inline  ::cereal::ModelData::MetaData::Builder getMeta();
  inline void setMeta( ::cereal::ModelData::MetaData::Reader value);
  inline  ::cereal::ModelData::MetaData::Builder initMeta();
  inline void adoptMeta(::capnp::Orphan< ::cereal::ModelData::MetaData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::MetaData> disownMeta();

  inline bool hasLongitudinal();
  inline  ::cereal::ModelData::LongitudinalData::Builder getLongitudinal();
  inline void setLongitudinal( ::cereal::ModelData::LongitudinalData::Reader value);
  inline  ::cereal::ModelData::LongitudinalData::Builder initLongitudinal();
  inline void adoptLongitudinal(::capnp::Orphan< ::cereal::ModelData::LongitudinalData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData::LongitudinalData> disownLongitudinal();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::Pipeline {
public:
  typedef ModelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ModelData::PathData::Pipeline getPath();
  inline  ::cereal::ModelData::PathData::Pipeline getLeftLane();
  inline  ::cereal::ModelData::PathData::Pipeline getRightLane();
  inline  ::cereal::ModelData::LeadData::Pipeline getLead();
  inline  ::cereal::ModelData::ModelSettings::Pipeline getSettings();
  inline  ::cereal::ModelData::LeadData::Pipeline getLeadFuture();
  inline  ::cereal::ModelData::MetaData::Pipeline getMeta();
  inline  ::cereal::ModelData::LongitudinalData::Pipeline getLongitudinal();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::PathData::Reader {
public:
  typedef PathData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPoints() const;
  inline  ::capnp::List<float>::Reader getPoints() const;

  inline float getProb() const;

  inline float getStd() const;

  inline bool hasStds() const;
  inline  ::capnp::List<float>::Reader getStds() const;

  inline bool hasPoly() const;
  inline  ::capnp::List<float>::Reader getPoly() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::PathData::Builder {
public:
  typedef PathData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoints();
  inline  ::capnp::List<float>::Builder getPoints();
  inline void setPoints( ::capnp::List<float>::Reader value);
  inline void setPoints(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPoints();

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

  inline bool hasStds();
  inline  ::capnp::List<float>::Builder getStds();
  inline void setStds( ::capnp::List<float>::Reader value);
  inline void setStds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initStds(unsigned int size);
  inline void adoptStds(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownStds();

  inline bool hasPoly();
  inline  ::capnp::List<float>::Builder getPoly();
  inline void setPoly( ::capnp::List<float>::Reader value);
  inline void setPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPoly(unsigned int size);
  inline void adoptPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPoly();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::PathData::Pipeline {
public:
  typedef PathData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::LeadData::Reader {
public:
  typedef LeadData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDist() const;

  inline float getProb() const;

  inline float getStd() const;

  inline float getRelVel() const;

  inline float getRelVelStd() const;

  inline float getRelY() const;

  inline float getRelYStd() const;

  inline float getRelA() const;

  inline float getRelAStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::LeadData::Builder {
public:
  typedef LeadData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDist();
  inline void setDist(float value);

  inline float getProb();
  inline void setProb(float value);

  inline float getStd();
  inline void setStd(float value);

  inline float getRelVel();
  inline void setRelVel(float value);

  inline float getRelVelStd();
  inline void setRelVelStd(float value);

  inline float getRelY();
  inline void setRelY(float value);

  inline float getRelYStd();
  inline void setRelYStd(float value);

  inline float getRelA();
  inline void setRelA(float value);

  inline float getRelAStd();
  inline void setRelAStd(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::LeadData::Pipeline {
public:
  typedef LeadData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::ModelSettings::Reader {
public:
  typedef ModelSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX() const;

  inline  ::uint16_t getBigBoxY() const;

  inline  ::uint16_t getBigBoxWidth() const;

  inline  ::uint16_t getBigBoxHeight() const;

  inline bool hasBoxProjection() const;
  inline  ::capnp::List<float>::Reader getBoxProjection() const;

  inline bool hasYuvCorrection() const;
  inline  ::capnp::List<float>::Reader getYuvCorrection() const;

  inline bool hasInputTransform() const;
  inline  ::capnp::List<float>::Reader getInputTransform() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::ModelSettings::Builder {
public:
  typedef ModelSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBigBoxX();
  inline void setBigBoxX( ::uint16_t value);

  inline  ::uint16_t getBigBoxY();
  inline void setBigBoxY( ::uint16_t value);

  inline  ::uint16_t getBigBoxWidth();
  inline void setBigBoxWidth( ::uint16_t value);

  inline  ::uint16_t getBigBoxHeight();
  inline void setBigBoxHeight( ::uint16_t value);

  inline bool hasBoxProjection();
  inline  ::capnp::List<float>::Builder getBoxProjection();
  inline void setBoxProjection( ::capnp::List<float>::Reader value);
  inline void setBoxProjection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initBoxProjection(unsigned int size);
  inline void adoptBoxProjection(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownBoxProjection();

  inline bool hasYuvCorrection();
  inline  ::capnp::List<float>::Builder getYuvCorrection();
  inline void setYuvCorrection( ::capnp::List<float>::Reader value);
  inline void setYuvCorrection(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initYuvCorrection(unsigned int size);
  inline void adoptYuvCorrection(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownYuvCorrection();

  inline bool hasInputTransform();
  inline  ::capnp::List<float>::Builder getInputTransform();
  inline void setInputTransform( ::capnp::List<float>::Reader value);
  inline void setInputTransform(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initInputTransform(unsigned int size);
  inline void adoptInputTransform(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownInputTransform();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::ModelSettings::Pipeline {
public:
  typedef ModelSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::MetaData::Reader {
public:
  typedef MetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getEngagedProb() const;

  inline bool hasDesirePrediction() const;
  inline  ::capnp::List<float>::Reader getDesirePrediction() const;

  inline float getBrakeDisengageProb() const;

  inline float getGasDisengageProb() const;

  inline float getSteerOverrideProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::MetaData::Builder {
public:
  typedef MetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getEngagedProb();
  inline void setEngagedProb(float value);

  inline bool hasDesirePrediction();
  inline  ::capnp::List<float>::Builder getDesirePrediction();
  inline void setDesirePrediction( ::capnp::List<float>::Reader value);
  inline void setDesirePrediction(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDesirePrediction(unsigned int size);
  inline void adoptDesirePrediction(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDesirePrediction();

  inline float getBrakeDisengageProb();
  inline void setBrakeDisengageProb(float value);

  inline float getGasDisengageProb();
  inline void setGasDisengageProb(float value);

  inline float getSteerOverrideProb();
  inline void setSteerOverrideProb(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::MetaData::Pipeline {
public:
  typedef MetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelData::LongitudinalData::Reader {
public:
  typedef LongitudinalData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSpeeds() const;
  inline  ::capnp::List<float>::Reader getSpeeds() const;

  inline bool hasAccelerations() const;
  inline  ::capnp::List<float>::Reader getAccelerations() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelData::LongitudinalData::Builder {
public:
  typedef LongitudinalData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSpeeds();
  inline  ::capnp::List<float>::Builder getSpeeds();
  inline void setSpeeds( ::capnp::List<float>::Reader value);
  inline void setSpeeds(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initSpeeds(unsigned int size);
  inline void adoptSpeeds(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownSpeeds();

  inline bool hasAccelerations();
  inline  ::capnp::List<float>::Builder getAccelerations();
  inline void setAccelerations( ::capnp::List<float>::Reader value);
  inline void setAccelerations(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initAccelerations(unsigned int size);
  inline void adoptAccelerations(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownAccelerations();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelData::LongitudinalData::Pipeline {
public:
  typedef LongitudinalData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CalibrationFeatures::Reader {
public:
  typedef CalibrationFeatures Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasP0() const;
  inline  ::capnp::List<float>::Reader getP0() const;

  inline bool hasP1() const;
  inline  ::capnp::List<float>::Reader getP1() const;

  inline bool hasStatus() const;
  inline  ::capnp::List< ::int8_t>::Reader getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CalibrationFeatures::Builder {
public:
  typedef CalibrationFeatures Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasP0();
  inline  ::capnp::List<float>::Builder getP0();
  inline void setP0( ::capnp::List<float>::Reader value);
  inline void setP0(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initP0(unsigned int size);
  inline void adoptP0(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownP0();

  inline bool hasP1();
  inline  ::capnp::List<float>::Builder getP1();
  inline void setP1( ::capnp::List<float>::Reader value);
  inline void setP1(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initP1(unsigned int size);
  inline void adoptP1(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownP1();

  inline bool hasStatus();
  inline  ::capnp::List< ::int8_t>::Builder getStatus();
  inline void setStatus( ::capnp::List< ::int8_t>::Reader value);
  inline void setStatus(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownStatus();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CalibrationFeatures::Pipeline {
public:
  typedef CalibrationFeatures Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EncodeIndex::Reader {
public:
  typedef EncodeIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline  ::cereal::EncodeIndex::Type getType() const;

  inline  ::uint32_t getEncodeId() const;

  inline  ::int32_t getSegmentNum() const;

  inline  ::uint32_t getSegmentId() const;

  inline  ::uint32_t getSegmentIdEncode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EncodeIndex::Builder {
public:
  typedef EncodeIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::cereal::EncodeIndex::Type getType();
  inline void setType( ::cereal::EncodeIndex::Type value);

  inline  ::uint32_t getEncodeId();
  inline void setEncodeId( ::uint32_t value);

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline  ::uint32_t getSegmentId();
  inline void setSegmentId( ::uint32_t value);

  inline  ::uint32_t getSegmentIdEncode();
  inline void setSegmentIdEncode( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EncodeIndex::Pipeline {
public:
  typedef EncodeIndex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidLogEntry::Reader {
public:
  typedef AndroidLogEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId() const;

  inline  ::uint64_t getTs() const;

  inline  ::uint8_t getPriority() const;

  inline  ::int32_t getPid() const;

  inline  ::int32_t getTid() const;

  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidLogEntry::Builder {
public:
  typedef AndroidLogEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId();
  inline void setId( ::uint8_t value);

  inline  ::uint64_t getTs();
  inline void setTs( ::uint64_t value);

  inline  ::uint8_t getPriority();
  inline void setPriority( ::uint8_t value);

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidLogEntry::Pipeline {
public:
  typedef AndroidLogEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LogRotate::Reader {
public:
  typedef LogRotate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LogRotate::Builder {
public:
  typedef LogRotate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSegmentNum();
  inline void setSegmentNum( ::int32_t value);

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LogRotate::Pipeline {
public:
  typedef LogRotate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Plan::Reader {
public:
  typedef Plan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLateralValidDEPRECATED() const;

  inline bool hasDPolyDEPRECATED() const;
  inline  ::capnp::List<float>::Reader getDPolyDEPRECATED() const;

  inline bool getLongitudinalValidDEPRECATED() const;

  inline float getVTarget() const;

  inline float getATargetMinDEPRECATED() const;

  inline float getATargetMaxDEPRECATED() const;

  inline float getJerkFactor() const;

  inline bool getHasLead() const;

  inline bool getFcw() const;

  inline  ::uint64_t getMdMonoTime() const;

  inline  ::uint64_t getRadarStateMonoTime() const;

  inline float getLaneWidthDEPRECATED() const;

  inline bool hasGpsTrajectory() const;
  inline  ::cereal::Plan::GpsTrajectory::Reader getGpsTrajectory() const;

  inline bool hasEventsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::CarEvent>::Reader getEventsDEPRECATED() const;

  inline float getVTargetFuture() const;

  inline  ::cereal::Plan::LongitudinalPlanSource getLongitudinalPlanSource() const;

  inline float getVCruise() const;

  inline float getACruise() const;

  inline float getATarget() const;

  inline bool getGpsPlannerActive() const;

  inline float getVMax() const;

  inline float getVCurvature() const;

  inline bool getDecelForTurn() const;

  inline bool getHasLeftLaneDEPRECATED() const;

  inline bool getHasRightLaneDEPRECATED() const;

  inline bool getMapValid() const;

  inline float getVStart() const;

  inline float getAStart() const;

  inline bool getRadarValid() const;

  inline float getProcessingDelay() const;

  inline bool getRadarCanError() const;

  inline bool getCommIssue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Plan::Builder {
public:
  typedef Plan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLateralValidDEPRECATED();
  inline void setLateralValidDEPRECATED(bool value);

  inline bool hasDPolyDEPRECATED();
  inline  ::capnp::List<float>::Builder getDPolyDEPRECATED();
  inline void setDPolyDEPRECATED( ::capnp::List<float>::Reader value);
  inline void setDPolyDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDPolyDEPRECATED(unsigned int size);
  inline void adoptDPolyDEPRECATED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDPolyDEPRECATED();

  inline bool getLongitudinalValidDEPRECATED();
  inline void setLongitudinalValidDEPRECATED(bool value);

  inline float getVTarget();
  inline void setVTarget(float value);

  inline float getATargetMinDEPRECATED();
  inline void setATargetMinDEPRECATED(float value);

  inline float getATargetMaxDEPRECATED();
  inline void setATargetMaxDEPRECATED(float value);

  inline float getJerkFactor();
  inline void setJerkFactor(float value);

  inline bool getHasLead();
  inline void setHasLead(bool value);

  inline bool getFcw();
  inline void setFcw(bool value);

  inline  ::uint64_t getMdMonoTime();
  inline void setMdMonoTime( ::uint64_t value);

  inline  ::uint64_t getRadarStateMonoTime();
  inline void setRadarStateMonoTime( ::uint64_t value);

  inline float getLaneWidthDEPRECATED();
  inline void setLaneWidthDEPRECATED(float value);

  inline bool hasGpsTrajectory();
  inline  ::cereal::Plan::GpsTrajectory::Builder getGpsTrajectory();
  inline void setGpsTrajectory( ::cereal::Plan::GpsTrajectory::Reader value);
  inline  ::cereal::Plan::GpsTrajectory::Builder initGpsTrajectory();
  inline void adoptGpsTrajectory(::capnp::Orphan< ::cereal::Plan::GpsTrajectory>&& value);
  inline ::capnp::Orphan< ::cereal::Plan::GpsTrajectory> disownGpsTrajectory();

  inline bool hasEventsDEPRECATED();
  inline  ::capnp::List< ::cereal::CarEvent>::Builder getEventsDEPRECATED();
  inline void setEventsDEPRECATED( ::capnp::List< ::cereal::CarEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent>::Builder initEventsDEPRECATED(unsigned int size);
  inline void adoptEventsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> disownEventsDEPRECATED();

  inline float getVTargetFuture();
  inline void setVTargetFuture(float value);

  inline  ::cereal::Plan::LongitudinalPlanSource getLongitudinalPlanSource();
  inline void setLongitudinalPlanSource( ::cereal::Plan::LongitudinalPlanSource value);

  inline float getVCruise();
  inline void setVCruise(float value);

  inline float getACruise();
  inline void setACruise(float value);

  inline float getATarget();
  inline void setATarget(float value);

  inline bool getGpsPlannerActive();
  inline void setGpsPlannerActive(bool value);

  inline float getVMax();
  inline void setVMax(float value);

  inline float getVCurvature();
  inline void setVCurvature(float value);

  inline bool getDecelForTurn();
  inline void setDecelForTurn(bool value);

  inline bool getHasLeftLaneDEPRECATED();
  inline void setHasLeftLaneDEPRECATED(bool value);

  inline bool getHasRightLaneDEPRECATED();
  inline void setHasRightLaneDEPRECATED(bool value);

  inline bool getMapValid();
  inline void setMapValid(bool value);

  inline float getVStart();
  inline void setVStart(float value);

  inline float getAStart();
  inline void setAStart(float value);

  inline bool getRadarValid();
  inline void setRadarValid(bool value);

  inline float getProcessingDelay();
  inline void setProcessingDelay(float value);

  inline bool getRadarCanError();
  inline void setRadarCanError(bool value);

  inline bool getCommIssue();
  inline void setCommIssue(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Plan::Pipeline {
public:
  typedef Plan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::Plan::GpsTrajectory::Pipeline getGpsTrajectory();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Plan::GpsTrajectory::Reader {
public:
  typedef GpsTrajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float>::Reader getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Plan::GpsTrajectory::Builder {
public:
  typedef GpsTrajectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float>::Builder getX();
  inline void setX( ::capnp::List<float>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float>::Builder getY();
  inline void setY( ::capnp::List<float>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownY();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Plan::GpsTrajectory::Pipeline {
public:
  typedef GpsTrajectory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PathPlan::Reader {
public:
  typedef PathPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLaneWidth() const;

  inline bool hasDPoly() const;
  inline  ::capnp::List<float>::Reader getDPoly() const;

  inline bool hasCPoly() const;
  inline  ::capnp::List<float>::Reader getCPoly() const;

  inline float getCProb() const;

  inline bool hasLPoly() const;
  inline  ::capnp::List<float>::Reader getLPoly() const;

  inline float getLProb() const;

  inline bool hasRPoly() const;
  inline  ::capnp::List<float>::Reader getRPoly() const;

  inline float getRProb() const;

  inline float getAngleSteers() const;

  inline bool getMpcSolutionValid() const;

  inline bool getParamsValid() const;

  inline float getAngleOffset() const;

  inline bool getModelValidDEPRECATED() const;

  inline float getRateSteers() const;

  inline bool getSensorValid() const;

  inline bool getCommIssue() const;

  inline bool getPosenetValid() const;

  inline  ::cereal::PathPlan::Desire getDesire() const;

  inline  ::cereal::PathPlan::LaneChangeState getLaneChangeState() const;

  inline  ::cereal::PathPlan::LaneChangeDirection getLaneChangeDirection() const;

  inline  ::cereal::PathPlan::LaneChangeBSM getLaneChangeBSM() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PathPlan::Builder {
public:
  typedef PathPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLaneWidth();
  inline void setLaneWidth(float value);

  inline bool hasDPoly();
  inline  ::capnp::List<float>::Builder getDPoly();
  inline void setDPoly( ::capnp::List<float>::Reader value);
  inline void setDPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDPoly(unsigned int size);
  inline void adoptDPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDPoly();

  inline bool hasCPoly();
  inline  ::capnp::List<float>::Builder getCPoly();
  inline void setCPoly( ::capnp::List<float>::Reader value);
  inline void setCPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initCPoly(unsigned int size);
  inline void adoptCPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownCPoly();

  inline float getCProb();
  inline void setCProb(float value);

  inline bool hasLPoly();
  inline  ::capnp::List<float>::Builder getLPoly();
  inline void setLPoly( ::capnp::List<float>::Reader value);
  inline void setLPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initLPoly(unsigned int size);
  inline void adoptLPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownLPoly();

  inline float getLProb();
  inline void setLProb(float value);

  inline bool hasRPoly();
  inline  ::capnp::List<float>::Builder getRPoly();
  inline void setRPoly( ::capnp::List<float>::Reader value);
  inline void setRPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRPoly(unsigned int size);
  inline void adoptRPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRPoly();

  inline float getRProb();
  inline void setRProb(float value);

  inline float getAngleSteers();
  inline void setAngleSteers(float value);

  inline bool getMpcSolutionValid();
  inline void setMpcSolutionValid(bool value);

  inline bool getParamsValid();
  inline void setParamsValid(bool value);

  inline float getAngleOffset();
  inline void setAngleOffset(float value);

  inline bool getModelValidDEPRECATED();
  inline void setModelValidDEPRECATED(bool value);

  inline float getRateSteers();
  inline void setRateSteers(float value);

  inline bool getSensorValid();
  inline void setSensorValid(bool value);

  inline bool getCommIssue();
  inline void setCommIssue(bool value);

  inline bool getPosenetValid();
  inline void setPosenetValid(bool value);

  inline  ::cereal::PathPlan::Desire getDesire();
  inline void setDesire( ::cereal::PathPlan::Desire value);

  inline  ::cereal::PathPlan::LaneChangeState getLaneChangeState();
  inline void setLaneChangeState( ::cereal::PathPlan::LaneChangeState value);

  inline  ::cereal::PathPlan::LaneChangeDirection getLaneChangeDirection();
  inline void setLaneChangeDirection( ::cereal::PathPlan::LaneChangeDirection value);

  inline  ::cereal::PathPlan::LaneChangeBSM getLaneChangeBSM();
  inline void setLaneChangeBSM( ::cereal::PathPlan::LaneChangeBSM value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PathPlan::Pipeline {
public:
  typedef PathPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationData::Reader {
public:
  typedef LiveLocationData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStatus() const;

  inline double getLat() const;

  inline double getLon() const;

  inline float getAlt() const;

  inline float getSpeed() const;

  inline bool hasVNED() const;
  inline  ::capnp::List<float>::Reader getVNED() const;

  inline float getRoll() const;

  inline float getPitch() const;

  inline float getHeading() const;

  inline float getWanderAngle() const;

  inline float getTrackAngle() const;

  inline bool hasGyro() const;
  inline  ::capnp::List<float>::Reader getGyro() const;

  inline bool hasAccel() const;
  inline  ::capnp::List<float>::Reader getAccel() const;

  inline bool hasAccuracy() const;
  inline  ::cereal::LiveLocationData::Accuracy::Reader getAccuracy() const;

  inline  ::cereal::LiveLocationData::SensorSource getSource() const;

  inline  ::uint64_t getFixMonoTime() const;

  inline  ::int32_t getGpsWeek() const;

  inline double getTimeOfWeek() const;

  inline bool hasPositionECEF() const;
  inline  ::capnp::List<double>::Reader getPositionECEF() const;

  inline bool hasPoseQuatECEF() const;
  inline  ::capnp::List<float>::Reader getPoseQuatECEF() const;

  inline float getPitchCalibration() const;

  inline float getYawCalibration() const;

  inline bool hasImuFrame() const;
  inline  ::capnp::List<float>::Reader getImuFrame() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationData::Builder {
public:
  typedef LiveLocationData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStatus();
  inline void setStatus( ::uint8_t value);

  inline double getLat();
  inline void setLat(double value);

  inline double getLon();
  inline void setLon(double value);

  inline float getAlt();
  inline void setAlt(float value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline bool hasVNED();
  inline  ::capnp::List<float>::Builder getVNED();
  inline void setVNED( ::capnp::List<float>::Reader value);
  inline void setVNED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initVNED(unsigned int size);
  inline void adoptVNED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownVNED();

  inline float getRoll();
  inline void setRoll(float value);

  inline float getPitch();
  inline void setPitch(float value);

  inline float getHeading();
  inline void setHeading(float value);

  inline float getWanderAngle();
  inline void setWanderAngle(float value);

  inline float getTrackAngle();
  inline void setTrackAngle(float value);

  inline bool hasGyro();
  inline  ::capnp::List<float>::Builder getGyro();
  inline void setGyro( ::capnp::List<float>::Reader value);
  inline void setGyro(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initGyro(unsigned int size);
  inline void adoptGyro(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownGyro();

  inline bool hasAccel();
  inline  ::capnp::List<float>::Builder getAccel();
  inline void setAccel( ::capnp::List<float>::Reader value);
  inline void setAccel(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initAccel(unsigned int size);
  inline void adoptAccel(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownAccel();

  inline bool hasAccuracy();
  inline  ::cereal::LiveLocationData::Accuracy::Builder getAccuracy();
  inline void setAccuracy( ::cereal::LiveLocationData::Accuracy::Reader value);
  inline  ::cereal::LiveLocationData::Accuracy::Builder initAccuracy();
  inline void adoptAccuracy(::capnp::Orphan< ::cereal::LiveLocationData::Accuracy>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy> disownAccuracy();

  inline  ::cereal::LiveLocationData::SensorSource getSource();
  inline void setSource( ::cereal::LiveLocationData::SensorSource value);

  inline  ::uint64_t getFixMonoTime();
  inline void setFixMonoTime( ::uint64_t value);

  inline  ::int32_t getGpsWeek();
  inline void setGpsWeek( ::int32_t value);

  inline double getTimeOfWeek();
  inline void setTimeOfWeek(double value);

  inline bool hasPositionECEF();
  inline  ::capnp::List<double>::Builder getPositionECEF();
  inline void setPositionECEF( ::capnp::List<double>::Reader value);
  inline void setPositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initPositionECEF(unsigned int size);
  inline void adoptPositionECEF(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownPositionECEF();

  inline bool hasPoseQuatECEF();
  inline  ::capnp::List<float>::Builder getPoseQuatECEF();
  inline void setPoseQuatECEF( ::capnp::List<float>::Reader value);
  inline void setPoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPoseQuatECEF(unsigned int size);
  inline void adoptPoseQuatECEF(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPoseQuatECEF();

  inline float getPitchCalibration();
  inline void setPitchCalibration(float value);

  inline float getYawCalibration();
  inline void setYawCalibration(float value);

  inline bool hasImuFrame();
  inline  ::capnp::List<float>::Builder getImuFrame();
  inline void setImuFrame( ::capnp::List<float>::Reader value);
  inline void setImuFrame(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initImuFrame(unsigned int size);
  inline void adoptImuFrame(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownImuFrame();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationData::Pipeline {
public:
  typedef LiveLocationData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::LiveLocationData::Accuracy::Pipeline getAccuracy();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLocationData::Accuracy::Reader {
public:
  typedef Accuracy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPNEDError() const;
  inline  ::capnp::List<float>::Reader getPNEDError() const;

  inline bool hasVNEDError() const;
  inline  ::capnp::List<float>::Reader getVNEDError() const;

  inline float getRollError() const;

  inline float getPitchError() const;

  inline float getHeadingError() const;

  inline float getEllipsoidSemiMajorError() const;

  inline float getEllipsoidSemiMinorError() const;

  inline float getEllipsoidOrientationError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLocationData::Accuracy::Builder {
public:
  typedef Accuracy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPNEDError();
  inline  ::capnp::List<float>::Builder getPNEDError();
  inline void setPNEDError( ::capnp::List<float>::Reader value);
  inline void setPNEDError(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPNEDError(unsigned int size);
  inline void adoptPNEDError(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPNEDError();

  inline bool hasVNEDError();
  inline  ::capnp::List<float>::Builder getVNEDError();
  inline void setVNEDError( ::capnp::List<float>::Reader value);
  inline void setVNEDError(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initVNEDError(unsigned int size);
  inline void adoptVNEDError(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownVNEDError();

  inline float getRollError();
  inline void setRollError(float value);

  inline float getPitchError();
  inline void setPitchError(float value);

  inline float getHeadingError();
  inline void setHeadingError(float value);

  inline float getEllipsoidSemiMajorError();
  inline void setEllipsoidSemiMajorError(float value);

  inline float getEllipsoidSemiMinorError();
  inline void setEllipsoidSemiMinorError(float value);

  inline float getEllipsoidOrientationError();
  inline void setEllipsoidOrientationError(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLocationData::Accuracy::Pipeline {
public:
  typedef Accuracy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EthernetPacket::Reader {
public:
  typedef EthernetPacket Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPkt() const;
  inline  ::capnp::Data::Reader getPkt() const;

  inline float getTs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EthernetPacket::Builder {
public:
  typedef EthernetPacket Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPkt();
  inline  ::capnp::Data::Builder getPkt();
  inline void setPkt( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPkt(unsigned int size);
  inline void adoptPkt(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPkt();

  inline float getTs();
  inline void setTs(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EthernetPacket::Pipeline {
public:
  typedef EthernetPacket Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::Reader {
public:
  typedef NavUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating() const;

  inline  ::int32_t getCurSegment() const;

  inline bool hasSegments() const;
  inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Reader getSegments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::Builder {
public:
  typedef NavUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating();
  inline void setIsNavigating(bool value);

  inline  ::int32_t getCurSegment();
  inline void setCurSegment( ::int32_t value);

  inline bool hasSegments();
  inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Builder getSegments();
  inline void setSegments( ::capnp::List< ::cereal::NavUpdate::Segment>::Reader value);
  inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Builder initSegments(unsigned int size);
  inline void adoptSegments(::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment>> disownSegments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::Pipeline {
public:
  typedef NavUpdate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::LatLng::Reader {
public:
  typedef LatLng Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLat() const;

  inline double getLng() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::LatLng::Builder {
public:
  typedef LatLng Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLat();
  inline void setLat(double value);

  inline double getLng();
  inline void setLng(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::LatLng::Pipeline {
public:
  typedef LatLng Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavUpdate::Segment::Reader {
public:
  typedef Segment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrom() const;
  inline  ::cereal::NavUpdate::LatLng::Reader getFrom() const;

  inline bool hasTo() const;
  inline  ::cereal::NavUpdate::LatLng::Reader getTo() const;

  inline  ::int32_t getUpdateTime() const;

  inline  ::int32_t getDistance() const;

  inline  ::int32_t getCrossTime() const;

  inline  ::int32_t getExitNo() const;

  inline  ::cereal::NavUpdate::Segment::Instruction getInstruction() const;

  inline bool hasParts() const;
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Reader getParts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavUpdate::Segment::Builder {
public:
  typedef Segment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrom();
  inline  ::cereal::NavUpdate::LatLng::Builder getFrom();
  inline void setFrom( ::cereal::NavUpdate::LatLng::Reader value);
  inline  ::cereal::NavUpdate::LatLng::Builder initFrom();
  inline void adoptFrom(::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> disownFrom();

  inline bool hasTo();
  inline  ::cereal::NavUpdate::LatLng::Builder getTo();
  inline void setTo( ::cereal::NavUpdate::LatLng::Reader value);
  inline  ::cereal::NavUpdate::LatLng::Builder initTo();
  inline void adoptTo(::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> disownTo();

  inline  ::int32_t getUpdateTime();
  inline void setUpdateTime( ::int32_t value);

  inline  ::int32_t getDistance();
  inline void setDistance( ::int32_t value);

  inline  ::int32_t getCrossTime();
  inline void setCrossTime( ::int32_t value);

  inline  ::int32_t getExitNo();
  inline void setExitNo( ::int32_t value);

  inline  ::cereal::NavUpdate::Segment::Instruction getInstruction();
  inline void setInstruction( ::cereal::NavUpdate::Segment::Instruction value);

  inline bool hasParts();
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Builder getParts();
  inline void setParts( ::capnp::List< ::cereal::NavUpdate::LatLng>::Reader value);
  inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Builder initParts(unsigned int size);
  inline void adoptParts(::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng>> disownParts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavUpdate::Segment::Pipeline {
public:
  typedef Segment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavUpdate::LatLng::Pipeline getFrom();
  inline  ::cereal::NavUpdate::LatLng::Pipeline getTo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStatus::Reader {
public:
  typedef NavStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating() const;

  inline bool hasCurrentAddress() const;
  inline  ::cereal::NavStatus::Address::Reader getCurrentAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStatus::Builder {
public:
  typedef NavStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsNavigating();
  inline void setIsNavigating(bool value);

  inline bool hasCurrentAddress();
  inline  ::cereal::NavStatus::Address::Builder getCurrentAddress();
  inline void setCurrentAddress( ::cereal::NavStatus::Address::Reader value);
  inline  ::cereal::NavStatus::Address::Builder initCurrentAddress();
  inline void adoptCurrentAddress(::capnp::Orphan< ::cereal::NavStatus::Address>&& value);
  inline ::capnp::Orphan< ::cereal::NavStatus::Address> disownCurrentAddress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStatus::Pipeline {
public:
  typedef NavStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::NavStatus::Address::Pipeline getCurrentAddress();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStatus::Address::Reader {
public:
  typedef Address Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline double getLat() const;

  inline double getLng() const;

  inline bool hasHouse() const;
  inline  ::capnp::Text::Reader getHouse() const;

  inline bool hasAddress() const;
  inline  ::capnp::Text::Reader getAddress() const;

  inline bool hasStreet() const;
  inline  ::capnp::Text::Reader getStreet() const;

  inline bool hasCity() const;
  inline  ::capnp::Text::Reader getCity() const;

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

  inline bool hasCountry() const;
  inline  ::capnp::Text::Reader getCountry() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStatus::Address::Builder {
public:
  typedef Address Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline double getLat();
  inline void setLat(double value);

  inline double getLng();
  inline void setLng(double value);

  inline bool hasHouse();
  inline  ::capnp::Text::Builder getHouse();
  inline void setHouse( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHouse(unsigned int size);
  inline void adoptHouse(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHouse();

  inline bool hasAddress();
  inline  ::capnp::Text::Builder getAddress();
  inline void setAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAddress();

  inline bool hasStreet();
  inline  ::capnp::Text::Builder getStreet();
  inline void setStreet( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStreet(unsigned int size);
  inline void adoptStreet(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStreet();

  inline bool hasCity();
  inline  ::capnp::Text::Builder getCity();
  inline void setCity( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCity(unsigned int size);
  inline void adoptCity(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCity();

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

  inline bool hasCountry();
  inline  ::capnp::Text::Builder getCountry();
  inline void setCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCountry(unsigned int size);
  inline void adoptCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCountry();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStatus::Address::Pipeline {
public:
  typedef Address Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CellInfo::Reader {
public:
  typedef CellInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasRepr() const;
  inline  ::capnp::Text::Reader getRepr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CellInfo::Builder {
public:
  typedef CellInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasRepr();
  inline  ::capnp::Text::Builder getRepr();
  inline void setRepr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRepr(unsigned int size);
  inline void adoptRepr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRepr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CellInfo::Pipeline {
public:
  typedef CellInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WifiScan::Reader {
public:
  typedef WifiScan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBssid() const;
  inline  ::capnp::Text::Reader getBssid() const;

  inline bool hasSsid() const;
  inline  ::capnp::Text::Reader getSsid() const;

  inline bool hasCapabilities() const;
  inline  ::capnp::Text::Reader getCapabilities() const;

  inline  ::int32_t getFrequency() const;

  inline  ::int32_t getLevel() const;

  inline  ::int64_t getTimestamp() const;

  inline  ::int32_t getCenterFreq0() const;

  inline  ::int32_t getCenterFreq1() const;

  inline  ::cereal::WifiScan::ChannelWidth getChannelWidth() const;

  inline bool hasOperatorFriendlyName() const;
  inline  ::capnp::Text::Reader getOperatorFriendlyName() const;

  inline bool hasVenueName() const;
  inline  ::capnp::Text::Reader getVenueName() const;

  inline bool getIs80211mcResponder() const;

  inline bool getPasspoint() const;

  inline  ::int32_t getDistanceCm() const;

  inline  ::int32_t getDistanceSdCm() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WifiScan::Builder {
public:
  typedef WifiScan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBssid();
  inline  ::capnp::Text::Builder getBssid();
  inline void setBssid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBssid(unsigned int size);
  inline void adoptBssid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBssid();

  inline bool hasSsid();
  inline  ::capnp::Text::Builder getSsid();
  inline void setSsid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSsid(unsigned int size);
  inline void adoptSsid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSsid();

  inline bool hasCapabilities();
  inline  ::capnp::Text::Builder getCapabilities();
  inline void setCapabilities( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCapabilities(unsigned int size);
  inline void adoptCapabilities(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCapabilities();

  inline  ::int32_t getFrequency();
  inline void setFrequency( ::int32_t value);

  inline  ::int32_t getLevel();
  inline void setLevel( ::int32_t value);

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::int32_t getCenterFreq0();
  inline void setCenterFreq0( ::int32_t value);

  inline  ::int32_t getCenterFreq1();
  inline void setCenterFreq1( ::int32_t value);

  inline  ::cereal::WifiScan::ChannelWidth getChannelWidth();
  inline void setChannelWidth( ::cereal::WifiScan::ChannelWidth value);

  inline bool hasOperatorFriendlyName();
  inline  ::capnp::Text::Builder getOperatorFriendlyName();
  inline void setOperatorFriendlyName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOperatorFriendlyName(unsigned int size);
  inline void adoptOperatorFriendlyName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOperatorFriendlyName();

  inline bool hasVenueName();
  inline  ::capnp::Text::Builder getVenueName();
  inline void setVenueName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVenueName(unsigned int size);
  inline void adoptVenueName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVenueName();

  inline bool getIs80211mcResponder();
  inline void setIs80211mcResponder(bool value);

  inline bool getPasspoint();
  inline void setPasspoint(bool value);

  inline  ::int32_t getDistanceCm();
  inline void setDistanceCm( ::int32_t value);

  inline  ::int32_t getDistanceSdCm();
  inline void setDistanceSdCm( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WifiScan::Pipeline {
public:
  typedef WifiScan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Reader {
public:
  typedef AndroidGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMeasurements() const;
  inline bool hasMeasurements() const;
  inline  ::cereal::AndroidGnss::Measurements::Reader getMeasurements() const;

  inline bool isNavigationMessage() const;
  inline bool hasNavigationMessage() const;
  inline  ::cereal::AndroidGnss::NavigationMessage::Reader getNavigationMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Builder {
public:
  typedef AndroidGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMeasurements();
  inline bool hasMeasurements();
  inline  ::cereal::AndroidGnss::Measurements::Builder getMeasurements();
  inline void setMeasurements( ::cereal::AndroidGnss::Measurements::Reader value);
  inline  ::cereal::AndroidGnss::Measurements::Builder initMeasurements();
  inline void adoptMeasurements(::capnp::Orphan< ::cereal::AndroidGnss::Measurements>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements> disownMeasurements();

  inline bool isNavigationMessage();
  inline bool hasNavigationMessage();
  inline  ::cereal::AndroidGnss::NavigationMessage::Builder getNavigationMessage();
  inline void setNavigationMessage( ::cereal::AndroidGnss::NavigationMessage::Reader value);
  inline  ::cereal::AndroidGnss::NavigationMessage::Builder initNavigationMessage();
  inline void adoptNavigationMessage(::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage> disownNavigationMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Pipeline {
public:
  typedef AndroidGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Reader {
public:
  typedef Measurements Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClock() const;
  inline  ::cereal::AndroidGnss::Measurements::Clock::Reader getClock() const;

  inline bool hasMeasurements() const;
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Reader getMeasurements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Builder {
public:
  typedef Measurements Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClock();
  inline  ::cereal::AndroidGnss::Measurements::Clock::Builder getClock();
  inline void setClock( ::cereal::AndroidGnss::Measurements::Clock::Reader value);
  inline  ::cereal::AndroidGnss::Measurements::Clock::Builder initClock();
  inline void adoptClock(::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock> disownClock();

  inline bool hasMeasurements();
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Builder getMeasurements();
  inline void setMeasurements( ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Reader value);
  inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Builder initMeasurements(unsigned int size);
  inline void adoptMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>> disownMeasurements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Pipeline {
public:
  typedef Measurements Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::AndroidGnss::Measurements::Clock::Pipeline getClock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Clock::Reader {
public:
  typedef Clock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimeNanos() const;

  inline  ::int32_t getHardwareClockDiscontinuityCount() const;

  inline bool getHasTimeUncertaintyNanos() const;

  inline double getTimeUncertaintyNanos() const;

  inline bool getHasLeapSecond() const;

  inline  ::int32_t getLeapSecond() const;

  inline bool getHasFullBiasNanos() const;

  inline  ::int64_t getFullBiasNanos() const;

  inline bool getHasBiasNanos() const;

  inline double getBiasNanos() const;

  inline bool getHasBiasUncertaintyNanos() const;

  inline double getBiasUncertaintyNanos() const;

  inline bool getHasDriftNanosPerSecond() const;

  inline double getDriftNanosPerSecond() const;

  inline bool getHasDriftUncertaintyNanosPerSecond() const;

  inline double getDriftUncertaintyNanosPerSecond() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Clock::Builder {
public:
  typedef Clock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTimeNanos();
  inline void setTimeNanos( ::int64_t value);

  inline  ::int32_t getHardwareClockDiscontinuityCount();
  inline void setHardwareClockDiscontinuityCount( ::int32_t value);

  inline bool getHasTimeUncertaintyNanos();
  inline void setHasTimeUncertaintyNanos(bool value);

  inline double getTimeUncertaintyNanos();
  inline void setTimeUncertaintyNanos(double value);

  inline bool getHasLeapSecond();
  inline void setHasLeapSecond(bool value);

  inline  ::int32_t getLeapSecond();
  inline void setLeapSecond( ::int32_t value);

  inline bool getHasFullBiasNanos();
  inline void setHasFullBiasNanos(bool value);

  inline  ::int64_t getFullBiasNanos();
  inline void setFullBiasNanos( ::int64_t value);

  inline bool getHasBiasNanos();
  inline void setHasBiasNanos(bool value);

  inline double getBiasNanos();
  inline void setBiasNanos(double value);

  inline bool getHasBiasUncertaintyNanos();
  inline void setHasBiasUncertaintyNanos(bool value);

  inline double getBiasUncertaintyNanos();
  inline void setBiasUncertaintyNanos(double value);

  inline bool getHasDriftNanosPerSecond();
  inline void setHasDriftNanosPerSecond(bool value);

  inline double getDriftNanosPerSecond();
  inline void setDriftNanosPerSecond(double value);

  inline bool getHasDriftUncertaintyNanosPerSecond();
  inline void setHasDriftUncertaintyNanosPerSecond(bool value);

  inline double getDriftUncertaintyNanosPerSecond();
  inline void setDriftUncertaintyNanosPerSecond(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Clock::Pipeline {
public:
  typedef Clock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::Measurements::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSvId() const;

  inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation getConstellation() const;

  inline double getTimeOffsetNanos() const;

  inline  ::int32_t getState() const;

  inline  ::int64_t getReceivedSvTimeNanos() const;

  inline  ::int64_t getReceivedSvTimeUncertaintyNanos() const;

  inline double getCn0DbHz() const;

  inline double getPseudorangeRateMetersPerSecond() const;

  inline double getPseudorangeRateUncertaintyMetersPerSecond() const;

  inline  ::int32_t getAccumulatedDeltaRangeState() const;

  inline double getAccumulatedDeltaRangeMeters() const;

  inline double getAccumulatedDeltaRangeUncertaintyMeters() const;

  inline bool getHasCarrierFrequencyHz() const;

  inline float getCarrierFrequencyHz() const;

  inline bool getHasCarrierCycles() const;

  inline  ::int64_t getCarrierCycles() const;

  inline bool getHasCarrierPhase() const;

  inline double getCarrierPhase() const;

  inline bool getHasCarrierPhaseUncertainty() const;

  inline double getCarrierPhaseUncertainty() const;

  inline bool getHasSnrInDb() const;

  inline double getSnrInDb() const;

  inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator getMultipathIndicator() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::Measurements::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSvId();
  inline void setSvId( ::int32_t value);

  inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation getConstellation();
  inline void setConstellation( ::cereal::AndroidGnss::Measurements::Measurement::Constellation value);

  inline double getTimeOffsetNanos();
  inline void setTimeOffsetNanos(double value);

  inline  ::int32_t getState();
  inline void setState( ::int32_t value);

  inline  ::int64_t getReceivedSvTimeNanos();
  inline void setReceivedSvTimeNanos( ::int64_t value);

  inline  ::int64_t getReceivedSvTimeUncertaintyNanos();
  inline void setReceivedSvTimeUncertaintyNanos( ::int64_t value);

  inline double getCn0DbHz();
  inline void setCn0DbHz(double value);

  inline double getPseudorangeRateMetersPerSecond();
  inline void setPseudorangeRateMetersPerSecond(double value);

  inline double getPseudorangeRateUncertaintyMetersPerSecond();
  inline void setPseudorangeRateUncertaintyMetersPerSecond(double value);

  inline  ::int32_t getAccumulatedDeltaRangeState();
  inline void setAccumulatedDeltaRangeState( ::int32_t value);

  inline double getAccumulatedDeltaRangeMeters();
  inline void setAccumulatedDeltaRangeMeters(double value);

  inline double getAccumulatedDeltaRangeUncertaintyMeters();
  inline void setAccumulatedDeltaRangeUncertaintyMeters(double value);

  inline bool getHasCarrierFrequencyHz();
  inline void setHasCarrierFrequencyHz(bool value);

  inline float getCarrierFrequencyHz();
  inline void setCarrierFrequencyHz(float value);

  inline bool getHasCarrierCycles();
  inline void setHasCarrierCycles(bool value);

  inline  ::int64_t getCarrierCycles();
  inline void setCarrierCycles( ::int64_t value);

  inline bool getHasCarrierPhase();
  inline void setHasCarrierPhase(bool value);

  inline double getCarrierPhase();
  inline void setCarrierPhase(double value);

  inline bool getHasCarrierPhaseUncertainty();
  inline void setHasCarrierPhaseUncertainty(bool value);

  inline double getCarrierPhaseUncertainty();
  inline void setCarrierPhaseUncertainty(double value);

  inline bool getHasSnrInDb();
  inline void setHasSnrInDb(bool value);

  inline double getSnrInDb();
  inline void setSnrInDb(double value);

  inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator getMultipathIndicator();
  inline void setMultipathIndicator( ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::Measurements::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AndroidGnss::NavigationMessage::Reader {
public:
  typedef NavigationMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getType() const;

  inline  ::int32_t getSvId() const;

  inline  ::int32_t getMessageId() const;

  inline  ::int32_t getSubmessageId() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline  ::cereal::AndroidGnss::NavigationMessage::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AndroidGnss::NavigationMessage::Builder {
public:
  typedef NavigationMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getSvId();
  inline void setSvId( ::int32_t value);

  inline  ::int32_t getMessageId();
  inline void setMessageId( ::int32_t value);

  inline  ::int32_t getSubmessageId();
  inline void setSubmessageId( ::int32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline  ::cereal::AndroidGnss::NavigationMessage::Status getStatus();
  inline void setStatus( ::cereal::AndroidGnss::NavigationMessage::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AndroidGnss::NavigationMessage::Pipeline {
public:
  typedef NavigationMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::Reader {
public:
  typedef QcomGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogTs() const;

  inline bool isMeasurementReport() const;
  inline bool hasMeasurementReport() const;
  inline  ::cereal::QcomGnss::MeasurementReport::Reader getMeasurementReport() const;

  inline bool isClockReport() const;
  inline bool hasClockReport() const;
  inline  ::cereal::QcomGnss::ClockReport::Reader getClockReport() const;

  inline bool isDrMeasurementReport() const;
  inline bool hasDrMeasurementReport() const;
  inline  ::cereal::QcomGnss::DrMeasurementReport::Reader getDrMeasurementReport() const;

  inline bool isDrSvPoly() const;
  inline bool hasDrSvPoly() const;
  inline  ::cereal::QcomGnss::DrSvPolyReport::Reader getDrSvPoly() const;

  inline bool isRawLog() const;
  inline bool hasRawLog() const;
  inline  ::capnp::Data::Reader getRawLog() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::Builder {
public:
  typedef QcomGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogTs();
  inline void setLogTs( ::uint64_t value);

  inline bool isMeasurementReport();
  inline bool hasMeasurementReport();
  inline  ::cereal::QcomGnss::MeasurementReport::Builder getMeasurementReport();
  inline void setMeasurementReport( ::cereal::QcomGnss::MeasurementReport::Reader value);
  inline  ::cereal::QcomGnss::MeasurementReport::Builder initMeasurementReport();
  inline void adoptMeasurementReport(::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport> disownMeasurementReport();

  inline bool isClockReport();
  inline bool hasClockReport();
  inline  ::cereal::QcomGnss::ClockReport::Builder getClockReport();
  inline void setClockReport( ::cereal::QcomGnss::ClockReport::Reader value);
  inline  ::cereal::QcomGnss::ClockReport::Builder initClockReport();
  inline void adoptClockReport(::capnp::Orphan< ::cereal::QcomGnss::ClockReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::ClockReport> disownClockReport();

  inline bool isDrMeasurementReport();
  inline bool hasDrMeasurementReport();
  inline  ::cereal::QcomGnss::DrMeasurementReport::Builder getDrMeasurementReport();
  inline void setDrMeasurementReport( ::cereal::QcomGnss::DrMeasurementReport::Reader value);
  inline  ::cereal::QcomGnss::DrMeasurementReport::Builder initDrMeasurementReport();
  inline void adoptDrMeasurementReport(::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport> disownDrMeasurementReport();

  inline bool isDrSvPoly();
  inline bool hasDrSvPoly();
  inline  ::cereal::QcomGnss::DrSvPolyReport::Builder getDrSvPoly();
  inline void setDrSvPoly( ::cereal::QcomGnss::DrSvPolyReport::Reader value);
  inline  ::cereal::QcomGnss::DrSvPolyReport::Builder initDrSvPoly();
  inline void adoptDrSvPoly(::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport> disownDrSvPoly();

  inline bool isRawLog();
  inline bool hasRawLog();
  inline  ::capnp::Data::Builder getRawLog();
  inline void setRawLog( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initRawLog(unsigned int size);
  inline void adoptRawLog(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownRawLog();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::Pipeline {
public:
  typedef QcomGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementStatus::Reader {
public:
  typedef MeasurementStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSubMillisecondIsValid() const;

  inline bool getSubBitTimeIsKnown() const;

  inline bool getSatelliteTimeIsKnown() const;

  inline bool getBitEdgeConfirmedFromSignal() const;

  inline bool getMeasuredVelocity() const;

  inline bool getFineOrCoarseVelocity() const;

  inline bool getLockPointValid() const;

  inline bool getLockPointPositive() const;

  inline bool getLastUpdateFromDifference() const;

  inline bool getLastUpdateFromVelocityDifference() const;

  inline bool getStrongIndicationOfCrossCorelation() const;

  inline bool getTentativeMeasurement() const;

  inline bool getMeasurementNotUsable() const;

  inline bool getSirCheckIsNeeded() const;

  inline bool getProbationMode() const;

  inline bool getGlonassMeanderBitEdgeValid() const;

  inline bool getGlonassTimeMarkValid() const;

  inline bool getGpsRoundRobinRxDiversity() const;

  inline bool getGpsRxDiversity() const;

  inline bool getGpsLowBandwidthRxDiversityCombined() const;

  inline bool getGpsHighBandwidthNu4() const;

  inline bool getGpsHighBandwidthNu8() const;

  inline bool getGpsHighBandwidthUniform() const;

  inline bool getMultipathIndicator() const;

  inline bool getImdJammingIndicator() const;

  inline bool getLteB13TxJammingIndicator() const;

  inline bool getFreshMeasurementIndicator() const;

  inline bool getMultipathEstimateIsValid() const;

  inline bool getDirectionIsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementStatus::Builder {
public:
  typedef MeasurementStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSubMillisecondIsValid();
  inline void setSubMillisecondIsValid(bool value);

  inline bool getSubBitTimeIsKnown();
  inline void setSubBitTimeIsKnown(bool value);

  inline bool getSatelliteTimeIsKnown();
  inline void setSatelliteTimeIsKnown(bool value);

  inline bool getBitEdgeConfirmedFromSignal();
  inline void setBitEdgeConfirmedFromSignal(bool value);

  inline bool getMeasuredVelocity();
  inline void setMeasuredVelocity(bool value);

  inline bool getFineOrCoarseVelocity();
  inline void setFineOrCoarseVelocity(bool value);

  inline bool getLockPointValid();
  inline void setLockPointValid(bool value);

  inline bool getLockPointPositive();
  inline void setLockPointPositive(bool value);

  inline bool getLastUpdateFromDifference();
  inline void setLastUpdateFromDifference(bool value);

  inline bool getLastUpdateFromVelocityDifference();
  inline void setLastUpdateFromVelocityDifference(bool value);

  inline bool getStrongIndicationOfCrossCorelation();
  inline void setStrongIndicationOfCrossCorelation(bool value);

  inline bool getTentativeMeasurement();
  inline void setTentativeMeasurement(bool value);

  inline bool getMeasurementNotUsable();
  inline void setMeasurementNotUsable(bool value);

  inline bool getSirCheckIsNeeded();
  inline void setSirCheckIsNeeded(bool value);

  inline bool getProbationMode();
  inline void setProbationMode(bool value);

  inline bool getGlonassMeanderBitEdgeValid();
  inline void setGlonassMeanderBitEdgeValid(bool value);

  inline bool getGlonassTimeMarkValid();
  inline void setGlonassTimeMarkValid(bool value);

  inline bool getGpsRoundRobinRxDiversity();
  inline void setGpsRoundRobinRxDiversity(bool value);

  inline bool getGpsRxDiversity();
  inline void setGpsRxDiversity(bool value);

  inline bool getGpsLowBandwidthRxDiversityCombined();
  inline void setGpsLowBandwidthRxDiversityCombined(bool value);

  inline bool getGpsHighBandwidthNu4();
  inline void setGpsHighBandwidthNu4(bool value);

  inline bool getGpsHighBandwidthNu8();
  inline void setGpsHighBandwidthNu8(bool value);

  inline bool getGpsHighBandwidthUniform();
  inline void setGpsHighBandwidthUniform(bool value);

  inline bool getMultipathIndicator();
  inline void setMultipathIndicator(bool value);

  inline bool getImdJammingIndicator();
  inline void setImdJammingIndicator(bool value);

  inline bool getLteB13TxJammingIndicator();
  inline void setLteB13TxJammingIndicator(bool value);

  inline bool getFreshMeasurementIndicator();
  inline void setFreshMeasurementIndicator(bool value);

  inline bool getMultipathEstimateIsValid();
  inline void setMultipathEstimateIsValid(bool value);

  inline bool getDirectionIsValid();
  inline void setDirectionIsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementStatus::Pipeline {
public:
  typedef MeasurementStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementReport::Reader {
public:
  typedef MeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::QcomGnss::MeasurementSource getSource() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint8_t getGlonassCycleNumber() const;

  inline  ::uint16_t getGlonassNumberOfDays() const;

  inline  ::uint32_t getMilliseconds() const;

  inline float getTimeBias() const;

  inline float getClockTimeUncertainty() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline bool hasSv() const;
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Reader getSv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementReport::Builder {
public:
  typedef MeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::QcomGnss::MeasurementSource getSource();
  inline void setSource( ::cereal::QcomGnss::MeasurementSource value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint8_t getGlonassCycleNumber();
  inline void setGlonassCycleNumber( ::uint8_t value);

  inline  ::uint16_t getGlonassNumberOfDays();
  inline void setGlonassNumberOfDays( ::uint16_t value);

  inline  ::uint32_t getMilliseconds();
  inline void setMilliseconds( ::uint32_t value);

  inline float getTimeBias();
  inline void setTimeBias(float value);

  inline float getClockTimeUncertainty();
  inline void setClockTimeUncertainty(float value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline bool hasSv();
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Builder getSv();
  inline void setSv( ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Reader value);
  inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Builder initSv(unsigned int size);
  inline void adoptSv(::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>> disownSv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementReport::Pipeline {
public:
  typedef MeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::MeasurementReport::SV::Reader {
public:
  typedef SV Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequencyIndex() const;

  inline  ::cereal::QcomGnss::SVObservationState getObservationState() const;

  inline  ::uint8_t getObservations() const;

  inline  ::uint8_t getGoodObservations() const;

  inline  ::uint16_t getGpsParityErrorCount() const;

  inline  ::uint8_t getGlonassHemmingErrorCount() const;

  inline  ::uint8_t getFilterStages() const;

  inline  ::uint16_t getCarrierNoise() const;

  inline  ::int16_t getLatency() const;

  inline  ::uint8_t getPredetectInterval() const;

  inline  ::uint16_t getPostdetections() const;

  inline  ::uint32_t getUnfilteredMeasurementIntegral() const;

  inline float getUnfilteredMeasurementFraction() const;

  inline float getUnfilteredTimeUncertainty() const;

  inline float getUnfilteredSpeed() const;

  inline float getUnfilteredSpeedUncertainty() const;

  inline bool hasMeasurementStatus() const;
  inline  ::cereal::QcomGnss::MeasurementStatus::Reader getMeasurementStatus() const;

  inline  ::uint32_t getMultipathEstimate() const;

  inline float getAzimuth() const;

  inline float getElevation() const;

  inline  ::int32_t getCarrierPhaseCyclesIntegral() const;

  inline  ::uint16_t getCarrierPhaseCyclesFraction() const;

  inline float getFineSpeed() const;

  inline float getFineSpeedUncertainty() const;

  inline  ::uint8_t getCycleSlipCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::MeasurementReport::SV::Builder {
public:
  typedef SV Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::int8_t value);

  inline  ::cereal::QcomGnss::SVObservationState getObservationState();
  inline void setObservationState( ::cereal::QcomGnss::SVObservationState value);

  inline  ::uint8_t getObservations();
  inline void setObservations( ::uint8_t value);

  inline  ::uint8_t getGoodObservations();
  inline void setGoodObservations( ::uint8_t value);

  inline  ::uint16_t getGpsParityErrorCount();
  inline void setGpsParityErrorCount( ::uint16_t value);

  inline  ::uint8_t getGlonassHemmingErrorCount();
  inline void setGlonassHemmingErrorCount( ::uint8_t value);

  inline  ::uint8_t getFilterStages();
  inline void setFilterStages( ::uint8_t value);

  inline  ::uint16_t getCarrierNoise();
  inline void setCarrierNoise( ::uint16_t value);

  inline  ::int16_t getLatency();
  inline void setLatency( ::int16_t value);

  inline  ::uint8_t getPredetectInterval();
  inline void setPredetectInterval( ::uint8_t value);

  inline  ::uint16_t getPostdetections();
  inline void setPostdetections( ::uint16_t value);

  inline  ::uint32_t getUnfilteredMeasurementIntegral();
  inline void setUnfilteredMeasurementIntegral( ::uint32_t value);

  inline float getUnfilteredMeasurementFraction();
  inline void setUnfilteredMeasurementFraction(float value);

  inline float getUnfilteredTimeUncertainty();
  inline void setUnfilteredTimeUncertainty(float value);

  inline float getUnfilteredSpeed();
  inline void setUnfilteredSpeed(float value);

  inline float getUnfilteredSpeedUncertainty();
  inline void setUnfilteredSpeedUncertainty(float value);

  inline bool hasMeasurementStatus();
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder getMeasurementStatus();
  inline void setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value);
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder initMeasurementStatus();
  inline void adoptMeasurementStatus(::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> disownMeasurementStatus();

  inline  ::uint32_t getMultipathEstimate();
  inline void setMultipathEstimate( ::uint32_t value);

  inline float getAzimuth();
  inline void setAzimuth(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline  ::int32_t getCarrierPhaseCyclesIntegral();
  inline void setCarrierPhaseCyclesIntegral( ::int32_t value);

  inline  ::uint16_t getCarrierPhaseCyclesFraction();
  inline void setCarrierPhaseCyclesFraction( ::uint16_t value);

  inline float getFineSpeed();
  inline void setFineSpeed(float value);

  inline float getFineSpeedUncertainty();
  inline void setFineSpeedUncertainty(float value);

  inline  ::uint8_t getCycleSlipCount();
  inline void setCycleSlipCount( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::MeasurementReport::SV::Pipeline {
public:
  typedef SV Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline getMeasurementStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::ClockReport::Reader {
public:
  typedef ClockReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHasFCount() const;

  inline  ::uint32_t getFCount() const;

  inline bool getHasGpsWeek() const;

  inline  ::uint16_t getGpsWeek() const;

  inline bool getHasGpsMilliseconds() const;

  inline  ::uint32_t getGpsMilliseconds() const;

  inline float getGpsTimeBias() const;

  inline float getGpsClockTimeUncertainty() const;

  inline  ::uint8_t getGpsClockSource() const;

  inline bool getHasGlonassYear() const;

  inline  ::uint8_t getGlonassYear() const;

  inline bool getHasGlonassDay() const;

  inline  ::uint16_t getGlonassDay() const;

  inline bool getHasGlonassMilliseconds() const;

  inline  ::uint32_t getGlonassMilliseconds() const;

  inline float getGlonassTimeBias() const;

  inline float getGlonassClockTimeUncertainty() const;

  inline  ::uint8_t getGlonassClockSource() const;

  inline  ::uint16_t getBdsWeek() const;

  inline  ::uint32_t getBdsMilliseconds() const;

  inline float getBdsTimeBias() const;

  inline float getBdsClockTimeUncertainty() const;

  inline  ::uint8_t getBdsClockSource() const;

  inline  ::uint16_t getGalWeek() const;

  inline  ::uint32_t getGalMilliseconds() const;

  inline float getGalTimeBias() const;

  inline float getGalClockTimeUncertainty() const;

  inline  ::uint8_t getGalClockSource() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline  ::uint8_t getFrequencySource() const;

  inline  ::uint8_t getGpsLeapSeconds() const;

  inline  ::uint8_t getGpsLeapSecondsUncertainty() const;

  inline  ::uint8_t getGpsLeapSecondsSource() const;

  inline float getGpsToGlonassTimeBiasMilliseconds() const;

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty() const;

  inline float getGpsToBdsTimeBiasMilliseconds() const;

  inline float getGpsToBdsTimeBiasMillisecondsUncertainty() const;

  inline float getBdsToGloTimeBiasMilliseconds() const;

  inline float getBdsToGloTimeBiasMillisecondsUncertainty() const;

  inline float getGpsToGalTimeBiasMilliseconds() const;

  inline float getGpsToGalTimeBiasMillisecondsUncertainty() const;

  inline float getGalToGloTimeBiasMilliseconds() const;

  inline float getGalToGloTimeBiasMillisecondsUncertainty() const;

  inline float getGalToBdsTimeBiasMilliseconds() const;

  inline float getGalToBdsTimeBiasMillisecondsUncertainty() const;

  inline bool getHasRtcTime() const;

  inline  ::uint32_t getSystemRtcTime() const;

  inline  ::uint32_t getFCountOffset() const;

  inline  ::uint32_t getLpmRtcCount() const;

  inline  ::uint32_t getClockResets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::ClockReport::Builder {
public:
  typedef ClockReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHasFCount();
  inline void setHasFCount(bool value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline bool getHasGpsWeek();
  inline void setHasGpsWeek(bool value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline bool getHasGpsMilliseconds();
  inline void setHasGpsMilliseconds(bool value);

  inline  ::uint32_t getGpsMilliseconds();
  inline void setGpsMilliseconds( ::uint32_t value);

  inline float getGpsTimeBias();
  inline void setGpsTimeBias(float value);

  inline float getGpsClockTimeUncertainty();
  inline void setGpsClockTimeUncertainty(float value);

  inline  ::uint8_t getGpsClockSource();
  inline void setGpsClockSource( ::uint8_t value);

  inline bool getHasGlonassYear();
  inline void setHasGlonassYear(bool value);

  inline  ::uint8_t getGlonassYear();
  inline void setGlonassYear( ::uint8_t value);

  inline bool getHasGlonassDay();
  inline void setHasGlonassDay(bool value);

  inline  ::uint16_t getGlonassDay();
  inline void setGlonassDay( ::uint16_t value);

  inline bool getHasGlonassMilliseconds();
  inline void setHasGlonassMilliseconds(bool value);

  inline  ::uint32_t getGlonassMilliseconds();
  inline void setGlonassMilliseconds( ::uint32_t value);

  inline float getGlonassTimeBias();
  inline void setGlonassTimeBias(float value);

  inline float getGlonassClockTimeUncertainty();
  inline void setGlonassClockTimeUncertainty(float value);

  inline  ::uint8_t getGlonassClockSource();
  inline void setGlonassClockSource( ::uint8_t value);

  inline  ::uint16_t getBdsWeek();
  inline void setBdsWeek( ::uint16_t value);

  inline  ::uint32_t getBdsMilliseconds();
  inline void setBdsMilliseconds( ::uint32_t value);

  inline float getBdsTimeBias();
  inline void setBdsTimeBias(float value);

  inline float getBdsClockTimeUncertainty();
  inline void setBdsClockTimeUncertainty(float value);

  inline  ::uint8_t getBdsClockSource();
  inline void setBdsClockSource( ::uint8_t value);

  inline  ::uint16_t getGalWeek();
  inline void setGalWeek( ::uint16_t value);

  inline  ::uint32_t getGalMilliseconds();
  inline void setGalMilliseconds( ::uint32_t value);

  inline float getGalTimeBias();
  inline void setGalTimeBias(float value);

  inline float getGalClockTimeUncertainty();
  inline void setGalClockTimeUncertainty(float value);

  inline  ::uint8_t getGalClockSource();
  inline void setGalClockSource( ::uint8_t value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline  ::uint8_t getFrequencySource();
  inline void setFrequencySource( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSeconds();
  inline void setGpsLeapSeconds( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsUncertainty();
  inline void setGpsLeapSecondsUncertainty( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsSource();
  inline void setGpsLeapSecondsSource( ::uint8_t value);

  inline float getGpsToGlonassTimeBiasMilliseconds();
  inline void setGpsToGlonassTimeBiasMilliseconds(float value);

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty();
  inline void setGpsToGlonassTimeBiasMillisecondsUncertainty(float value);

  inline float getGpsToBdsTimeBiasMilliseconds();
  inline void setGpsToBdsTimeBiasMilliseconds(float value);

  inline float getGpsToBdsTimeBiasMillisecondsUncertainty();
  inline void setGpsToBdsTimeBiasMillisecondsUncertainty(float value);

  inline float getBdsToGloTimeBiasMilliseconds();
  inline void setBdsToGloTimeBiasMilliseconds(float value);

  inline float getBdsToGloTimeBiasMillisecondsUncertainty();
  inline void setBdsToGloTimeBiasMillisecondsUncertainty(float value);

  inline float getGpsToGalTimeBiasMilliseconds();
  inline void setGpsToGalTimeBiasMilliseconds(float value);

  inline float getGpsToGalTimeBiasMillisecondsUncertainty();
  inline void setGpsToGalTimeBiasMillisecondsUncertainty(float value);

  inline float getGalToGloTimeBiasMilliseconds();
  inline void setGalToGloTimeBiasMilliseconds(float value);

  inline float getGalToGloTimeBiasMillisecondsUncertainty();
  inline void setGalToGloTimeBiasMillisecondsUncertainty(float value);

  inline float getGalToBdsTimeBiasMilliseconds();
  inline void setGalToBdsTimeBiasMilliseconds(float value);

  inline float getGalToBdsTimeBiasMillisecondsUncertainty();
  inline void setGalToBdsTimeBiasMillisecondsUncertainty(float value);

  inline bool getHasRtcTime();
  inline void setHasRtcTime(bool value);

  inline  ::uint32_t getSystemRtcTime();
  inline void setSystemRtcTime( ::uint32_t value);

  inline  ::uint32_t getFCountOffset();
  inline void setFCountOffset( ::uint32_t value);

  inline  ::uint32_t getLpmRtcCount();
  inline void setLpmRtcCount( ::uint32_t value);

  inline  ::uint32_t getClockResets();
  inline void setClockResets( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::ClockReport::Pipeline {
public:
  typedef ClockReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrMeasurementReport::Reader {
public:
  typedef DrMeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReason() const;

  inline  ::uint8_t getSeqNum() const;

  inline  ::uint8_t getSeqMax() const;

  inline  ::uint16_t getRfLoss() const;

  inline bool getSystemRtcValid() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint32_t getClockResets() const;

  inline  ::uint64_t getSystemRtcTime() const;

  inline  ::uint8_t getGpsLeapSeconds() const;

  inline  ::uint8_t getGpsLeapSecondsUncertainty() const;

  inline float getGpsToGlonassTimeBiasMilliseconds() const;

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint32_t getGpsMilliseconds() const;

  inline  ::uint32_t getGpsTimeBiasMs() const;

  inline  ::uint32_t getGpsClockTimeUncertaintyMs() const;

  inline  ::uint8_t getGpsClockSource() const;

  inline  ::uint8_t getGlonassClockSource() const;

  inline  ::uint8_t getGlonassYear() const;

  inline  ::uint16_t getGlonassDay() const;

  inline  ::uint32_t getGlonassMilliseconds() const;

  inline float getGlonassTimeBias() const;

  inline float getGlonassClockTimeUncertainty() const;

  inline float getClockFrequencyBias() const;

  inline float getClockFrequencyUncertainty() const;

  inline  ::uint8_t getFrequencySource() const;

  inline  ::cereal::QcomGnss::MeasurementSource getSource() const;

  inline bool hasSv() const;
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Reader getSv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrMeasurementReport::Builder {
public:
  typedef DrMeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReason();
  inline void setReason( ::uint8_t value);

  inline  ::uint8_t getSeqNum();
  inline void setSeqNum( ::uint8_t value);

  inline  ::uint8_t getSeqMax();
  inline void setSeqMax( ::uint8_t value);

  inline  ::uint16_t getRfLoss();
  inline void setRfLoss( ::uint16_t value);

  inline bool getSystemRtcValid();
  inline void setSystemRtcValid(bool value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint32_t getClockResets();
  inline void setClockResets( ::uint32_t value);

  inline  ::uint64_t getSystemRtcTime();
  inline void setSystemRtcTime( ::uint64_t value);

  inline  ::uint8_t getGpsLeapSeconds();
  inline void setGpsLeapSeconds( ::uint8_t value);

  inline  ::uint8_t getGpsLeapSecondsUncertainty();
  inline void setGpsLeapSecondsUncertainty( ::uint8_t value);

  inline float getGpsToGlonassTimeBiasMilliseconds();
  inline void setGpsToGlonassTimeBiasMilliseconds(float value);

  inline float getGpsToGlonassTimeBiasMillisecondsUncertainty();
  inline void setGpsToGlonassTimeBiasMillisecondsUncertainty(float value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint32_t getGpsMilliseconds();
  inline void setGpsMilliseconds( ::uint32_t value);

  inline  ::uint32_t getGpsTimeBiasMs();
  inline void setGpsTimeBiasMs( ::uint32_t value);

  inline  ::uint32_t getGpsClockTimeUncertaintyMs();
  inline void setGpsClockTimeUncertaintyMs( ::uint32_t value);

  inline  ::uint8_t getGpsClockSource();
  inline void setGpsClockSource( ::uint8_t value);

  inline  ::uint8_t getGlonassClockSource();
  inline void setGlonassClockSource( ::uint8_t value);

  inline  ::uint8_t getGlonassYear();
  inline void setGlonassYear( ::uint8_t value);

  inline  ::uint16_t getGlonassDay();
  inline void setGlonassDay( ::uint16_t value);

  inline  ::uint32_t getGlonassMilliseconds();
  inline void setGlonassMilliseconds( ::uint32_t value);

  inline float getGlonassTimeBias();
  inline void setGlonassTimeBias(float value);

  inline float getGlonassClockTimeUncertainty();
  inline void setGlonassClockTimeUncertainty(float value);

  inline float getClockFrequencyBias();
  inline void setClockFrequencyBias(float value);

  inline float getClockFrequencyUncertainty();
  inline void setClockFrequencyUncertainty(float value);

  inline  ::uint8_t getFrequencySource();
  inline void setFrequencySource( ::uint8_t value);

  inline  ::cereal::QcomGnss::MeasurementSource getSource();
  inline void setSource( ::cereal::QcomGnss::MeasurementSource value);

  inline bool hasSv();
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Builder getSv();
  inline void setSv( ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Reader value);
  inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Builder initSv(unsigned int size);
  inline void adoptSv(::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>> disownSv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrMeasurementReport::Pipeline {
public:
  typedef DrMeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrMeasurementReport::SV::Reader {
public:
  typedef SV Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline  ::int8_t getGlonassFrequencyIndex() const;

  inline  ::cereal::QcomGnss::SVObservationState getObservationState() const;

  inline  ::uint8_t getObservations() const;

  inline  ::uint8_t getGoodObservations() const;

  inline  ::uint8_t getFilterStages() const;

  inline  ::uint8_t getPredetectInterval() const;

  inline  ::uint8_t getCycleSlipCount() const;

  inline  ::uint16_t getPostdetections() const;

  inline bool hasMeasurementStatus() const;
  inline  ::cereal::QcomGnss::MeasurementStatus::Reader getMeasurementStatus() const;

  inline  ::uint16_t getCarrierNoise() const;

  inline  ::uint16_t getRfLoss() const;

  inline  ::int16_t getLatency() const;

  inline float getFilteredMeasurementFraction() const;

  inline  ::uint32_t getFilteredMeasurementIntegral() const;

  inline float getFilteredTimeUncertainty() const;

  inline float getFilteredSpeed() const;

  inline float getFilteredSpeedUncertainty() const;

  inline float getUnfilteredMeasurementFraction() const;

  inline  ::uint32_t getUnfilteredMeasurementIntegral() const;

  inline float getUnfilteredTimeUncertainty() const;

  inline float getUnfilteredSpeed() const;

  inline float getUnfilteredSpeedUncertainty() const;

  inline  ::uint32_t getMultipathEstimate() const;

  inline float getAzimuth() const;

  inline float getElevation() const;

  inline float getDopplerAcceleration() const;

  inline float getFineSpeed() const;

  inline float getFineSpeedUncertainty() const;

  inline double getCarrierPhase() const;

  inline  ::uint32_t getFCount() const;

  inline  ::uint16_t getParityErrorCount() const;

  inline bool getGoodParity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrMeasurementReport::SV::Builder {
public:
  typedef SV Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline  ::int8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::int8_t value);

  inline  ::cereal::QcomGnss::SVObservationState getObservationState();
  inline void setObservationState( ::cereal::QcomGnss::SVObservationState value);

  inline  ::uint8_t getObservations();
  inline void setObservations( ::uint8_t value);

  inline  ::uint8_t getGoodObservations();
  inline void setGoodObservations( ::uint8_t value);

  inline  ::uint8_t getFilterStages();
  inline void setFilterStages( ::uint8_t value);

  inline  ::uint8_t getPredetectInterval();
  inline void setPredetectInterval( ::uint8_t value);

  inline  ::uint8_t getCycleSlipCount();
  inline void setCycleSlipCount( ::uint8_t value);

  inline  ::uint16_t getPostdetections();
  inline void setPostdetections( ::uint16_t value);

  inline bool hasMeasurementStatus();
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder getMeasurementStatus();
  inline void setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value);
  inline  ::cereal::QcomGnss::MeasurementStatus::Builder initMeasurementStatus();
  inline void adoptMeasurementStatus(::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> disownMeasurementStatus();

  inline  ::uint16_t getCarrierNoise();
  inline void setCarrierNoise( ::uint16_t value);

  inline  ::uint16_t getRfLoss();
  inline void setRfLoss( ::uint16_t value);

  inline  ::int16_t getLatency();
  inline void setLatency( ::int16_t value);

  inline float getFilteredMeasurementFraction();
  inline void setFilteredMeasurementFraction(float value);

  inline  ::uint32_t getFilteredMeasurementIntegral();
  inline void setFilteredMeasurementIntegral( ::uint32_t value);

  inline float getFilteredTimeUncertainty();
  inline void setFilteredTimeUncertainty(float value);

  inline float getFilteredSpeed();
  inline void setFilteredSpeed(float value);

  inline float getFilteredSpeedUncertainty();
  inline void setFilteredSpeedUncertainty(float value);

  inline float getUnfilteredMeasurementFraction();
  inline void setUnfilteredMeasurementFraction(float value);

  inline  ::uint32_t getUnfilteredMeasurementIntegral();
  inline void setUnfilteredMeasurementIntegral( ::uint32_t value);

  inline float getUnfilteredTimeUncertainty();
  inline void setUnfilteredTimeUncertainty(float value);

  inline float getUnfilteredSpeed();
  inline void setUnfilteredSpeed(float value);

  inline float getUnfilteredSpeedUncertainty();
  inline void setUnfilteredSpeedUncertainty(float value);

  inline  ::uint32_t getMultipathEstimate();
  inline void setMultipathEstimate( ::uint32_t value);

  inline float getAzimuth();
  inline void setAzimuth(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline float getDopplerAcceleration();
  inline void setDopplerAcceleration(float value);

  inline float getFineSpeed();
  inline void setFineSpeed(float value);

  inline float getFineSpeedUncertainty();
  inline void setFineSpeedUncertainty(float value);

  inline double getCarrierPhase();
  inline void setCarrierPhase(double value);

  inline  ::uint32_t getFCount();
  inline void setFCount( ::uint32_t value);

  inline  ::uint16_t getParityErrorCount();
  inline void setParityErrorCount( ::uint16_t value);

  inline bool getGoodParity();
  inline void setGoodParity(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrMeasurementReport::SV::Pipeline {
public:
  typedef SV Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline getMeasurementStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QcomGnss::DrSvPolyReport::Reader {
public:
  typedef DrSvPolyReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::int8_t getFrequencyIndex() const;

  inline bool getHasPosition() const;

  inline bool getHasIono() const;

  inline bool getHasTropo() const;

  inline bool getHasElevation() const;

  inline bool getPolyFromXtra() const;

  inline bool getHasSbasIono() const;

  inline  ::uint16_t getIode() const;

  inline double getT0() const;

  inline bool hasXyz0() const;
  inline  ::capnp::List<double>::Reader getXyz0() const;

  inline bool hasXyzN() const;
  inline  ::capnp::List<double>::Reader getXyzN() const;

  inline bool hasOther() const;
  inline  ::capnp::List<float>::Reader getOther() const;

  inline float getPositionUncertainty() const;

  inline float getIonoDelay() const;

  inline float getIonoDot() const;

  inline float getSbasIonoDelay() const;

  inline float getSbasIonoDot() const;

  inline float getTropoDelay() const;

  inline float getElevation() const;

  inline float getElevationDot() const;

  inline float getElevationUncertainty() const;

  inline bool hasVelocityCoeff() const;
  inline  ::capnp::List<double>::Reader getVelocityCoeff() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QcomGnss::DrSvPolyReport::Builder {
public:
  typedef DrSvPolyReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::int8_t getFrequencyIndex();
  inline void setFrequencyIndex( ::int8_t value);

  inline bool getHasPosition();
  inline void setHasPosition(bool value);

  inline bool getHasIono();
  inline void setHasIono(bool value);

  inline bool getHasTropo();
  inline void setHasTropo(bool value);

  inline bool getHasElevation();
  inline void setHasElevation(bool value);

  inline bool getPolyFromXtra();
  inline void setPolyFromXtra(bool value);

  inline bool getHasSbasIono();
  inline void setHasSbasIono(bool value);

  inline  ::uint16_t getIode();
  inline void setIode( ::uint16_t value);

  inline double getT0();
  inline void setT0(double value);

  inline bool hasXyz0();
  inline  ::capnp::List<double>::Builder getXyz0();
  inline void setXyz0( ::capnp::List<double>::Reader value);
  inline void setXyz0(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initXyz0(unsigned int size);
  inline void adoptXyz0(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownXyz0();

  inline bool hasXyzN();
  inline  ::capnp::List<double>::Builder getXyzN();
  inline void setXyzN( ::capnp::List<double>::Reader value);
  inline void setXyzN(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initXyzN(unsigned int size);
  inline void adoptXyzN(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownXyzN();

  inline bool hasOther();
  inline  ::capnp::List<float>::Builder getOther();
  inline void setOther( ::capnp::List<float>::Reader value);
  inline void setOther(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initOther(unsigned int size);
  inline void adoptOther(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownOther();

  inline float getPositionUncertainty();
  inline void setPositionUncertainty(float value);

  inline float getIonoDelay();
  inline void setIonoDelay(float value);

  inline float getIonoDot();
  inline void setIonoDot(float value);

  inline float getSbasIonoDelay();
  inline void setSbasIonoDelay(float value);

  inline float getSbasIonoDot();
  inline void setSbasIonoDot(float value);

  inline float getTropoDelay();
  inline void setTropoDelay(float value);

  inline float getElevation();
  inline void setElevation(float value);

  inline float getElevationDot();
  inline void setElevationDot(float value);

  inline float getElevationUncertainty();
  inline void setElevationUncertainty(float value);

  inline bool hasVelocityCoeff();
  inline  ::capnp::List<double>::Builder getVelocityCoeff();
  inline void setVelocityCoeff( ::capnp::List<double>::Reader value);
  inline void setVelocityCoeff(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initVelocityCoeff(unsigned int size);
  inline void adoptVelocityCoeff(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownVelocityCoeff();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QcomGnss::DrSvPolyReport::Pipeline {
public:
  typedef DrSvPolyReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LidarPts::Reader {
public:
  typedef LidarPts Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasR() const;
  inline  ::capnp::List< ::uint16_t>::Reader getR() const;

  inline bool hasTheta() const;
  inline  ::capnp::List< ::uint16_t>::Reader getTheta() const;

  inline bool hasReflect() const;
  inline  ::capnp::List< ::uint8_t>::Reader getReflect() const;

  inline  ::uint64_t getIdx() const;

  inline bool hasPkt() const;
  inline  ::capnp::Data::Reader getPkt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LidarPts::Builder {
public:
  typedef LidarPts Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasR();
  inline  ::capnp::List< ::uint16_t>::Builder getR();
  inline void setR( ::capnp::List< ::uint16_t>::Reader value);
  inline void setR(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initR(unsigned int size);
  inline void adoptR(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownR();

  inline bool hasTheta();
  inline  ::capnp::List< ::uint16_t>::Builder getTheta();
  inline void setTheta( ::capnp::List< ::uint16_t>::Reader value);
  inline void setTheta(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initTheta(unsigned int size);
  inline void adoptTheta(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownTheta();

  inline bool hasReflect();
  inline  ::capnp::List< ::uint8_t>::Builder getReflect();
  inline void setReflect( ::capnp::List< ::uint8_t>::Reader value);
  inline void setReflect(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initReflect(unsigned int size);
  inline void adoptReflect(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownReflect();

  inline  ::uint64_t getIdx();
  inline void setIdx( ::uint64_t value);

  inline bool hasPkt();
  inline  ::capnp::Data::Builder getPkt();
  inline void setPkt( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPkt(unsigned int size);
  inline void adoptPkt(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPkt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LidarPts::Pipeline {
public:
  typedef LidarPts Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Reader {
public:
  typedef ProcLog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes() const;
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Reader getCpuTimes() const;

  inline bool hasMem() const;
  inline  ::cereal::ProcLog::Mem::Reader getMem() const;

  inline bool hasProcs() const;
  inline  ::capnp::List< ::cereal::ProcLog::Process>::Reader getProcs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Builder {
public:
  typedef ProcLog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCpuTimes();
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Builder getCpuTimes();
  inline void setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Builder initCpuTimes(unsigned int size);
  inline void adoptCpuTimes(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes>> disownCpuTimes();

  inline bool hasMem();
  inline  ::cereal::ProcLog::Mem::Builder getMem();
  inline void setMem( ::cereal::ProcLog::Mem::Reader value);
  inline  ::cereal::ProcLog::Mem::Builder initMem();
  inline void adoptMem(::capnp::Orphan< ::cereal::ProcLog::Mem>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog::Mem> disownMem();

  inline bool hasProcs();
  inline  ::capnp::List< ::cereal::ProcLog::Process>::Builder getProcs();
  inline void setProcs( ::capnp::List< ::cereal::ProcLog::Process>::Reader value);
  inline  ::capnp::List< ::cereal::ProcLog::Process>::Builder initProcs(unsigned int size);
  inline void adoptProcs(::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process>> disownProcs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Pipeline {
public:
  typedef ProcLog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ProcLog::Mem::Pipeline getMem();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Process::Reader {
public:
  typedef Process Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint8_t getState() const;

  inline  ::int32_t getPpid() const;

  inline float getCpuUser() const;

  inline float getCpuSystem() const;

  inline float getCpuChildrenUser() const;

  inline float getCpuChildrenSystem() const;

  inline  ::int64_t getPriority() const;

  inline  ::int32_t getNice() const;

  inline  ::int32_t getNumThreads() const;

  inline double getStartTime() const;

  inline  ::uint64_t getMemVms() const;

  inline  ::uint64_t getMemRss() const;

  inline  ::int32_t getProcessor() const;

  inline bool hasCmdline() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getCmdline() const;

  inline bool hasExe() const;
  inline  ::capnp::Text::Reader getExe() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Process::Builder {
public:
  typedef Process Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint8_t getState();
  inline void setState( ::uint8_t value);

  inline  ::int32_t getPpid();
  inline void setPpid( ::int32_t value);

  inline float getCpuUser();
  inline void setCpuUser(float value);

  inline float getCpuSystem();
  inline void setCpuSystem(float value);

  inline float getCpuChildrenUser();
  inline void setCpuChildrenUser(float value);

  inline float getCpuChildrenSystem();
  inline void setCpuChildrenSystem(float value);

  inline  ::int64_t getPriority();
  inline void setPriority( ::int64_t value);

  inline  ::int32_t getNice();
  inline void setNice( ::int32_t value);

  inline  ::int32_t getNumThreads();
  inline void setNumThreads( ::int32_t value);

  inline double getStartTime();
  inline void setStartTime(double value);

  inline  ::uint64_t getMemVms();
  inline void setMemVms( ::uint64_t value);

  inline  ::uint64_t getMemRss();
  inline void setMemRss( ::uint64_t value);

  inline  ::int32_t getProcessor();
  inline void setProcessor( ::int32_t value);

  inline bool hasCmdline();
  inline  ::capnp::List< ::capnp::Text>::Builder getCmdline();
  inline void setCmdline( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initCmdline(unsigned int size);
  inline void adoptCmdline(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownCmdline();

  inline bool hasExe();
  inline  ::capnp::Text::Builder getExe();
  inline void setExe( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExe(unsigned int size);
  inline void adoptExe(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExe();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Process::Pipeline {
public:
  typedef Process Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::CPUTimes::Reader {
public:
  typedef CPUTimes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum() const;

  inline float getUser() const;

  inline float getNice() const;

  inline float getSystem() const;

  inline float getIdle() const;

  inline float getIowait() const;

  inline float getIrq() const;

  inline float getSoftirq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::CPUTimes::Builder {
public:
  typedef CPUTimes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCpuNum();
  inline void setCpuNum( ::int64_t value);

  inline float getUser();
  inline void setUser(float value);

  inline float getNice();
  inline void setNice(float value);

  inline float getSystem();
  inline void setSystem(float value);

  inline float getIdle();
  inline void setIdle(float value);

  inline float getIowait();
  inline void setIowait(float value);

  inline float getIrq();
  inline void setIrq(float value);

  inline float getSoftirq();
  inline void setSoftirq(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::CPUTimes::Pipeline {
public:
  typedef CPUTimes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProcLog::Mem::Reader {
public:
  typedef Mem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal() const;

  inline  ::uint64_t getFree() const;

  inline  ::uint64_t getAvailable() const;

  inline  ::uint64_t getBuffers() const;

  inline  ::uint64_t getCached() const;

  inline  ::uint64_t getActive() const;

  inline  ::uint64_t getInactive() const;

  inline  ::uint64_t getShared() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcLog::Mem::Builder {
public:
  typedef Mem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTotal();
  inline void setTotal( ::uint64_t value);

  inline  ::uint64_t getFree();
  inline void setFree( ::uint64_t value);

  inline  ::uint64_t getAvailable();
  inline void setAvailable( ::uint64_t value);

  inline  ::uint64_t getBuffers();
  inline void setBuffers( ::uint64_t value);

  inline  ::uint64_t getCached();
  inline void setCached( ::uint64_t value);

  inline  ::uint64_t getActive();
  inline void setActive( ::uint64_t value);

  inline  ::uint64_t getInactive();
  inline void setInactive( ::uint64_t value);

  inline  ::uint64_t getShared();
  inline void setShared( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcLog::Mem::Pipeline {
public:
  typedef Mem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Reader {
public:
  typedef UbloxGnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMeasurementReport() const;
  inline bool hasMeasurementReport() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Reader getMeasurementReport() const;

  inline bool isEphemeris() const;
  inline bool hasEphemeris() const;
  inline  ::cereal::UbloxGnss::Ephemeris::Reader getEphemeris() const;

  inline bool isIonoData() const;
  inline bool hasIonoData() const;
  inline  ::cereal::UbloxGnss::IonoData::Reader getIonoData() const;

  inline bool isHwStatus() const;
  inline bool hasHwStatus() const;
  inline  ::cereal::UbloxGnss::HwStatus::Reader getHwStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Builder {
public:
  typedef UbloxGnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMeasurementReport();
  inline bool hasMeasurementReport();
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder getMeasurementReport();
  inline void setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Builder initMeasurementReport();
  inline void adoptMeasurementReport(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> disownMeasurementReport();

  inline bool isEphemeris();
  inline bool hasEphemeris();
  inline  ::cereal::UbloxGnss::Ephemeris::Builder getEphemeris();
  inline void setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value);
  inline  ::cereal::UbloxGnss::Ephemeris::Builder initEphemeris();
  inline void adoptEphemeris(::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> disownEphemeris();

  inline bool isIonoData();
  inline bool hasIonoData();
  inline  ::cereal::UbloxGnss::IonoData::Builder getIonoData();
  inline void setIonoData( ::cereal::UbloxGnss::IonoData::Reader value);
  inline  ::cereal::UbloxGnss::IonoData::Builder initIonoData();
  inline void adoptIonoData(::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> disownIonoData();

  inline bool isHwStatus();
  inline bool hasHwStatus();
  inline  ::cereal::UbloxGnss::HwStatus::Builder getHwStatus();
  inline void setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value);
  inline  ::cereal::UbloxGnss::HwStatus::Builder initHwStatus();
  inline void adoptHwStatus(::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> disownHwStatus();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Pipeline {
public:
  typedef UbloxGnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Reader {
public:
  typedef MeasurementReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRcvTow() const;

  inline  ::uint16_t getGpsWeek() const;

  inline  ::uint16_t getLeapSeconds() const;

  inline bool hasReceiverStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader getReceiverStatus() const;

  inline  ::uint8_t getNumMeas() const;

  inline bool hasMeasurements() const;
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Reader getMeasurements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Builder {
public:
  typedef MeasurementReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRcvTow();
  inline void setRcvTow(double value);

  inline  ::uint16_t getGpsWeek();
  inline void setGpsWeek( ::uint16_t value);

  inline  ::uint16_t getLeapSeconds();
  inline void setLeapSeconds( ::uint16_t value);

  inline bool hasReceiverStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder getReceiverStatus();
  inline void setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder initReceiverStatus();
  inline void adoptReceiverStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> disownReceiverStatus();

  inline  ::uint8_t getNumMeas();
  inline void setNumMeas( ::uint8_t value);

  inline bool hasMeasurements();
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Builder getMeasurements();
  inline void setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Reader value);
  inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Builder initMeasurements(unsigned int size);
  inline void adoptMeasurements(::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>> disownMeasurements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Pipeline {
public:
  typedef MeasurementReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline getReceiverStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::ReceiverStatus::Reader {
public:
  typedef ReceiverStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid() const;

  inline bool getClkReset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::ReceiverStatus::Builder {
public:
  typedef ReceiverStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLeapSecValid();
  inline void setLeapSecValid(bool value);

  inline bool getClkReset();
  inline void setClkReset(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline {
public:
  typedef ReceiverStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::Reader {
public:
  typedef Measurement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId() const;

  inline bool hasTrackingStatus() const;
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader getTrackingStatus() const;

  inline double getPseudorange() const;

  inline double getCarrierCycles() const;

  inline float getDoppler() const;

  inline  ::uint8_t getGnssId() const;

  inline  ::uint8_t getGlonassFrequencyIndex() const;

  inline  ::uint16_t getLocktime() const;

  inline  ::uint8_t getCno() const;

  inline float getPseudorangeStdev() const;

  inline float getCarrierPhaseStdev() const;

  inline float getDopplerStdev() const;

  inline  ::uint8_t getSigId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::Builder {
public:
  typedef Measurement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSvId();
  inline void setSvId( ::uint8_t value);

  inline bool hasTrackingStatus();
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder getTrackingStatus();
  inline void setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value);
  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder initTrackingStatus();
  inline void adoptTrackingStatus(::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> disownTrackingStatus();

  inline double getPseudorange();
  inline void setPseudorange(double value);

  inline double getCarrierCycles();
  inline void setCarrierCycles(double value);

  inline float getDoppler();
  inline void setDoppler(float value);

  inline  ::uint8_t getGnssId();
  inline void setGnssId( ::uint8_t value);

  inline  ::uint8_t getGlonassFrequencyIndex();
  inline void setGlonassFrequencyIndex( ::uint8_t value);

  inline  ::uint16_t getLocktime();
  inline void setLocktime( ::uint16_t value);

  inline  ::uint8_t getCno();
  inline void setCno( ::uint8_t value);

  inline float getPseudorangeStdev();
  inline void setPseudorangeStdev(float value);

  inline float getCarrierPhaseStdev();
  inline void setCarrierPhaseStdev(float value);

  inline float getDopplerStdev();
  inline void setDopplerStdev(float value);

  inline  ::uint8_t getSigId();
  inline void setSigId( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::Pipeline {
public:
  typedef Measurement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline getTrackingStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader {
public:
  typedef TrackingStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid() const;

  inline bool getCarrierPhaseValid() const;

  inline bool getHalfCycleValid() const;

  inline bool getHalfCycleSubtracted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder {
public:
  typedef TrackingStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPseudorangeValid();
  inline void setPseudorangeValid(bool value);

  inline bool getCarrierPhaseValid();
  inline void setCarrierPhaseValid(bool value);

  inline bool getHalfCycleValid();
  inline void setHalfCycleValid(bool value);

  inline bool getHalfCycleSubtracted();
  inline void setHalfCycleSubtracted(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline {
public:
  typedef TrackingStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::Ephemeris::Reader {
public:
  typedef Ephemeris Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId() const;

  inline  ::uint16_t getYear() const;

  inline  ::uint16_t getMonth() const;

  inline  ::uint16_t getDay() const;

  inline  ::uint16_t getHour() const;

  inline  ::uint16_t getMinute() const;

  inline float getSecond() const;

  inline double getAf0() const;

  inline double getAf1() const;

  inline double getAf2() const;

  inline double getIode() const;

  inline double getCrs() const;

  inline double getDeltaN() const;

  inline double getM0() const;

  inline double getCuc() const;

  inline double getEcc() const;

  inline double getCus() const;

  inline double getA() const;

  inline double getToe() const;

  inline double getCic() const;

  inline double getOmega0() const;

  inline double getCis() const;

  inline double getI0() const;

  inline double getCrc() const;

  inline double getOmega() const;

  inline double getOmegaDot() const;

  inline double getIDot() const;

  inline double getCodesL2() const;

  inline double getGpsWeek() const;

  inline double getL2() const;

  inline double getSvAcc() const;

  inline double getSvHealth() const;

  inline double getTgd() const;

  inline double getIodc() const;

  inline double getTransmissionTime() const;

  inline double getFitInterval() const;

  inline double getToc() const;

  inline bool getIonoCoeffsValid() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double>::Reader getIonoBeta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::Ephemeris::Builder {
public:
  typedef Ephemeris Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getSvId();
  inline void setSvId( ::uint16_t value);

  inline  ::uint16_t getYear();
  inline void setYear( ::uint16_t value);

  inline  ::uint16_t getMonth();
  inline void setMonth( ::uint16_t value);

  inline  ::uint16_t getDay();
  inline void setDay( ::uint16_t value);

  inline  ::uint16_t getHour();
  inline void setHour( ::uint16_t value);

  inline  ::uint16_t getMinute();
  inline void setMinute( ::uint16_t value);

  inline float getSecond();
  inline void setSecond(float value);

  inline double getAf0();
  inline void setAf0(double value);

  inline double getAf1();
  inline void setAf1(double value);

  inline double getAf2();
  inline void setAf2(double value);

  inline double getIode();
  inline void setIode(double value);

  inline double getCrs();
  inline void setCrs(double value);

  inline double getDeltaN();
  inline void setDeltaN(double value);

  inline double getM0();
  inline void setM0(double value);

  inline double getCuc();
  inline void setCuc(double value);

  inline double getEcc();
  inline void setEcc(double value);

  inline double getCus();
  inline void setCus(double value);

  inline double getA();
  inline void setA(double value);

  inline double getToe();
  inline void setToe(double value);

  inline double getCic();
  inline void setCic(double value);

  inline double getOmega0();
  inline void setOmega0(double value);

  inline double getCis();
  inline void setCis(double value);

  inline double getI0();
  inline void setI0(double value);

  inline double getCrc();
  inline void setCrc(double value);

  inline double getOmega();
  inline void setOmega(double value);

  inline double getOmegaDot();
  inline void setOmegaDot(double value);

  inline double getIDot();
  inline void setIDot(double value);

  inline double getCodesL2();
  inline void setCodesL2(double value);

  inline double getGpsWeek();
  inline void setGpsWeek(double value);

  inline double getL2();
  inline void setL2(double value);

  inline double getSvAcc();
  inline void setSvAcc(double value);

  inline double getSvHealth();
  inline void setSvHealth(double value);

  inline double getTgd();
  inline void setTgd(double value);

  inline double getIodc();
  inline void setIodc(double value);

  inline double getTransmissionTime();
  inline void setTransmissionTime(double value);

  inline double getFitInterval();
  inline void setFitInterval(double value);

  inline double getToc();
  inline void setToc(double value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownIonoBeta();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::Ephemeris::Pipeline {
public:
  typedef Ephemeris Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::IonoData::Reader {
public:
  typedef IonoData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth() const;

  inline double getTow() const;

  inline double getGpsWeek() const;

  inline bool hasIonoAlpha() const;
  inline  ::capnp::List<double>::Reader getIonoAlpha() const;

  inline bool hasIonoBeta() const;
  inline  ::capnp::List<double>::Reader getIonoBeta() const;

  inline bool getHealthValid() const;

  inline bool getIonoCoeffsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::IonoData::Builder {
public:
  typedef IonoData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSvHealth();
  inline void setSvHealth( ::uint32_t value);

  inline double getTow();
  inline void setTow(double value);

  inline double getGpsWeek();
  inline void setGpsWeek(double value);

  inline bool hasIonoAlpha();
  inline  ::capnp::List<double>::Builder getIonoAlpha();
  inline void setIonoAlpha( ::capnp::List<double>::Reader value);
  inline void setIonoAlpha(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initIonoAlpha(unsigned int size);
  inline void adoptIonoAlpha(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownIonoAlpha();

  inline bool hasIonoBeta();
  inline  ::capnp::List<double>::Builder getIonoBeta();
  inline void setIonoBeta( ::capnp::List<double>::Reader value);
  inline void setIonoBeta(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initIonoBeta(unsigned int size);
  inline void adoptIonoBeta(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownIonoBeta();

  inline bool getHealthValid();
  inline void setHealthValid(bool value);

  inline bool getIonoCoeffsValid();
  inline void setIonoCoeffsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::IonoData::Pipeline {
public:
  typedef IonoData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UbloxGnss::HwStatus::Reader {
public:
  typedef HwStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS() const;

  inline  ::uint16_t getAgcCnt() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus() const;

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower() const;

  inline  ::uint8_t getJamInd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UbloxGnss::HwStatus::Builder {
public:
  typedef HwStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getNoisePerMS();
  inline void setNoisePerMS( ::uint16_t value);

  inline  ::uint16_t getAgcCnt();
  inline void setAgcCnt( ::uint16_t value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState getAStatus();
  inline void setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value);

  inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus getAPower();
  inline void setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value);

  inline  ::uint8_t getJamInd();
  inline void setJamInd( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UbloxGnss::HwStatus::Pipeline {
public:
  typedef HwStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Clocks::Reader {
public:
  typedef Clocks Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanos() const;

  inline  ::uint64_t getMonotonicNanos() const;

  inline  ::uint64_t getMonotonicRawNanos() const;

  inline  ::uint64_t getWallTimeNanos() const;

  inline  ::uint64_t getModemUptimeMillis() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Clocks::Builder {
public:
  typedef Clocks Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getBootTimeNanos();
  inline void setBootTimeNanos( ::uint64_t value);

  inline  ::uint64_t getMonotonicNanos();
  inline void setMonotonicNanos( ::uint64_t value);

  inline  ::uint64_t getMonotonicRawNanos();
  inline void setMonotonicRawNanos( ::uint64_t value);

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline  ::uint64_t getModemUptimeMillis();
  inline void setModemUptimeMillis( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Clocks::Pipeline {
public:
  typedef Clocks Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMpcData::Reader {
public:
  typedef LiveMpcData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::capnp::List<float>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<float>::Reader getY() const;

  inline bool hasPsi() const;
  inline  ::capnp::List<float>::Reader getPsi() const;

  inline bool hasDelta() const;
  inline  ::capnp::List<float>::Reader getDelta() const;

  inline  ::uint32_t getQpIterations() const;

  inline  ::uint64_t getCalculationTime() const;

  inline double getCost() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMpcData::Builder {
public:
  typedef LiveMpcData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::capnp::List<float>::Builder getX();
  inline void setX( ::capnp::List<float>::Reader value);
  inline void setX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownX();

  inline bool hasY();
  inline  ::capnp::List<float>::Builder getY();
  inline void setY( ::capnp::List<float>::Reader value);
  inline void setY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownY();

  inline bool hasPsi();
  inline  ::capnp::List<float>::Builder getPsi();
  inline void setPsi( ::capnp::List<float>::Reader value);
  inline void setPsi(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPsi(unsigned int size);
  inline void adoptPsi(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPsi();

  inline bool hasDelta();
  inline  ::capnp::List<float>::Builder getDelta();
  inline void setDelta( ::capnp::List<float>::Reader value);
  inline void setDelta(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDelta(unsigned int size);
  inline void adoptDelta(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDelta();

  inline  ::uint32_t getQpIterations();
  inline void setQpIterations( ::uint32_t value);

  inline  ::uint64_t getCalculationTime();
  inline void setCalculationTime( ::uint64_t value);

  inline double getCost();
  inline void setCost(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMpcData::Pipeline {
public:
  typedef LiveMpcData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveLongitudinalMpcData::Reader {
public:
  typedef LiveLongitudinalMpcData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasXEgo() const;
  inline  ::capnp::List<float>::Reader getXEgo() const;

  inline bool hasVEgo() const;
  inline  ::capnp::List<float>::Reader getVEgo() const;

  inline bool hasAEgo() const;
  inline  ::capnp::List<float>::Reader getAEgo() const;

  inline bool hasXLead() const;
  inline  ::capnp::List<float>::Reader getXLead() const;

  inline bool hasVLead() const;
  inline  ::capnp::List<float>::Reader getVLead() const;

  inline bool hasALead() const;
  inline  ::capnp::List<float>::Reader getALead() const;

  inline float getALeadTau() const;

  inline  ::uint32_t getQpIterations() const;

  inline  ::uint32_t getMpcId() const;

  inline  ::uint64_t getCalculationTime() const;

  inline double getCost() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveLongitudinalMpcData::Builder {
public:
  typedef LiveLongitudinalMpcData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasXEgo();
  inline  ::capnp::List<float>::Builder getXEgo();
  inline void setXEgo( ::capnp::List<float>::Reader value);
  inline void setXEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initXEgo(unsigned int size);
  inline void adoptXEgo(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownXEgo();

  inline bool hasVEgo();
  inline  ::capnp::List<float>::Builder getVEgo();
  inline void setVEgo( ::capnp::List<float>::Reader value);
  inline void setVEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initVEgo(unsigned int size);
  inline void adoptVEgo(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownVEgo();

  inline bool hasAEgo();
  inline  ::capnp::List<float>::Builder getAEgo();
  inline void setAEgo( ::capnp::List<float>::Reader value);
  inline void setAEgo(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initAEgo(unsigned int size);
  inline void adoptAEgo(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownAEgo();

  inline bool hasXLead();
  inline  ::capnp::List<float>::Builder getXLead();
  inline void setXLead( ::capnp::List<float>::Reader value);
  inline void setXLead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initXLead(unsigned int size);
  inline void adoptXLead(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownXLead();

  inline bool hasVLead();
  inline  ::capnp::List<float>::Builder getVLead();
  inline void setVLead( ::capnp::List<float>::Reader value);
  inline void setVLead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initVLead(unsigned int size);
  inline void adoptVLead(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownVLead();

  inline bool hasALead();
  inline  ::capnp::List<float>::Builder getALead();
  inline void setALead( ::capnp::List<float>::Reader value);
  inline void setALead(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initALead(unsigned int size);
  inline void adoptALead(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownALead();

  inline float getALeadTau();
  inline void setALeadTau(float value);

  inline  ::uint32_t getQpIterations();
  inline void setQpIterations( ::uint32_t value);

  inline  ::uint32_t getMpcId();
  inline void setMpcId( ::uint32_t value);

  inline  ::uint64_t getCalculationTime();
  inline void setCalculationTime( ::uint64_t value);

  inline double getCost();
  inline void setCost(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveLongitudinalMpcData::Pipeline {
public:
  typedef LiveLongitudinalMpcData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ECEFPointDEPRECATED::Reader {
public:
  typedef ECEFPointDEPRECATED Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ECEFPointDEPRECATED::Builder {
public:
  typedef ECEFPointDEPRECATED Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ECEFPointDEPRECATED::Pipeline {
public:
  typedef ECEFPointDEPRECATED Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ECEFPoint::Reader {
public:
  typedef ECEFPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ECEFPoint::Builder {
public:
  typedef ECEFPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ECEFPoint::Pipeline {
public:
  typedef ECEFPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSPlannerPoints::Reader {
public:
  typedef GPSPlannerPoints Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCurPosDEPRECATED() const;
  inline  ::cereal::ECEFPointDEPRECATED::Reader getCurPosDEPRECATED() const;

  inline bool hasPointsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader getPointsDEPRECATED() const;

  inline bool getValid() const;

  inline bool hasTrackName() const;
  inline  ::capnp::Text::Reader getTrackName() const;

  inline float getSpeedLimit() const;

  inline float getAccelTarget() const;

  inline bool hasCurPos() const;
  inline  ::cereal::ECEFPoint::Reader getCurPos() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::ECEFPoint>::Reader getPoints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSPlannerPoints::Builder {
public:
  typedef GPSPlannerPoints Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCurPosDEPRECATED();
  inline  ::cereal::ECEFPointDEPRECATED::Builder getCurPosDEPRECATED();
  inline void setCurPosDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value);
  inline  ::cereal::ECEFPointDEPRECATED::Builder initCurPosDEPRECATED();
  inline void adoptCurPosDEPRECATED(::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> disownCurPosDEPRECATED();

  inline bool hasPointsDEPRECATED();
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder getPointsDEPRECATED();
  inline void setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder initPointsDEPRECATED(unsigned int size);
  inline void adoptPointsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>> disownPointsDEPRECATED();

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasTrackName();
  inline  ::capnp::Text::Builder getTrackName();
  inline void setTrackName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTrackName(unsigned int size);
  inline void adoptTrackName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTrackName();

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline float getAccelTarget();
  inline void setAccelTarget(float value);

  inline bool hasCurPos();
  inline  ::cereal::ECEFPoint::Builder getCurPos();
  inline void setCurPos( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initCurPos();
  inline void adoptCurPos(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownCurPos();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::ECEFPoint>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> disownPoints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSPlannerPoints::Pipeline {
public:
  typedef GPSPlannerPoints Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPointDEPRECATED::Pipeline getCurPosDEPRECATED();
  inline  ::cereal::ECEFPoint::Pipeline getCurPos();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GPSPlannerPlan::Reader {
public:
  typedef GPSPlannerPlan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getValid() const;

  inline bool hasPoly() const;
  inline  ::capnp::List<float>::Reader getPoly() const;

  inline bool hasTrackName() const;
  inline  ::capnp::Text::Reader getTrackName() const;

  inline float getSpeed() const;

  inline float getAcceleration() const;

  inline bool hasPointsDEPRECATED() const;
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader getPointsDEPRECATED() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::cereal::ECEFPoint>::Reader getPoints() const;

  inline float getXLookahead() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GPSPlannerPlan::Builder {
public:
  typedef GPSPlannerPlan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getValid();
  inline void setValid(bool value);

  inline bool hasPoly();
  inline  ::capnp::List<float>::Builder getPoly();
  inline void setPoly( ::capnp::List<float>::Reader value);
  inline void setPoly(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPoly(unsigned int size);
  inline void adoptPoly(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPoly();

  inline bool hasTrackName();
  inline  ::capnp::Text::Builder getTrackName();
  inline void setTrackName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTrackName(unsigned int size);
  inline void adoptTrackName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTrackName();

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getAcceleration();
  inline void setAcceleration(float value);

  inline bool hasPointsDEPRECATED();
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder getPointsDEPRECATED();
  inline void setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder initPointsDEPRECATED(unsigned int size);
  inline void adoptPointsDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>> disownPointsDEPRECATED();

  inline bool hasPoints();
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::cereal::ECEFPoint>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> disownPoints();

  inline float getXLookahead();
  inline void setXLookahead(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GPSPlannerPlan::Pipeline {
public:
  typedef GPSPlannerPlan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficEvent::Reader {
public:
  typedef TrafficEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::TrafficEvent::Type getType() const;

  inline float getDistance() const;

  inline  ::cereal::TrafficEvent::Action getAction() const;

  inline bool getResuming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficEvent::Builder {
public:
  typedef TrafficEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::TrafficEvent::Type getType();
  inline void setType( ::cereal::TrafficEvent::Type value);

  inline float getDistance();
  inline void setDistance(float value);

  inline  ::cereal::TrafficEvent::Action getAction();
  inline void setAction( ::cereal::TrafficEvent::Action value);

  inline bool getResuming();
  inline void setResuming(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficEvent::Pipeline {
public:
  typedef TrafficEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbslamCorrection::Reader {
public:
  typedef OrbslamCorrection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCorrectionMonoTime() const;

  inline bool hasPrePositionECEF() const;
  inline  ::capnp::List<double>::Reader getPrePositionECEF() const;

  inline bool hasPostPositionECEF() const;
  inline  ::capnp::List<double>::Reader getPostPositionECEF() const;

  inline bool hasPrePoseQuatECEF() const;
  inline  ::capnp::List<float>::Reader getPrePoseQuatECEF() const;

  inline bool hasPostPoseQuatECEF() const;
  inline  ::capnp::List<float>::Reader getPostPoseQuatECEF() const;

  inline  ::uint32_t getNumInliers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbslamCorrection::Builder {
public:
  typedef OrbslamCorrection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCorrectionMonoTime();
  inline void setCorrectionMonoTime( ::uint64_t value);

  inline bool hasPrePositionECEF();
  inline  ::capnp::List<double>::Builder getPrePositionECEF();
  inline void setPrePositionECEF( ::capnp::List<double>::Reader value);
  inline void setPrePositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initPrePositionECEF(unsigned int size);
  inline void adoptPrePositionECEF(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownPrePositionECEF();

  inline bool hasPostPositionECEF();
  inline  ::capnp::List<double>::Builder getPostPositionECEF();
  inline void setPostPositionECEF( ::capnp::List<double>::Reader value);
  inline void setPostPositionECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initPostPositionECEF(unsigned int size);
  inline void adoptPostPositionECEF(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownPostPositionECEF();

  inline bool hasPrePoseQuatECEF();
  inline  ::capnp::List<float>::Builder getPrePoseQuatECEF();
  inline void setPrePoseQuatECEF( ::capnp::List<float>::Reader value);
  inline void setPrePoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPrePoseQuatECEF(unsigned int size);
  inline void adoptPrePoseQuatECEF(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPrePoseQuatECEF();

  inline bool hasPostPoseQuatECEF();
  inline  ::capnp::List<float>::Builder getPostPoseQuatECEF();
  inline void setPostPoseQuatECEF( ::capnp::List<float>::Reader value);
  inline void setPostPoseQuatECEF(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPostPoseQuatECEF(unsigned int size);
  inline void adoptPostPoseQuatECEF(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPostPoseQuatECEF();

  inline  ::uint32_t getNumInliers();
  inline void setNumInliers( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbslamCorrection::Pipeline {
public:
  typedef OrbslamCorrection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbObservation::Reader {
public:
  typedef OrbObservation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObservationMonoTime() const;

  inline bool hasNormalizedCoordinates() const;
  inline  ::capnp::List<float>::Reader getNormalizedCoordinates() const;

  inline bool hasLocationECEF() const;
  inline  ::capnp::List<double>::Reader getLocationECEF() const;

  inline  ::uint32_t getMatchDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbObservation::Builder {
public:
  typedef OrbObservation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObservationMonoTime();
  inline void setObservationMonoTime( ::uint64_t value);

  inline bool hasNormalizedCoordinates();
  inline  ::capnp::List<float>::Builder getNormalizedCoordinates();
  inline void setNormalizedCoordinates( ::capnp::List<float>::Reader value);
  inline void setNormalizedCoordinates(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initNormalizedCoordinates(unsigned int size);
  inline void adoptNormalizedCoordinates(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownNormalizedCoordinates();

  inline bool hasLocationECEF();
  inline  ::capnp::List<double>::Builder getLocationECEF();
  inline void setLocationECEF( ::capnp::List<double>::Reader value);
  inline void setLocationECEF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initLocationECEF(unsigned int size);
  inline void adoptLocationECEF(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownLocationECEF();

  inline  ::uint32_t getMatchDistance();
  inline void setMatchDistance( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbObservation::Pipeline {
public:
  typedef OrbObservation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiNavigationEvent::Reader {
public:
  typedef UiNavigationEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiNavigationEvent::Type getType() const;

  inline  ::cereal::UiNavigationEvent::Status getStatus() const;

  inline float getDistanceTo() const;

  inline bool hasEndRoadPointDEPRECATED() const;
  inline  ::cereal::ECEFPointDEPRECATED::Reader getEndRoadPointDEPRECATED() const;

  inline bool hasEndRoadPoint() const;
  inline  ::cereal::ECEFPoint::Reader getEndRoadPoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiNavigationEvent::Builder {
public:
  typedef UiNavigationEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiNavigationEvent::Type getType();
  inline void setType( ::cereal::UiNavigationEvent::Type value);

  inline  ::cereal::UiNavigationEvent::Status getStatus();
  inline void setStatus( ::cereal::UiNavigationEvent::Status value);

  inline float getDistanceTo();
  inline void setDistanceTo(float value);

  inline bool hasEndRoadPointDEPRECATED();
  inline  ::cereal::ECEFPointDEPRECATED::Builder getEndRoadPointDEPRECATED();
  inline void setEndRoadPointDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value);
  inline  ::cereal::ECEFPointDEPRECATED::Builder initEndRoadPointDEPRECATED();
  inline void adoptEndRoadPointDEPRECATED(::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> disownEndRoadPointDEPRECATED();

  inline bool hasEndRoadPoint();
  inline  ::cereal::ECEFPoint::Builder getEndRoadPoint();
  inline void setEndRoadPoint( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initEndRoadPoint();
  inline void adoptEndRoadPoint(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownEndRoadPoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiNavigationEvent::Pipeline {
public:
  typedef UiNavigationEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPointDEPRECATED::Pipeline getEndRoadPointDEPRECATED();
  inline  ::cereal::ECEFPoint::Pipeline getEndRoadPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UiLayoutState::Reader {
public:
  typedef UiLayoutState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiLayoutState::App getActiveApp() const;

  inline bool getSidebarCollapsed() const;

  inline bool getMapEnabled() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UiLayoutState::Builder {
public:
  typedef UiLayoutState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::cereal::UiLayoutState::App getActiveApp();
  inline void setActiveApp( ::cereal::UiLayoutState::App value);

  inline bool getSidebarCollapsed();
  inline void setSidebarCollapsed(bool value);

  inline bool getMapEnabled();
  inline void setMapEnabled(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UiLayoutState::Pipeline {
public:
  typedef UiLayoutState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Joystick::Reader {
public:
  typedef Joystick Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAxes() const;
  inline  ::capnp::List<float>::Reader getAxes() const;

  inline bool hasButtons() const;
  inline  ::capnp::List<bool>::Reader getButtons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Joystick::Builder {
public:
  typedef Joystick Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAxes();
  inline  ::capnp::List<float>::Builder getAxes();
  inline void setAxes( ::capnp::List<float>::Reader value);
  inline void setAxes(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initAxes(unsigned int size);
  inline void adoptAxes(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownAxes();

  inline bool hasButtons();
  inline  ::capnp::List<bool>::Builder getButtons();
  inline void setButtons( ::capnp::List<bool>::Reader value);
  inline void setButtons(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initButtons(unsigned int size);
  inline void adoptButtons(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownButtons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Joystick::Pipeline {
public:
  typedef Joystick Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbOdometry::Reader {
public:
  typedef OrbOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartMonoTime() const;

  inline  ::uint64_t getEndMonoTime() const;

  inline bool hasF() const;
  inline  ::capnp::List<double>::Reader getF() const;

  inline double getErr() const;

  inline  ::int32_t getInliers() const;

  inline bool hasMatches() const;
  inline  ::capnp::List< ::int16_t>::Reader getMatches() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbOdometry::Builder {
public:
  typedef OrbOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStartMonoTime();
  inline void setStartMonoTime( ::uint64_t value);

  inline  ::uint64_t getEndMonoTime();
  inline void setEndMonoTime( ::uint64_t value);

  inline bool hasF();
  inline  ::capnp::List<double>::Builder getF();
  inline void setF( ::capnp::List<double>::Reader value);
  inline void setF(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownF();

  inline double getErr();
  inline void setErr(double value);

  inline  ::int32_t getInliers();
  inline void setInliers( ::int32_t value);

  inline bool hasMatches();
  inline  ::capnp::List< ::int16_t>::Builder getMatches();
  inline void setMatches( ::capnp::List< ::int16_t>::Reader value);
  inline void setMatches(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initMatches(unsigned int size);
  inline void adoptMatches(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownMatches();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbOdometry::Pipeline {
public:
  typedef OrbOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbFeatures::Reader {
public:
  typedef OrbFeatures Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof() const;

  inline bool hasXs() const;
  inline  ::capnp::List<float>::Reader getXs() const;

  inline bool hasYs() const;
  inline  ::capnp::List<float>::Reader getYs() const;

  inline bool hasDescriptors() const;
  inline  ::capnp::Data::Reader getDescriptors() const;

  inline bool hasOctaves() const;
  inline  ::capnp::List< ::int8_t>::Reader getOctaves() const;

  inline  ::uint64_t getTimestampLastEof() const;

  inline bool hasMatches() const;
  inline  ::capnp::List< ::int16_t>::Reader getMatches() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbFeatures::Builder {
public:
  typedef OrbFeatures Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline bool hasXs();
  inline  ::capnp::List<float>::Builder getXs();
  inline void setXs( ::capnp::List<float>::Reader value);
  inline void setXs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initXs(unsigned int size);
  inline void adoptXs(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownXs();

  inline bool hasYs();
  inline  ::capnp::List<float>::Builder getYs();
  inline void setYs( ::capnp::List<float>::Reader value);
  inline void setYs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initYs(unsigned int size);
  inline void adoptYs(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownYs();

  inline bool hasDescriptors();
  inline  ::capnp::Data::Builder getDescriptors();
  inline void setDescriptors( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDescriptors(unsigned int size);
  inline void adoptDescriptors(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDescriptors();

  inline bool hasOctaves();
  inline  ::capnp::List< ::int8_t>::Builder getOctaves();
  inline void setOctaves( ::capnp::List< ::int8_t>::Reader value);
  inline void setOctaves(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initOctaves(unsigned int size);
  inline void adoptOctaves(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownOctaves();

  inline  ::uint64_t getTimestampLastEof();
  inline void setTimestampLastEof( ::uint64_t value);

  inline bool hasMatches();
  inline  ::capnp::List< ::int16_t>::Builder getMatches();
  inline void setMatches( ::capnp::List< ::int16_t>::Reader value);
  inline void setMatches(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initMatches(unsigned int size);
  inline void adoptMatches(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownMatches();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbFeatures::Pipeline {
public:
  typedef OrbFeatures Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbFeaturesSummary::Reader {
public:
  typedef OrbFeaturesSummary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof() const;

  inline  ::uint64_t getTimestampLastEof() const;

  inline  ::uint16_t getFeatureCount() const;

  inline  ::uint16_t getMatchCount() const;

  inline  ::uint64_t getComputeNs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbFeaturesSummary::Builder {
public:
  typedef OrbFeaturesSummary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

  inline  ::uint64_t getTimestampLastEof();
  inline void setTimestampLastEof( ::uint64_t value);

  inline  ::uint16_t getFeatureCount();
  inline void setFeatureCount( ::uint16_t value);

  inline  ::uint16_t getMatchCount();
  inline void setMatchCount( ::uint16_t value);

  inline  ::uint64_t getComputeNs();
  inline void setComputeNs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbFeaturesSummary::Pipeline {
public:
  typedef OrbFeaturesSummary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrbKeyFrame::Reader {
public:
  typedef OrbKeyFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPos() const;
  inline  ::cereal::ECEFPoint::Reader getPos() const;

  inline bool hasDpos() const;
  inline  ::capnp::List< ::cereal::ECEFPoint>::Reader getDpos() const;

  inline bool hasDescriptors() const;
  inline  ::capnp::Data::Reader getDescriptors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrbKeyFrame::Builder {
public:
  typedef OrbKeyFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPos();
  inline  ::cereal::ECEFPoint::Builder getPos();
  inline void setPos( ::cereal::ECEFPoint::Reader value);
  inline  ::cereal::ECEFPoint::Builder initPos();
  inline void adoptPos(::capnp::Orphan< ::cereal::ECEFPoint>&& value);
  inline ::capnp::Orphan< ::cereal::ECEFPoint> disownPos();

  inline bool hasDpos();
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder getDpos();
  inline void setDpos( ::capnp::List< ::cereal::ECEFPoint>::Reader value);
  inline  ::capnp::List< ::cereal::ECEFPoint>::Builder initDpos(unsigned int size);
  inline void adoptDpos(::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> disownDpos();

  inline bool hasDescriptors();
  inline  ::capnp::Data::Builder getDescriptors();
  inline void setDescriptors( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDescriptors(unsigned int size);
  inline void adoptDescriptors(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDescriptors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrbKeyFrame::Pipeline {
public:
  typedef OrbKeyFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::ECEFPoint::Pipeline getPos();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverState::Reader {
public:
  typedef DriverState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId() const;

  inline bool hasDescriptorDEPRECATED() const;
  inline  ::capnp::List<float>::Reader getDescriptorDEPRECATED() const;

  inline float getStdDEPRECATED() const;

  inline bool hasFaceOrientation() const;
  inline  ::capnp::List<float>::Reader getFaceOrientation() const;

  inline bool hasFacePosition() const;
  inline  ::capnp::List<float>::Reader getFacePosition() const;

  inline float getFaceProb() const;

  inline float getLeftEyeProb() const;

  inline float getRightEyeProb() const;

  inline float getLeftBlinkProb() const;

  inline float getRightBlinkProb() const;

  inline float getIrPwrDEPRECATED() const;

  inline bool hasFaceOrientationStd() const;
  inline  ::capnp::List<float>::Reader getFaceOrientationStd() const;

  inline bool hasFacePositionStd() const;
  inline  ::capnp::List<float>::Reader getFacePositionStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverState::Builder {
public:
  typedef DriverState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline bool hasDescriptorDEPRECATED();
  inline  ::capnp::List<float>::Builder getDescriptorDEPRECATED();
  inline void setDescriptorDEPRECATED( ::capnp::List<float>::Reader value);
  inline void setDescriptorDEPRECATED(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initDescriptorDEPRECATED(unsigned int size);
  inline void adoptDescriptorDEPRECATED(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownDescriptorDEPRECATED();

  inline float getStdDEPRECATED();
  inline void setStdDEPRECATED(float value);

  inline bool hasFaceOrientation();
  inline  ::capnp::List<float>::Builder getFaceOrientation();
  inline void setFaceOrientation( ::capnp::List<float>::Reader value);
  inline void setFaceOrientation(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFaceOrientation(unsigned int size);
  inline void adoptFaceOrientation(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFaceOrientation();

  inline bool hasFacePosition();
  inline  ::capnp::List<float>::Builder getFacePosition();
  inline void setFacePosition( ::capnp::List<float>::Reader value);
  inline void setFacePosition(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFacePosition(unsigned int size);
  inline void adoptFacePosition(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFacePosition();

  inline float getFaceProb();
  inline void setFaceProb(float value);

  inline float getLeftEyeProb();
  inline void setLeftEyeProb(float value);

  inline float getRightEyeProb();
  inline void setRightEyeProb(float value);

  inline float getLeftBlinkProb();
  inline void setLeftBlinkProb(float value);

  inline float getRightBlinkProb();
  inline void setRightBlinkProb(float value);

  inline float getIrPwrDEPRECATED();
  inline void setIrPwrDEPRECATED(float value);

  inline bool hasFaceOrientationStd();
  inline  ::capnp::List<float>::Builder getFaceOrientationStd();
  inline void setFaceOrientationStd( ::capnp::List<float>::Reader value);
  inline void setFaceOrientationStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFaceOrientationStd(unsigned int size);
  inline void adoptFaceOrientationStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFaceOrientationStd();

  inline bool hasFacePositionStd();
  inline  ::capnp::List<float>::Builder getFacePositionStd();
  inline void setFacePositionStd( ::capnp::List<float>::Reader value);
  inline void setFacePositionStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initFacePositionStd(unsigned int size);
  inline void adoptFacePositionStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFacePositionStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverState::Pipeline {
public:
  typedef DriverState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DMonitoringState::Reader {
public:
  typedef DMonitoringState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent>::Reader getEvents() const;

  inline bool getFaceDetected() const;

  inline bool getIsDistracted() const;

  inline float getAwarenessStatus() const;

  inline bool getIsRHD() const;

  inline bool getRhdChecked() const;

  inline float getPosePitchOffset() const;

  inline  ::uint32_t getPosePitchValidCount() const;

  inline float getPoseYawOffset() const;

  inline  ::uint32_t getPoseYawValidCount() const;

  inline float getStepChange() const;

  inline float getAwarenessActive() const;

  inline float getAwarenessPassive() const;

  inline bool getIsLowStd() const;

  inline  ::uint32_t getHiStdCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DMonitoringState::Builder {
public:
  typedef DMonitoringState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::cereal::CarEvent>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::cereal::CarEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> disownEvents();

  inline bool getFaceDetected();
  inline void setFaceDetected(bool value);

  inline bool getIsDistracted();
  inline void setIsDistracted(bool value);

  inline float getAwarenessStatus();
  inline void setAwarenessStatus(float value);

  inline bool getIsRHD();
  inline void setIsRHD(bool value);

  inline bool getRhdChecked();
  inline void setRhdChecked(bool value);

  inline float getPosePitchOffset();
  inline void setPosePitchOffset(float value);

  inline  ::uint32_t getPosePitchValidCount();
  inline void setPosePitchValidCount( ::uint32_t value);

  inline float getPoseYawOffset();
  inline void setPoseYawOffset(float value);

  inline  ::uint32_t getPoseYawValidCount();
  inline void setPoseYawValidCount( ::uint32_t value);

  inline float getStepChange();
  inline void setStepChange(float value);

  inline float getAwarenessActive();
  inline void setAwarenessActive(float value);

  inline float getAwarenessPassive();
  inline void setAwarenessPassive(float value);

  inline bool getIsLowStd();
  inline void setIsLowStd(bool value);

  inline  ::uint32_t getHiStdCount();
  inline void setHiStdCount( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DMonitoringState::Pipeline {
public:
  typedef DMonitoringState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Boot::Reader {
public:
  typedef Boot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getWallTimeNanos() const;

  inline bool hasLastKmsg() const;
  inline  ::capnp::Data::Reader getLastKmsg() const;

  inline bool hasLastPmsg() const;
  inline  ::capnp::Data::Reader getLastPmsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Boot::Builder {
public:
  typedef Boot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getWallTimeNanos();
  inline void setWallTimeNanos( ::uint64_t value);

  inline bool hasLastKmsg();
  inline  ::capnp::Data::Builder getLastKmsg();
  inline void setLastKmsg( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLastKmsg(unsigned int size);
  inline void adoptLastKmsg(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLastKmsg();

  inline bool hasLastPmsg();
  inline  ::capnp::Data::Builder getLastPmsg();
  inline void setLastPmsg( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLastPmsg(unsigned int size);
  inline void adoptLastPmsg(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLastPmsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Boot::Pipeline {
public:
  typedef Boot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveParametersData::Reader {
public:
  typedef LiveParametersData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getValid() const;

  inline float getGyroBias() const;

  inline float getAngleOffset() const;

  inline float getAngleOffsetAverage() const;

  inline float getStiffnessFactor() const;

  inline float getSteerRatio() const;

  inline bool getSensorValid() const;

  inline float getYawRate() const;

  inline float getPosenetSpeed() const;

  inline bool getPosenetValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveParametersData::Builder {
public:
  typedef LiveParametersData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getValid();
  inline void setValid(bool value);

  inline float getGyroBias();
  inline void setGyroBias(float value);

  inline float getAngleOffset();
  inline void setAngleOffset(float value);

  inline float getAngleOffsetAverage();
  inline void setAngleOffsetAverage(float value);

  inline float getStiffnessFactor();
  inline void setStiffnessFactor(float value);

  inline float getSteerRatio();
  inline void setSteerRatio(float value);

  inline bool getSensorValid();
  inline void setSensorValid(bool value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getPosenetSpeed();
  inline void setPosenetSpeed(float value);

  inline bool getPosenetValid();
  inline void setPosenetValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveParametersData::Pipeline {
public:
  typedef LiveParametersData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LiveMapData::Reader {
public:
  typedef LiveMapData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid() const;

  inline float getSpeedLimit() const;

  inline bool getCurvatureValid() const;

  inline float getCurvature() const;

  inline  ::uint64_t getWayId() const;

  inline bool hasRoadX() const;
  inline  ::capnp::List<float>::Reader getRoadX() const;

  inline bool hasRoadY() const;
  inline  ::capnp::List<float>::Reader getRoadY() const;

  inline bool hasLastGps() const;
  inline  ::cereal::GpsLocationData::Reader getLastGps() const;

  inline bool hasRoadCurvatureX() const;
  inline  ::capnp::List<float>::Reader getRoadCurvatureX() const;

  inline bool hasRoadCurvature() const;
  inline  ::capnp::List<float>::Reader getRoadCurvature() const;

  inline float getDistToTurn() const;

  inline bool getMapValid() const;

  inline bool getSpeedAdvisoryValid() const;

  inline float getSpeedAdvisory() const;

  inline bool getSpeedLimitAheadValid() const;

  inline float getSpeedLimitAhead() const;

  inline float getSpeedLimitAheadDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LiveMapData::Builder {
public:
  typedef LiveMapData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSpeedLimitValid();
  inline void setSpeedLimitValid(bool value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline bool getCurvatureValid();
  inline void setCurvatureValid(bool value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline  ::uint64_t getWayId();
  inline void setWayId( ::uint64_t value);

  inline bool hasRoadX();
  inline  ::capnp::List<float>::Builder getRoadX();
  inline void setRoadX( ::capnp::List<float>::Reader value);
  inline void setRoadX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRoadX(unsigned int size);
  inline void adoptRoadX(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRoadX();

  inline bool hasRoadY();
  inline  ::capnp::List<float>::Builder getRoadY();
  inline void setRoadY( ::capnp::List<float>::Reader value);
  inline void setRoadY(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRoadY(unsigned int size);
  inline void adoptRoadY(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRoadY();

  inline bool hasLastGps();
  inline  ::cereal::GpsLocationData::Builder getLastGps();
  inline void setLastGps( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initLastGps();
  inline void adoptLastGps(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownLastGps();

  inline bool hasRoadCurvatureX();
  inline  ::capnp::List<float>::Builder getRoadCurvatureX();
  inline void setRoadCurvatureX( ::capnp::List<float>::Reader value);
  inline void setRoadCurvatureX(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRoadCurvatureX(unsigned int size);
  inline void adoptRoadCurvatureX(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRoadCurvatureX();

  inline bool hasRoadCurvature();
  inline  ::capnp::List<float>::Builder getRoadCurvature();
  inline void setRoadCurvature( ::capnp::List<float>::Reader value);
  inline void setRoadCurvature(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRoadCurvature(unsigned int size);
  inline void adoptRoadCurvature(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRoadCurvature();

  inline float getDistToTurn();
  inline void setDistToTurn(float value);

  inline bool getMapValid();
  inline void setMapValid(bool value);

  inline bool getSpeedAdvisoryValid();
  inline void setSpeedAdvisoryValid(bool value);

  inline float getSpeedAdvisory();
  inline void setSpeedAdvisory(float value);

  inline bool getSpeedLimitAheadValid();
  inline void setSpeedLimitAheadValid(bool value);

  inline float getSpeedLimitAhead();
  inline void setSpeedLimitAhead(float value);

  inline float getSpeedLimitAheadDistance();
  inline void setSpeedLimitAheadDistance(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LiveMapData::Pipeline {
public:
  typedef LiveMapData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cereal::GpsLocationData::Pipeline getLastGps();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraOdometry::Reader {
public:
  typedef CameraOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float>::Reader getRotStd() const;

  inline  ::uint32_t getFrameId() const;

  inline  ::uint64_t getTimestampEof() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraOdometry::Builder {
public:
  typedef CameraOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float>::Builder getTrans();
  inline void setTrans( ::capnp::List<float>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float>::Builder getRot();
  inline void setRot( ::capnp::List<float>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRotStd();

  inline  ::uint32_t getFrameId();
  inline void setFrameId( ::uint32_t value);

  inline  ::uint64_t getTimestampEof();
  inline void setTimestampEof( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraOdometry::Pipeline {
public:
  typedef CameraOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KalmanOdometry::Reader {
public:
  typedef KalmanOdometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrans() const;
  inline  ::capnp::List<float>::Reader getTrans() const;

  inline bool hasRot() const;
  inline  ::capnp::List<float>::Reader getRot() const;

  inline bool hasTransStd() const;
  inline  ::capnp::List<float>::Reader getTransStd() const;

  inline bool hasRotStd() const;
  inline  ::capnp::List<float>::Reader getRotStd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KalmanOdometry::Builder {
public:
  typedef KalmanOdometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrans();
  inline  ::capnp::List<float>::Builder getTrans();
  inline void setTrans( ::capnp::List<float>::Reader value);
  inline void setTrans(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTrans(unsigned int size);
  inline void adoptTrans(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTrans();

  inline bool hasRot();
  inline  ::capnp::List<float>::Builder getRot();
  inline void setRot( ::capnp::List<float>::Reader value);
  inline void setRot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRot(unsigned int size);
  inline void adoptRot(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRot();

  inline bool hasTransStd();
  inline  ::capnp::List<float>::Builder getTransStd();
  inline void setTransStd( ::capnp::List<float>::Reader value);
  inline void setTransStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTransStd(unsigned int size);
  inline void adoptTransStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTransStd();

  inline bool hasRotStd();
  inline  ::capnp::List<float>::Builder getRotStd();
  inline void setRotStd( ::capnp::List<float>::Reader value);
  inline void setRotStd(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initRotStd(unsigned int size);
  inline void adoptRotStd(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownRotStd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KalmanOdometry::Pipeline {
public:
  typedef KalmanOdometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint64_t getLogMonoTime() const;

  inline bool isInitData() const;
  inline bool hasInitData() const;
  inline  ::cereal::InitData::Reader getInitData() const;

  inline bool isFrame() const;
  inline bool hasFrame() const;
  inline  ::cereal::FrameData::Reader getFrame() const;

  inline bool isGpsNMEA() const;
  inline bool hasGpsNMEA() const;
  inline  ::cereal::GPSNMEAData::Reader getGpsNMEA() const;

  inline bool isSensorEventDEPRECATED() const;
  inline bool hasSensorEventDEPRECATED() const;
  inline  ::cereal::SensorEventData::Reader getSensorEventDEPRECATED() const;

  inline bool isCan() const;
  inline bool hasCan() const;
  inline  ::capnp::List< ::cereal::CanData>::Reader getCan() const;

  inline bool isThermal() const;
  inline bool hasThermal() const;
  inline  ::cereal::ThermalData::Reader getThermal() const;

  inline bool isControlsState() const;
  inline bool hasControlsState() const;
  inline  ::cereal::ControlsState::Reader getControlsState() const;

  inline bool isLiveEventDEPRECATED() const;
  inline bool hasLiveEventDEPRECATED() const;
  inline  ::capnp::List< ::cereal::LiveEventData>::Reader getLiveEventDEPRECATED() const;

  inline bool isModel() const;
  inline bool hasModel() const;
  inline  ::cereal::ModelData::Reader getModel() const;

  inline bool isFeatures() const;
  inline bool hasFeatures() const;
  inline  ::cereal::CalibrationFeatures::Reader getFeatures() const;

  inline bool isSensorEvents() const;
  inline bool hasSensorEvents() const;
  inline  ::capnp::List< ::cereal::SensorEventData>::Reader getSensorEvents() const;

  inline bool isHealth() const;
  inline bool hasHealth() const;
  inline  ::cereal::HealthData::Reader getHealth() const;

  inline bool isRadarState() const;
  inline bool hasRadarState() const;
  inline  ::cereal::RadarState::Reader getRadarState() const;

  inline bool isLiveUIDEPRECATED() const;
  inline bool hasLiveUIDEPRECATED() const;
  inline  ::cereal::LiveUI::Reader getLiveUIDEPRECATED() const;

  inline bool isEncodeIdx() const;
  inline bool hasEncodeIdx() const;
  inline  ::cereal::EncodeIndex::Reader getEncodeIdx() const;

  inline bool isLiveTracks() const;
  inline bool hasLiveTracks() const;
  inline  ::capnp::List< ::cereal::LiveTracks>::Reader getLiveTracks() const;

  inline bool isSendcan() const;
  inline bool hasSendcan() const;
  inline  ::capnp::List< ::cereal::CanData>::Reader getSendcan() const;

  inline bool isLogMessage() const;
  inline bool hasLogMessage() const;
  inline  ::capnp::Text::Reader getLogMessage() const;

  inline bool isLiveCalibration() const;
  inline bool hasLiveCalibration() const;
  inline  ::cereal::LiveCalibrationData::Reader getLiveCalibration() const;

  inline bool isAndroidLogEntry() const;
  inline bool hasAndroidLogEntry() const;
  inline  ::cereal::AndroidLogEntry::Reader getAndroidLogEntry() const;

  inline bool isGpsLocation() const;
  inline bool hasGpsLocation() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocation() const;

  inline bool isCarState() const;
  inline bool hasCarState() const;
  inline  ::cereal::CarState::Reader getCarState() const;

  inline bool isCarControl() const;
  inline bool hasCarControl() const;
  inline  ::cereal::CarControl::Reader getCarControl() const;

  inline bool isPlan() const;
  inline bool hasPlan() const;
  inline  ::cereal::Plan::Reader getPlan() const;

  inline bool isLiveLocation() const;
  inline bool hasLiveLocation() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocation() const;

  inline bool isEthernetData() const;
  inline bool hasEthernetData() const;
  inline  ::capnp::List< ::cereal::EthernetPacket>::Reader getEthernetData() const;

  inline bool isNavUpdate() const;
  inline bool hasNavUpdate() const;
  inline  ::cereal::NavUpdate::Reader getNavUpdate() const;

  inline bool isCellInfo() const;
  inline bool hasCellInfo() const;
  inline  ::capnp::List< ::cereal::CellInfo>::Reader getCellInfo() const;

  inline bool isWifiScan() const;
  inline bool hasWifiScan() const;
  inline  ::capnp::List< ::cereal::WifiScan>::Reader getWifiScan() const;

  inline bool isAndroidGnss() const;
  inline bool hasAndroidGnss() const;
  inline  ::cereal::AndroidGnss::Reader getAndroidGnss() const;

  inline bool isQcomGnss() const;
  inline bool hasQcomGnss() const;
  inline  ::cereal::QcomGnss::Reader getQcomGnss() const;

  inline bool isLidarPts() const;
  inline bool hasLidarPts() const;
  inline  ::cereal::LidarPts::Reader getLidarPts() const;

  inline bool isProcLog() const;
  inline bool hasProcLog() const;
  inline  ::cereal::ProcLog::Reader getProcLog() const;

  inline bool isUbloxGnss() const;
  inline bool hasUbloxGnss() const;
  inline  ::cereal::UbloxGnss::Reader getUbloxGnss() const;

  inline bool isClocks() const;
  inline bool hasClocks() const;
  inline  ::cereal::Clocks::Reader getClocks() const;

  inline bool isLiveMpc() const;
  inline bool hasLiveMpc() const;
  inline  ::cereal::LiveMpcData::Reader getLiveMpc() const;

  inline bool isLiveLongitudinalMpc() const;
  inline bool hasLiveLongitudinalMpc() const;
  inline  ::cereal::LiveLongitudinalMpcData::Reader getLiveLongitudinalMpc() const;

  inline bool isNavStatus() const;
  inline bool hasNavStatus() const;
  inline  ::cereal::NavStatus::Reader getNavStatus() const;

  inline bool isUbloxRaw() const;
  inline bool hasUbloxRaw() const;
  inline  ::capnp::Data::Reader getUbloxRaw() const;

  inline bool isGpsPlannerPoints() const;
  inline bool hasGpsPlannerPoints() const;
  inline  ::cereal::GPSPlannerPoints::Reader getGpsPlannerPoints() const;

  inline bool isGpsPlannerPlan() const;
  inline bool hasGpsPlannerPlan() const;
  inline  ::cereal::GPSPlannerPlan::Reader getGpsPlannerPlan() const;

  inline bool isApplanixRaw() const;
  inline bool hasApplanixRaw() const;
  inline  ::capnp::Data::Reader getApplanixRaw() const;

  inline bool isTrafficEvents() const;
  inline bool hasTrafficEvents() const;
  inline  ::capnp::List< ::cereal::TrafficEvent>::Reader getTrafficEvents() const;

  inline bool isLiveLocationTiming() const;
  inline bool hasLiveLocationTiming() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationTiming() const;

  inline bool isOrbslamCorrectionDEPRECATED() const;
  inline bool hasOrbslamCorrectionDEPRECATED() const;
  inline  ::cereal::OrbslamCorrection::Reader getOrbslamCorrectionDEPRECATED() const;

  inline bool isLiveLocationCorrected() const;
  inline bool hasLiveLocationCorrected() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationCorrected() const;

  inline bool isOrbObservation() const;
  inline bool hasOrbObservation() const;
  inline  ::capnp::List< ::cereal::OrbObservation>::Reader getOrbObservation() const;

  inline bool isGpsLocationExternal() const;
  inline bool hasGpsLocationExternal() const;
  inline  ::cereal::GpsLocationData::Reader getGpsLocationExternal() const;

  inline bool isLocation() const;
  inline bool hasLocation() const;
  inline  ::cereal::LiveLocationData::Reader getLocation() const;

  inline bool isUiNavigationEvent() const;
  inline bool hasUiNavigationEvent() const;
  inline  ::cereal::UiNavigationEvent::Reader getUiNavigationEvent() const;

  inline bool isLiveLocationKalman() const;
  inline bool hasLiveLocationKalman() const;
  inline  ::cereal::LiveLocationData::Reader getLiveLocationKalman() const;

  inline bool isTestJoystick() const;
  inline bool hasTestJoystick() const;
  inline  ::cereal::Joystick::Reader getTestJoystick() const;

  inline bool isOrbOdometry() const;
  inline bool hasOrbOdometry() const;
  inline  ::cereal::OrbOdometry::Reader getOrbOdometry() const;

  inline bool isOrbFeatures() const;
  inline bool hasOrbFeatures() const;
  inline  ::cereal::OrbFeatures::Reader getOrbFeatures() const;

  inline bool isApplanixLocation() const;
  inline bool hasApplanixLocation() const;
  inline  ::cereal::LiveLocationData::Reader getApplanixLocation() const;

  inline bool isOrbKeyFrame() const;
  inline bool hasOrbKeyFrame() const;
  inline  ::cereal::OrbKeyFrame::Reader getOrbKeyFrame() const;

  inline bool isUiLayoutState() const;
  inline bool hasUiLayoutState() const;
  inline  ::cereal::UiLayoutState::Reader getUiLayoutState() const;

  inline bool isOrbFeaturesSummary() const;
  inline bool hasOrbFeaturesSummary() const;
  inline  ::cereal::OrbFeaturesSummary::Reader getOrbFeaturesSummary() const;

  inline bool isDriverState() const;
  inline bool hasDriverState() const;
  inline  ::cereal::DriverState::Reader getDriverState() const;

  inline bool isBoot() const;
  inline bool hasBoot() const;
  inline  ::cereal::Boot::Reader getBoot() const;

  inline bool isLiveParameters() const;
  inline bool hasLiveParameters() const;
  inline  ::cereal::LiveParametersData::Reader getLiveParameters() const;

  inline bool isLiveMapData() const;
  inline bool hasLiveMapData() const;
  inline  ::cereal::LiveMapData::Reader getLiveMapData() const;

  inline bool isCameraOdometry() const;
  inline bool hasCameraOdometry() const;
  inline  ::cereal::CameraOdometry::Reader getCameraOdometry() const;

  inline bool isPathPlan() const;
  inline bool hasPathPlan() const;
  inline  ::cereal::PathPlan::Reader getPathPlan() const;

  inline bool isKalmanOdometry() const;
  inline bool hasKalmanOdometry() const;
  inline  ::cereal::KalmanOdometry::Reader getKalmanOdometry() const;

  inline bool isThumbnail() const;
  inline bool hasThumbnail() const;
  inline  ::cereal::Thumbnail::Reader getThumbnail() const;

  inline bool getValid() const;

  inline bool isCarEvents() const;
  inline bool hasCarEvents() const;
  inline  ::capnp::List< ::cereal::CarEvent>::Reader getCarEvents() const;

  inline bool isCarParams() const;
  inline bool hasCarParams() const;
  inline  ::cereal::CarParams::Reader getCarParams() const;

  inline bool isFrontFrame() const;
  inline bool hasFrontFrame() const;
  inline  ::cereal::FrameData::Reader getFrontFrame() const;

  inline bool isDMonitoringState() const;
  inline bool hasDMonitoringState() const;
  inline  ::cereal::DMonitoringState::Reader getDMonitoringState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint64_t getLogMonoTime();
  inline void setLogMonoTime( ::uint64_t value);

  inline bool isInitData();
  inline bool hasInitData();
  inline  ::cereal::InitData::Builder getInitData();
  inline void setInitData( ::cereal::InitData::Reader value);
  inline  ::cereal::InitData::Builder initInitData();
  inline void adoptInitData(::capnp::Orphan< ::cereal::InitData>&& value);
  inline ::capnp::Orphan< ::cereal::InitData> disownInitData();

  inline bool isFrame();
  inline bool hasFrame();
  inline  ::cereal::FrameData::Builder getFrame();
  inline void setFrame( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initFrame();
  inline void adoptFrame(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownFrame();

  inline bool isGpsNMEA();
  inline bool hasGpsNMEA();
  inline  ::cereal::GPSNMEAData::Builder getGpsNMEA();
  inline void setGpsNMEA( ::cereal::GPSNMEAData::Reader value);
  inline  ::cereal::GPSNMEAData::Builder initGpsNMEA();
  inline void adoptGpsNMEA(::capnp::Orphan< ::cereal::GPSNMEAData>&& value);
  inline ::capnp::Orphan< ::cereal::GPSNMEAData> disownGpsNMEA();

  inline bool isSensorEventDEPRECATED();
  inline bool hasSensorEventDEPRECATED();
  inline  ::cereal::SensorEventData::Builder getSensorEventDEPRECATED();
  inline void setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value);
  inline  ::cereal::SensorEventData::Builder initSensorEventDEPRECATED();
  inline void adoptSensorEventDEPRECATED(::capnp::Orphan< ::cereal::SensorEventData>&& value);
  inline ::capnp::Orphan< ::cereal::SensorEventData> disownSensorEventDEPRECATED();

  inline bool isCan();
  inline bool hasCan();
  inline  ::capnp::List< ::cereal::CanData>::Builder getCan();
  inline void setCan( ::capnp::List< ::cereal::CanData>::Reader value);
  inline  ::capnp::List< ::cereal::CanData>::Builder initCan(unsigned int size);
  inline void adoptCan(::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> disownCan();

  inline bool isThermal();
  inline bool hasThermal();
  inline  ::cereal::ThermalData::Builder getThermal();
  inline void setThermal( ::cereal::ThermalData::Reader value);
  inline  ::cereal::ThermalData::Builder initThermal();
  inline void adoptThermal(::capnp::Orphan< ::cereal::ThermalData>&& value);
  inline ::capnp::Orphan< ::cereal::ThermalData> disownThermal();

  inline bool isControlsState();
  inline bool hasControlsState();
  inline  ::cereal::ControlsState::Builder getControlsState();
  inline void setControlsState( ::cereal::ControlsState::Reader value);
  inline  ::cereal::ControlsState::Builder initControlsState();
  inline void adoptControlsState(::capnp::Orphan< ::cereal::ControlsState>&& value);
  inline ::capnp::Orphan< ::cereal::ControlsState> disownControlsState();

  inline bool isLiveEventDEPRECATED();
  inline bool hasLiveEventDEPRECATED();
  inline  ::capnp::List< ::cereal::LiveEventData>::Builder getLiveEventDEPRECATED();
  inline void setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData>::Reader value);
  inline  ::capnp::List< ::cereal::LiveEventData>::Builder initLiveEventDEPRECATED(unsigned int size);
  inline void adoptLiveEventDEPRECATED(::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>> disownLiveEventDEPRECATED();

  inline bool isModel();
  inline bool hasModel();
  inline  ::cereal::ModelData::Builder getModel();
  inline void setModel( ::cereal::ModelData::Reader value);
  inline  ::cereal::ModelData::Builder initModel();
  inline void adoptModel(::capnp::Orphan< ::cereal::ModelData>&& value);
  inline ::capnp::Orphan< ::cereal::ModelData> disownModel();

  inline bool isFeatures();
  inline bool hasFeatures();
  inline  ::cereal::CalibrationFeatures::Builder getFeatures();
  inline void setFeatures( ::cereal::CalibrationFeatures::Reader value);
  inline  ::cereal::CalibrationFeatures::Builder initFeatures();
  inline void adoptFeatures(::capnp::Orphan< ::cereal::CalibrationFeatures>&& value);
  inline ::capnp::Orphan< ::cereal::CalibrationFeatures> disownFeatures();

  inline bool isSensorEvents();
  inline bool hasSensorEvents();
  inline  ::capnp::List< ::cereal::SensorEventData>::Builder getSensorEvents();
  inline void setSensorEvents( ::capnp::List< ::cereal::SensorEventData>::Reader value);
  inline  ::capnp::List< ::cereal::SensorEventData>::Builder initSensorEvents(unsigned int size);
  inline void adoptSensorEvents(::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>> disownSensorEvents();

  inline bool isHealth();
  inline bool hasHealth();
  inline  ::cereal::HealthData::Builder getHealth();
  inline void setHealth( ::cereal::HealthData::Reader value);
  inline  ::cereal::HealthData::Builder initHealth();
  inline void adoptHealth(::capnp::Orphan< ::cereal::HealthData>&& value);
  inline ::capnp::Orphan< ::cereal::HealthData> disownHealth();

  inline bool isRadarState();
  inline bool hasRadarState();
  inline  ::cereal::RadarState::Builder getRadarState();
  inline void setRadarState( ::cereal::RadarState::Reader value);
  inline  ::cereal::RadarState::Builder initRadarState();
  inline void adoptRadarState(::capnp::Orphan< ::cereal::RadarState>&& value);
  inline ::capnp::Orphan< ::cereal::RadarState> disownRadarState();

  inline bool isLiveUIDEPRECATED();
  inline bool hasLiveUIDEPRECATED();
  inline  ::cereal::LiveUI::Builder getLiveUIDEPRECATED();
  inline void setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value);
  inline  ::cereal::LiveUI::Builder initLiveUIDEPRECATED();
  inline void adoptLiveUIDEPRECATED(::capnp::Orphan< ::cereal::LiveUI>&& value);
  inline ::capnp::Orphan< ::cereal::LiveUI> disownLiveUIDEPRECATED();

  inline bool isEncodeIdx();
  inline bool hasEncodeIdx();
  inline  ::cereal::EncodeIndex::Builder getEncodeIdx();
  inline void setEncodeIdx( ::cereal::EncodeIndex::Reader value);
  inline  ::cereal::EncodeIndex::Builder initEncodeIdx();
  inline void adoptEncodeIdx(::capnp::Orphan< ::cereal::EncodeIndex>&& value);
  inline ::capnp::Orphan< ::cereal::EncodeIndex> disownEncodeIdx();

  inline bool isLiveTracks();
  inline bool hasLiveTracks();
  inline  ::capnp::List< ::cereal::LiveTracks>::Builder getLiveTracks();
  inline void setLiveTracks( ::capnp::List< ::cereal::LiveTracks>::Reader value);
  inline  ::capnp::List< ::cereal::LiveTracks>::Builder initLiveTracks(unsigned int size);
  inline void adoptLiveTracks(::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>> disownLiveTracks();

  inline bool isSendcan();
  inline bool hasSendcan();
  inline  ::capnp::List< ::cereal::CanData>::Builder getSendcan();
  inline void setSendcan( ::capnp::List< ::cereal::CanData>::Reader value);
  inline  ::capnp::List< ::cereal::CanData>::Builder initSendcan(unsigned int size);
  inline void adoptSendcan(::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> disownSendcan();

  inline bool isLogMessage();
  inline bool hasLogMessage();
  inline  ::capnp::Text::Builder getLogMessage();
  inline void setLogMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogMessage(unsigned int size);
  inline void adoptLogMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogMessage();

  inline bool isLiveCalibration();
  inline bool hasLiveCalibration();
  inline  ::cereal::LiveCalibrationData::Builder getLiveCalibration();
  inline void setLiveCalibration( ::cereal::LiveCalibrationData::Reader value);
  inline  ::cereal::LiveCalibrationData::Builder initLiveCalibration();
  inline void adoptLiveCalibration(::capnp::Orphan< ::cereal::LiveCalibrationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveCalibrationData> disownLiveCalibration();

  inline bool isAndroidLogEntry();
  inline bool hasAndroidLogEntry();
  inline  ::cereal::AndroidLogEntry::Builder getAndroidLogEntry();
  inline void setAndroidLogEntry( ::cereal::AndroidLogEntry::Reader value);
  inline  ::cereal::AndroidLogEntry::Builder initAndroidLogEntry();
  inline void adoptAndroidLogEntry(::capnp::Orphan< ::cereal::AndroidLogEntry>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidLogEntry> disownAndroidLogEntry();

  inline bool isGpsLocation();
  inline bool hasGpsLocation();
  inline  ::cereal::GpsLocationData::Builder getGpsLocation();
  inline void setGpsLocation( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocation();
  inline void adoptGpsLocation(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocation();

  inline bool isCarState();
  inline bool hasCarState();
  inline  ::cereal::CarState::Builder getCarState();
  inline void setCarState( ::cereal::CarState::Reader value);
  inline  ::cereal::CarState::Builder initCarState();
  inline void adoptCarState(::capnp::Orphan< ::cereal::CarState>&& value);
  inline ::capnp::Orphan< ::cereal::CarState> disownCarState();

  inline bool isCarControl();
  inline bool hasCarControl();
  inline  ::cereal::CarControl::Builder getCarControl();
  inline void setCarControl( ::cereal::CarControl::Reader value);
  inline  ::cereal::CarControl::Builder initCarControl();
  inline void adoptCarControl(::capnp::Orphan< ::cereal::CarControl>&& value);
  inline ::capnp::Orphan< ::cereal::CarControl> disownCarControl();

  inline bool isPlan();
  inline bool hasPlan();
  inline  ::cereal::Plan::Builder getPlan();
  inline void setPlan( ::cereal::Plan::Reader value);
  inline  ::cereal::Plan::Builder initPlan();
  inline void adoptPlan(::capnp::Orphan< ::cereal::Plan>&& value);
  inline ::capnp::Orphan< ::cereal::Plan> disownPlan();

  inline bool isLiveLocation();
  inline bool hasLiveLocation();
  inline  ::cereal::LiveLocationData::Builder getLiveLocation();
  inline void setLiveLocation( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocation();
  inline void adoptLiveLocation(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocation();

  inline bool isEthernetData();
  inline bool hasEthernetData();
  inline  ::capnp::List< ::cereal::EthernetPacket>::Builder getEthernetData();
  inline void setEthernetData( ::capnp::List< ::cereal::EthernetPacket>::Reader value);
  inline  ::capnp::List< ::cereal::EthernetPacket>::Builder initEthernetData(unsigned int size);
  inline void adoptEthernetData(::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket>> disownEthernetData();

  inline bool isNavUpdate();
  inline bool hasNavUpdate();
  inline  ::cereal::NavUpdate::Builder getNavUpdate();
  inline void setNavUpdate( ::cereal::NavUpdate::Reader value);
  inline  ::cereal::NavUpdate::Builder initNavUpdate();
  inline void adoptNavUpdate(::capnp::Orphan< ::cereal::NavUpdate>&& value);
  inline ::capnp::Orphan< ::cereal::NavUpdate> disownNavUpdate();

  inline bool isCellInfo();
  inline bool hasCellInfo();
  inline  ::capnp::List< ::cereal::CellInfo>::Builder getCellInfo();
  inline void setCellInfo( ::capnp::List< ::cereal::CellInfo>::Reader value);
  inline  ::capnp::List< ::cereal::CellInfo>::Builder initCellInfo(unsigned int size);
  inline void adoptCellInfo(::capnp::Orphan< ::capnp::List< ::cereal::CellInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo>> disownCellInfo();

  inline bool isWifiScan();
  inline bool hasWifiScan();
  inline  ::capnp::List< ::cereal::WifiScan>::Builder getWifiScan();
  inline void setWifiScan( ::capnp::List< ::cereal::WifiScan>::Reader value);
  inline  ::capnp::List< ::cereal::WifiScan>::Builder initWifiScan(unsigned int size);
  inline void adoptWifiScan(::capnp::Orphan< ::capnp::List< ::cereal::WifiScan>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan>> disownWifiScan();

  inline bool isAndroidGnss();
  inline bool hasAndroidGnss();
  inline  ::cereal::AndroidGnss::Builder getAndroidGnss();
  inline void setAndroidGnss( ::cereal::AndroidGnss::Reader value);
  inline  ::cereal::AndroidGnss::Builder initAndroidGnss();
  inline void adoptAndroidGnss(::capnp::Orphan< ::cereal::AndroidGnss>&& value);
  inline ::capnp::Orphan< ::cereal::AndroidGnss> disownAndroidGnss();

  inline bool isQcomGnss();
  inline bool hasQcomGnss();
  inline  ::cereal::QcomGnss::Builder getQcomGnss();
  inline void setQcomGnss( ::cereal::QcomGnss::Reader value);
  inline  ::cereal::QcomGnss::Builder initQcomGnss();
  inline void adoptQcomGnss(::capnp::Orphan< ::cereal::QcomGnss>&& value);
  inline ::capnp::Orphan< ::cereal::QcomGnss> disownQcomGnss();

  inline bool isLidarPts();
  inline bool hasLidarPts();
  inline  ::cereal::LidarPts::Builder getLidarPts();
  inline void setLidarPts( ::cereal::LidarPts::Reader value);
  inline  ::cereal::LidarPts::Builder initLidarPts();
  inline void adoptLidarPts(::capnp::Orphan< ::cereal::LidarPts>&& value);
  inline ::capnp::Orphan< ::cereal::LidarPts> disownLidarPts();

  inline bool isProcLog();
  inline bool hasProcLog();
  inline  ::cereal::ProcLog::Builder getProcLog();
  inline void setProcLog( ::cereal::ProcLog::Reader value);
  inline  ::cereal::ProcLog::Builder initProcLog();
  inline void adoptProcLog(::capnp::Orphan< ::cereal::ProcLog>&& value);
  inline ::capnp::Orphan< ::cereal::ProcLog> disownProcLog();

  inline bool isUbloxGnss();
  inline bool hasUbloxGnss();
  inline  ::cereal::UbloxGnss::Builder getUbloxGnss();
  inline void setUbloxGnss( ::cereal::UbloxGnss::Reader value);
  inline  ::cereal::UbloxGnss::Builder initUbloxGnss();
  inline void adoptUbloxGnss(::capnp::Orphan< ::cereal::UbloxGnss>&& value);
  inline ::capnp::Orphan< ::cereal::UbloxGnss> disownUbloxGnss();

  inline bool isClocks();
  inline bool hasClocks();
  inline  ::cereal::Clocks::Builder getClocks();
  inline void setClocks( ::cereal::Clocks::Reader value);
  inline  ::cereal::Clocks::Builder initClocks();
  inline void adoptClocks(::capnp::Orphan< ::cereal::Clocks>&& value);
  inline ::capnp::Orphan< ::cereal::Clocks> disownClocks();

  inline bool isLiveMpc();
  inline bool hasLiveMpc();
  inline  ::cereal::LiveMpcData::Builder getLiveMpc();
  inline void setLiveMpc( ::cereal::LiveMpcData::Reader value);
  inline  ::cereal::LiveMpcData::Builder initLiveMpc();
  inline void adoptLiveMpc(::capnp::Orphan< ::cereal::LiveMpcData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveMpcData> disownLiveMpc();

  inline bool isLiveLongitudinalMpc();
  inline bool hasLiveLongitudinalMpc();
  inline  ::cereal::LiveLongitudinalMpcData::Builder getLiveLongitudinalMpc();
  inline void setLiveLongitudinalMpc( ::cereal::LiveLongitudinalMpcData::Reader value);
  inline  ::cereal::LiveLongitudinalMpcData::Builder initLiveLongitudinalMpc();
  inline void adoptLiveLongitudinalMpc(::capnp::Orphan< ::cereal::LiveLongitudinalMpcData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData> disownLiveLongitudinalMpc();

  inline bool isNavStatus();
  inline bool hasNavStatus();
  inline  ::cereal::NavStatus::Builder getNavStatus();
  inline void setNavStatus( ::cereal::NavStatus::Reader value);
  inline  ::cereal::NavStatus::Builder initNavStatus();
  inline void adoptNavStatus(::capnp::Orphan< ::cereal::NavStatus>&& value);
  inline ::capnp::Orphan< ::cereal::NavStatus> disownNavStatus();

  inline bool isUbloxRaw();
  inline bool hasUbloxRaw();
  inline  ::capnp::Data::Builder getUbloxRaw();
  inline void setUbloxRaw( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUbloxRaw(unsigned int size);
  inline void adoptUbloxRaw(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUbloxRaw();

  inline bool isGpsPlannerPoints();
  inline bool hasGpsPlannerPoints();
  inline  ::cereal::GPSPlannerPoints::Builder getGpsPlannerPoints();
  inline void setGpsPlannerPoints( ::cereal::GPSPlannerPoints::Reader value);
  inline  ::cereal::GPSPlannerPoints::Builder initGpsPlannerPoints();
  inline void adoptGpsPlannerPoints(::capnp::Orphan< ::cereal::GPSPlannerPoints>&& value);
  inline ::capnp::Orphan< ::cereal::GPSPlannerPoints> disownGpsPlannerPoints();

  inline bool isGpsPlannerPlan();
  inline bool hasGpsPlannerPlan();
  inline  ::cereal::GPSPlannerPlan::Builder getGpsPlannerPlan();
  inline void setGpsPlannerPlan( ::cereal::GPSPlannerPlan::Reader value);
  inline  ::cereal::GPSPlannerPlan::Builder initGpsPlannerPlan();
  inline void adoptGpsPlannerPlan(::capnp::Orphan< ::cereal::GPSPlannerPlan>&& value);
  inline ::capnp::Orphan< ::cereal::GPSPlannerPlan> disownGpsPlannerPlan();

  inline bool isApplanixRaw();
  inline bool hasApplanixRaw();
  inline  ::capnp::Data::Builder getApplanixRaw();
  inline void setApplanixRaw( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initApplanixRaw(unsigned int size);
  inline void adoptApplanixRaw(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownApplanixRaw();

  inline bool isTrafficEvents();
  inline bool hasTrafficEvents();
  inline  ::capnp::List< ::cereal::TrafficEvent>::Builder getTrafficEvents();
  inline void setTrafficEvents( ::capnp::List< ::cereal::TrafficEvent>::Reader value);
  inline  ::capnp::List< ::cereal::TrafficEvent>::Builder initTrafficEvents(unsigned int size);
  inline void adoptTrafficEvents(::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent>> disownTrafficEvents();

  inline bool isLiveLocationTiming();
  inline bool hasLiveLocationTiming();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationTiming();
  inline void setLiveLocationTiming( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationTiming();
  inline void adoptLiveLocationTiming(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationTiming();

  inline bool isOrbslamCorrectionDEPRECATED();
  inline bool hasOrbslamCorrectionDEPRECATED();
  inline  ::cereal::OrbslamCorrection::Builder getOrbslamCorrectionDEPRECATED();
  inline void setOrbslamCorrectionDEPRECATED( ::cereal::OrbslamCorrection::Reader value);
  inline  ::cereal::OrbslamCorrection::Builder initOrbslamCorrectionDEPRECATED();
  inline void adoptOrbslamCorrectionDEPRECATED(::capnp::Orphan< ::cereal::OrbslamCorrection>&& value);
  inline ::capnp::Orphan< ::cereal::OrbslamCorrection> disownOrbslamCorrectionDEPRECATED();

  inline bool isLiveLocationCorrected();
  inline bool hasLiveLocationCorrected();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationCorrected();
  inline void setLiveLocationCorrected( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationCorrected();
  inline void adoptLiveLocationCorrected(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationCorrected();

  inline bool isOrbObservation();
  inline bool hasOrbObservation();
  inline  ::capnp::List< ::cereal::OrbObservation>::Builder getOrbObservation();
  inline void setOrbObservation( ::capnp::List< ::cereal::OrbObservation>::Reader value);
  inline  ::capnp::List< ::cereal::OrbObservation>::Builder initOrbObservation(unsigned int size);
  inline void adoptOrbObservation(::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation>> disownOrbObservation();

  inline bool isGpsLocationExternal();
  inline bool hasGpsLocationExternal();
  inline  ::cereal::GpsLocationData::Builder getGpsLocationExternal();
  inline void setGpsLocationExternal( ::cereal::GpsLocationData::Reader value);
  inline  ::cereal::GpsLocationData::Builder initGpsLocationExternal();
  inline void adoptGpsLocationExternal(::capnp::Orphan< ::cereal::GpsLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::GpsLocationData> disownGpsLocationExternal();

  inline bool isLocation();
  inline bool hasLocation();
  inline  ::cereal::LiveLocationData::Builder getLocation();
  inline void setLocation( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLocation();
  inline void adoptLocation(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLocation();

  inline bool isUiNavigationEvent();
  inline bool hasUiNavigationEvent();
  inline  ::cereal::UiNavigationEvent::Builder getUiNavigationEvent();
  inline void setUiNavigationEvent( ::cereal::UiNavigationEvent::Reader value);
  inline  ::cereal::UiNavigationEvent::Builder initUiNavigationEvent();
  inline void adoptUiNavigationEvent(::capnp::Orphan< ::cereal::UiNavigationEvent>&& value);
  inline ::capnp::Orphan< ::cereal::UiNavigationEvent> disownUiNavigationEvent();

  inline bool isLiveLocationKalman();
  inline bool hasLiveLocationKalman();
  inline  ::cereal::LiveLocationData::Builder getLiveLocationKalman();
  inline void setLiveLocationKalman( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initLiveLocationKalman();
  inline void adoptLiveLocationKalman(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownLiveLocationKalman();

  inline bool isTestJoystick();
  inline bool hasTestJoystick();
  inline  ::cereal::Joystick::Builder getTestJoystick();
  inline void setTestJoystick( ::cereal::Joystick::Reader value);
  inline  ::cereal::Joystick::Builder initTestJoystick();
  inline void adoptTestJoystick(::capnp::Orphan< ::cereal::Joystick>&& value);
  inline ::capnp::Orphan< ::cereal::Joystick> disownTestJoystick();

  inline bool isOrbOdometry();
  inline bool hasOrbOdometry();
  inline  ::cereal::OrbOdometry::Builder getOrbOdometry();
  inline void setOrbOdometry( ::cereal::OrbOdometry::Reader value);
  inline  ::cereal::OrbOdometry::Builder initOrbOdometry();
  inline void adoptOrbOdometry(::capnp::Orphan< ::cereal::OrbOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::OrbOdometry> disownOrbOdometry();

  inline bool isOrbFeatures();
  inline bool hasOrbFeatures();
  inline  ::cereal::OrbFeatures::Builder getOrbFeatures();
  inline void setOrbFeatures( ::cereal::OrbFeatures::Reader value);
  inline  ::cereal::OrbFeatures::Builder initOrbFeatures();
  inline void adoptOrbFeatures(::capnp::Orphan< ::cereal::OrbFeatures>&& value);
  inline ::capnp::Orphan< ::cereal::OrbFeatures> disownOrbFeatures();

  inline bool isApplanixLocation();
  inline bool hasApplanixLocation();
  inline  ::cereal::LiveLocationData::Builder getApplanixLocation();
  inline void setApplanixLocation( ::cereal::LiveLocationData::Reader value);
  inline  ::cereal::LiveLocationData::Builder initApplanixLocation();
  inline void adoptApplanixLocation(::capnp::Orphan< ::cereal::LiveLocationData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveLocationData> disownApplanixLocation();

  inline bool isOrbKeyFrame();
  inline bool hasOrbKeyFrame();
  inline  ::cereal::OrbKeyFrame::Builder getOrbKeyFrame();
  inline void setOrbKeyFrame( ::cereal::OrbKeyFrame::Reader value);
  inline  ::cereal::OrbKeyFrame::Builder initOrbKeyFrame();
  inline void adoptOrbKeyFrame(::capnp::Orphan< ::cereal::OrbKeyFrame>&& value);
  inline ::capnp::Orphan< ::cereal::OrbKeyFrame> disownOrbKeyFrame();

  inline bool isUiLayoutState();
  inline bool hasUiLayoutState();
  inline  ::cereal::UiLayoutState::Builder getUiLayoutState();
  inline void setUiLayoutState( ::cereal::UiLayoutState::Reader value);
  inline  ::cereal::UiLayoutState::Builder initUiLayoutState();
  inline void adoptUiLayoutState(::capnp::Orphan< ::cereal::UiLayoutState>&& value);
  inline ::capnp::Orphan< ::cereal::UiLayoutState> disownUiLayoutState();

  inline bool isOrbFeaturesSummary();
  inline bool hasOrbFeaturesSummary();
  inline  ::cereal::OrbFeaturesSummary::Builder getOrbFeaturesSummary();
  inline void setOrbFeaturesSummary( ::cereal::OrbFeaturesSummary::Reader value);
  inline  ::cereal::OrbFeaturesSummary::Builder initOrbFeaturesSummary();
  inline void adoptOrbFeaturesSummary(::capnp::Orphan< ::cereal::OrbFeaturesSummary>&& value);
  inline ::capnp::Orphan< ::cereal::OrbFeaturesSummary> disownOrbFeaturesSummary();

  inline bool isDriverState();
  inline bool hasDriverState();
  inline  ::cereal::DriverState::Builder getDriverState();
  inline void setDriverState( ::cereal::DriverState::Reader value);
  inline  ::cereal::DriverState::Builder initDriverState();
  inline void adoptDriverState(::capnp::Orphan< ::cereal::DriverState>&& value);
  inline ::capnp::Orphan< ::cereal::DriverState> disownDriverState();

  inline bool isBoot();
  inline bool hasBoot();
  inline  ::cereal::Boot::Builder getBoot();
  inline void setBoot( ::cereal::Boot::Reader value);
  inline  ::cereal::Boot::Builder initBoot();
  inline void adoptBoot(::capnp::Orphan< ::cereal::Boot>&& value);
  inline ::capnp::Orphan< ::cereal::Boot> disownBoot();

  inline bool isLiveParameters();
  inline bool hasLiveParameters();
  inline  ::cereal::LiveParametersData::Builder getLiveParameters();
  inline void setLiveParameters( ::cereal::LiveParametersData::Reader value);
  inline  ::cereal::LiveParametersData::Builder initLiveParameters();
  inline void adoptLiveParameters(::capnp::Orphan< ::cereal::LiveParametersData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveParametersData> disownLiveParameters();

  inline bool isLiveMapData();
  inline bool hasLiveMapData();
  inline  ::cereal::LiveMapData::Builder getLiveMapData();
  inline void setLiveMapData( ::cereal::LiveMapData::Reader value);
  inline  ::cereal::LiveMapData::Builder initLiveMapData();
  inline void adoptLiveMapData(::capnp::Orphan< ::cereal::LiveMapData>&& value);
  inline ::capnp::Orphan< ::cereal::LiveMapData> disownLiveMapData();

  inline bool isCameraOdometry();
  inline bool hasCameraOdometry();
  inline  ::cereal::CameraOdometry::Builder getCameraOdometry();
  inline void setCameraOdometry( ::cereal::CameraOdometry::Reader value);
  inline  ::cereal::CameraOdometry::Builder initCameraOdometry();
  inline void adoptCameraOdometry(::capnp::Orphan< ::cereal::CameraOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::CameraOdometry> disownCameraOdometry();

  inline bool isPathPlan();
  inline bool hasPathPlan();
  inline  ::cereal::PathPlan::Builder getPathPlan();
  inline void setPathPlan( ::cereal::PathPlan::Reader value);
  inline  ::cereal::PathPlan::Builder initPathPlan();
  inline void adoptPathPlan(::capnp::Orphan< ::cereal::PathPlan>&& value);
  inline ::capnp::Orphan< ::cereal::PathPlan> disownPathPlan();

  inline bool isKalmanOdometry();
  inline bool hasKalmanOdometry();
  inline  ::cereal::KalmanOdometry::Builder getKalmanOdometry();
  inline void setKalmanOdometry( ::cereal::KalmanOdometry::Reader value);
  inline  ::cereal::KalmanOdometry::Builder initKalmanOdometry();
  inline void adoptKalmanOdometry(::capnp::Orphan< ::cereal::KalmanOdometry>&& value);
  inline ::capnp::Orphan< ::cereal::KalmanOdometry> disownKalmanOdometry();

  inline bool isThumbnail();
  inline bool hasThumbnail();
  inline  ::cereal::Thumbnail::Builder getThumbnail();
  inline void setThumbnail( ::cereal::Thumbnail::Reader value);
  inline  ::cereal::Thumbnail::Builder initThumbnail();
  inline void adoptThumbnail(::capnp::Orphan< ::cereal::Thumbnail>&& value);
  inline ::capnp::Orphan< ::cereal::Thumbnail> disownThumbnail();

  inline bool getValid();
  inline void setValid(bool value);

  inline bool isCarEvents();
  inline bool hasCarEvents();
  inline  ::capnp::List< ::cereal::CarEvent>::Builder getCarEvents();
  inline void setCarEvents( ::capnp::List< ::cereal::CarEvent>::Reader value);
  inline  ::capnp::List< ::cereal::CarEvent>::Builder initCarEvents(unsigned int size);
  inline void adoptCarEvents(::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> disownCarEvents();

  inline bool isCarParams();
  inline bool hasCarParams();
  inline  ::cereal::CarParams::Builder getCarParams();
  inline void setCarParams( ::cereal::CarParams::Reader value);
  inline  ::cereal::CarParams::Builder initCarParams();
  inline void adoptCarParams(::capnp::Orphan< ::cereal::CarParams>&& value);
  inline ::capnp::Orphan< ::cereal::CarParams> disownCarParams();

  inline bool isFrontFrame();
  inline bool hasFrontFrame();
  inline  ::cereal::FrameData::Builder getFrontFrame();
  inline void setFrontFrame( ::cereal::FrameData::Reader value);
  inline  ::cereal::FrameData::Builder initFrontFrame();
  inline void adoptFrontFrame(::capnp::Orphan< ::cereal::FrameData>&& value);
  inline ::capnp::Orphan< ::cereal::FrameData> disownFrontFrame();

  inline bool isDMonitoringState();
  inline bool hasDMonitoringState();
  inline  ::cereal::DMonitoringState::Builder getDMonitoringState();
  inline void setDMonitoringState( ::cereal::DMonitoringState::Reader value);
  inline  ::cereal::DMonitoringState::Builder initDMonitoringState();
  inline void adoptDMonitoringState(::capnp::Orphan< ::cereal::DMonitoringState>&& value);
  inline ::capnp::Orphan< ::cereal::DMonitoringState> disownDMonitoringState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Reader Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Builder Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>::Builder Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>> Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::cereal::Map<Key, Value>::Entry>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return  ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey( ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Value> Map<Key, Value>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue( ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::Entry::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xf8b13ce2183eb696, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a5dfdd084a6eea0e, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// Map<Key, Value>
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::_capnpPrivate::brandScopes[] = {
  { 0xf8b13ce2183eb696, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::cereal::Map<Key, Value>::Entry::_capnpPrivate::brand() },
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f8b13ce2183eb696, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

inline bool InitData::Reader::hasKernelArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader InitData::Reader::getKernelArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::Builder::getKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelArgs( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void InitData::Builder::setKernelArgs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::Builder::initKernelArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelArgs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> InitData::Builder::disownKernelArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGctx() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGctx() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGctx() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGctx() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGctx( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGctx(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGctx(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGctx() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::cereal::InitData::DeviceType InitData::Reader::getDeviceType() const {
  return _reader.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::InitData::DeviceType InitData::Builder::getDeviceType() {
  return _builder.getDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDeviceType( ::cereal::InitData::DeviceType value) {
  _builder.setDataField< ::cereal::InitData::DeviceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidBuildInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidBuildInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::AndroidBuildInfo::Reader InitData::Reader::getAndroidBuildInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::getAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::AndroidBuildInfo::Pipeline InitData::Pipeline::getAndroidBuildInfo() {
  return  ::cereal::InitData::AndroidBuildInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidBuildInfo( ::cereal::InitData::AndroidBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::AndroidBuildInfo::Builder InitData::Builder::initAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidBuildInfo(
    ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::AndroidBuildInfo> InitData::Builder::disownAndroidBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::AndroidBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidSensors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidSensors() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Reader InitData::Reader::getAndroidSensors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Builder InitData::Builder::getAndroidSensors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setAndroidSensors( ::capnp::List< ::cereal::InitData::AndroidSensor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::InitData::AndroidSensor>::Builder InitData::Builder::initAndroidSensors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptAndroidSensors(
    ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::InitData::AndroidSensor>> InitData::Builder::disownAndroidSensors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::InitData::AndroidSensor>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasChffrAndroidExtra() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasChffrAndroidExtra() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::ChffrAndroidExtra::Reader InitData::Reader::getChffrAndroidExtra() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::getChffrAndroidExtra() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::ChffrAndroidExtra::Pipeline InitData::Pipeline::getChffrAndroidExtra() {
  return  ::cereal::InitData::ChffrAndroidExtra::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setChffrAndroidExtra( ::cereal::InitData::ChffrAndroidExtra::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::ChffrAndroidExtra::Builder InitData::Builder::initChffrAndroidExtra() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptChffrAndroidExtra(
    ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::ChffrAndroidExtra> InitData::Builder::disownChffrAndroidExtra() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::ChffrAndroidExtra>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasPandaInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasPandaInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::PandaInfo::Reader InitData::Reader::getPandaInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::getPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::PandaInfo::Pipeline InitData::Pipeline::getPandaInfo() {
  return  ::cereal::InitData::PandaInfo::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setPandaInfo( ::cereal::InitData::PandaInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::PandaInfo::Builder InitData::Builder::initPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptPandaInfo(
    ::capnp::Orphan< ::cereal::InitData::PandaInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::PandaInfo> InitData::Builder::disownPandaInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::PandaInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getDirty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getDirty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setDirty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitCommit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitCommit() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitCommit() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitCommit( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitCommit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitCommit(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitCommit() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasGitBranch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitBranch() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitBranch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitBranch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitBranch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitBranch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitBranch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::getPassive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool InitData::Builder::getPassive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void InitData::Builder::setPassive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::Reader::hasGitRemote() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasGitRemote() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getGitRemote() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setGitRemote( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initGitRemote(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptGitRemote(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownGitRemote() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasIosBuildInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasIosBuildInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::IosBuildInfo::Reader InitData::Reader::getIosBuildInfo() const {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::getIosBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::InitData::IosBuildInfo::Pipeline InitData::Pipeline::getIosBuildInfo() {
  return  ::cereal::InitData::IosBuildInfo::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setIosBuildInfo( ::cereal::InitData::IosBuildInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::IosBuildInfo::Builder InitData::Builder::initIosBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptIosBuildInfo(
    ::capnp::Orphan< ::cereal::InitData::IosBuildInfo>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData::IosBuildInfo> InitData::Builder::disownIosBuildInfo() {
  return ::capnp::_::PointerHelpers< ::cereal::InitData::IosBuildInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasKernelVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasKernelVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::Reader::getKernelVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::Builder::getKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::Builder::setKernelVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::Builder::initKernelVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::Builder::adoptKernelVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::Builder::disownKernelVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasAndroidProperties() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasAndroidProperties() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::Reader::getAndroidProperties() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::getAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::Pipeline::getAndroidProperties() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setAndroidProperties( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::initAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptAndroidProperties(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::Builder::disownAndroidProperties() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::Pipeline::getParams() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void InitData::Builder::setParams( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::Builder::adoptParams(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBoard() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBoard() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBoard() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBoard( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBoard(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBoard(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBoard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBootloader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBootloader() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBootloader() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBootloader( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBootloader(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBootloader(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBootloader() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasBrand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasBrand() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getBrand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setBrand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initBrand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptBrand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownBrand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDevice() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDevice() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDevice() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDevice( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDevice(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDevice(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDevice() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasDisplay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasDisplay() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getDisplay() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setDisplay( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initDisplay(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptDisplay(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownDisplay() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasFingerprint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasFingerprint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getFingerprint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setFingerprint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initFingerprint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptFingerprint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownFingerprint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHardware() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHardware() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHardware() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHardware( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHardware(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHardware(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHardware() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasHost() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasHost() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasManufacturer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasManufacturer() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getManufacturer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setManufacturer( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initManufacturer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptManufacturer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownManufacturer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasProduct() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasProduct() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getProduct() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setProduct( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initProduct(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptProduct(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownProduct() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasRadioVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasRadioVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getRadioVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setRadioVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initRadioVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptRadioVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownRadioVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSerial() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSerial() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getSerial() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSerial( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initSerial(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSerial(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownSerial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasSupportedAbis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasSupportedAbis() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader InitData::AndroidBuildInfo::Reader::getSupportedAbis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::AndroidBuildInfo::Builder::getSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline void InitData::AndroidBuildInfo::Builder::setSupportedAbis(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder InitData::AndroidBuildInfo::Builder::initSupportedAbis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptSupportedAbis(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> InitData::AndroidBuildInfo::Builder::disownSupportedAbis() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setTags( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline  ::int64_t InitData::AndroidBuildInfo::Reader::getTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t InitData::AndroidBuildInfo::Builder::getTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionCodename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionCodename() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionCodename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionCodename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionCodename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionCodename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionCodename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionRelease() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionRelease() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionRelease() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionRelease( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionRelease(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionRelease(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionRelease() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidBuildInfo::Reader::getVersionSdk() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidBuildInfo::Builder::getVersionSdk() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSdk( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidBuildInfo::Reader::hasVersionSecurityPatch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidBuildInfo::Builder::hasVersionSecurityPatch() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidBuildInfo::Reader::getVersionSecurityPatch() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::getVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void InitData::AndroidBuildInfo::Builder::setVersionSecurityPatch( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidBuildInfo::Builder::initVersionSecurityPatch(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidBuildInfo::Builder::adoptVersionSecurityPatch(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidBuildInfo::Builder::disownVersionSecurityPatch() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::AndroidSensor::Reader::hasVendor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasVendor() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getVendor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setVendor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initVendor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptVendor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownVendor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getHandle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getHandle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setHandle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getMaxRange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getMaxRange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxRange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getResolution() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getResolution() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setResolution(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float InitData::AndroidSensor::Reader::getPower() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float InitData::AndroidSensor::Builder::getPower() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setPower(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMinDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMinDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMinDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoReservedEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoReservedEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoReservedEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InitData::AndroidSensor::Reader::getFifoMaxEventCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::AndroidSensor::Builder::getFifoMaxEventCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setFifoMaxEventCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::AndroidSensor::Reader::hasStringType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::AndroidSensor::Builder::hasStringType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::AndroidSensor::Reader::getStringType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::getStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::AndroidSensor::Builder::setStringType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::AndroidSensor::Builder::initStringType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::AndroidSensor::Builder::adoptStringType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::AndroidSensor::Builder::disownStringType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t InitData::AndroidSensor::Reader::getMaxDelay() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t InitData::AndroidSensor::Builder::getMaxDelay() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void InitData::AndroidSensor::Builder::setMaxDelay( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::ChffrAndroidExtra::Reader::hasAllCameraCharacteristics() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::ChffrAndroidExtra::Builder::hasAllCameraCharacteristics() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader InitData::ChffrAndroidExtra::Reader::getAllCameraCharacteristics() const {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::getAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline InitData::ChffrAndroidExtra::Pipeline::getAllCameraCharacteristics() {
  return  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InitData::ChffrAndroidExtra::Builder::setAllCameraCharacteristics( ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Map< ::capnp::Text,  ::capnp::Text>::Builder InitData::ChffrAndroidExtra::Builder::initAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::ChffrAndroidExtra::Builder::adoptAllCameraCharacteristics(
    ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Map< ::capnp::Text,  ::capnp::Text>> InitData::ChffrAndroidExtra::Builder::disownAllCameraCharacteristics() {
  return ::capnp::_::PointerHelpers< ::cereal::Map< ::capnp::Text,  ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasAppVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasAppVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getAppVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setAppVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initAppVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptAppVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownAppVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t InitData::IosBuildInfo::Reader::getAppBuild() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InitData::IosBuildInfo::Builder::getAppBuild() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::IosBuildInfo::Builder::setAppBuild( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::IosBuildInfo::Reader::hasOsVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasOsVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getOsVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setOsVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initOsVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptOsVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownOsVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::IosBuildInfo::Reader::hasDeviceModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::IosBuildInfo::Builder::hasDeviceModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::IosBuildInfo::Reader::getDeviceModel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::getDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::IosBuildInfo::Builder::setDeviceModel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::IosBuildInfo::Builder::initDeviceModel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::IosBuildInfo::Builder::adoptDeviceModel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::IosBuildInfo::Builder::disownDeviceModel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::getHasPanda() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool InitData::PandaInfo::Builder::getHasPanda() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InitData::PandaInfo::Builder::setHasPanda(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InitData::PandaInfo::Reader::hasDongleId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasDongleId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getDongleId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setDongleId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initDongleId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptDongleId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownDongleId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasStVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasStVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getStVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setStVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initStVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptStVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownStVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitData::PandaInfo::Reader::hasEspVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitData::PandaInfo::Builder::hasEspVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitData::PandaInfo::Reader::getEspVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::getEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitData::PandaInfo::Builder::setEspVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitData::PandaInfo::Builder::initEspVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitData::PandaInfo::Builder::adoptEspVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitData::PandaInfo::Builder::disownEspVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t FrameData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FrameData::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FrameData::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getFrameLength() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getFrameLength() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getIntegLines() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getIntegLines() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setIntegLines( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::Reader::getGlobalGain() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getGlobalGain() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGlobalGain( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader FrameData::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder FrameData::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setImage( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder FrameData::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> FrameData::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::FrameData::FrameType FrameData::Reader::getFrameType() const {
  return _reader.getDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::FrameData::FrameType FrameData::Builder::getFrameType() {
  return _builder.getDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setFrameType( ::cereal::FrameData::FrameType value) {
  _builder.setDataField< ::cereal::FrameData::FrameType>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::Reader::getTimestampSof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::Builder::getTimestampSof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setTimestampSof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::Reader::hasAndroidCaptureResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasAndroidCaptureResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::AndroidCaptureResult::Reader FrameData::Reader::getAndroidCaptureResult() const {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::getAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::FrameData::AndroidCaptureResult::Pipeline FrameData::Pipeline::getAndroidCaptureResult() {
  return  ::cereal::FrameData::AndroidCaptureResult::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FrameData::Builder::setAndroidCaptureResult( ::cereal::FrameData::AndroidCaptureResult::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::AndroidCaptureResult::Builder FrameData::Builder::initAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::adoptAndroidCaptureResult(
    ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData::AndroidCaptureResult> FrameData::Builder::disownAndroidCaptureResult() {
  return ::capnp::_::PointerHelpers< ::cereal::FrameData::AndroidCaptureResult>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FrameData::Reader::hasTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::Builder::hasTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader FrameData::Reader::getTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder FrameData::Builder::getTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FrameData::Builder::setTransform( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void FrameData::Builder::setTransform(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder FrameData::Builder::initTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FrameData::Builder::adoptTransform(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> FrameData::Builder::disownTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t FrameData::Reader::getLensPos() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::Builder::getLensPos() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensPos( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensSag() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensSag() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensSag(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensErr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensErr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensErr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getLensTruePos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getLensTruePos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setLensTruePos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float FrameData::Reader::getGainFrac() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float FrameData::Builder::getGainFrac() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FrameData::Builder::setGainFrac(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Reader::getSensitivity() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FrameData::AndroidCaptureResult::Builder::getSensitivity() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setSensitivity( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getFrameDuration() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getFrameDuration() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setFrameDuration( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Reader::getExposureTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameData::AndroidCaptureResult::Builder::getExposureTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setExposureTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Reader::getRollingShutterSkew() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FrameData::AndroidCaptureResult::Builder::getRollingShutterSkew() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setRollingShutterSkew( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionTransform(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionTransform(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FrameData::AndroidCaptureResult::Reader::hasColorCorrectionGains() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FrameData::AndroidCaptureResult::Builder::hasColorCorrectionGains() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader FrameData::AndroidCaptureResult::Reader::getColorCorrectionGains() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder FrameData::AndroidCaptureResult::Builder::getColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void FrameData::AndroidCaptureResult::Builder::setColorCorrectionGains(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder FrameData::AndroidCaptureResult::Builder::initColorCorrectionGains(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FrameData::AndroidCaptureResult::Builder::adoptColorCorrectionGains(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> FrameData::AndroidCaptureResult::Builder::disownColorCorrectionGains() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int8_t FrameData::AndroidCaptureResult::Reader::getDisplayRotation() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t FrameData::AndroidCaptureResult::Builder::getDisplayRotation() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FrameData::AndroidCaptureResult::Builder::setDisplayRotation( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Thumbnail::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Thumbnail::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Thumbnail::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Thumbnail::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Thumbnail::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Thumbnail::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Thumbnail::Reader::hasThumbnail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Thumbnail::Builder::hasThumbnail() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Thumbnail::Reader::getThumbnail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Thumbnail::Builder::getThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Thumbnail::Builder::setThumbnail( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Thumbnail::Builder::initThumbnail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Thumbnail::Builder::adoptThumbnail(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Thumbnail::Builder::disownThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t GPSNMEAData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GPSNMEAData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GPSNMEAData::Reader::getLocalWallTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GPSNMEAData::Builder::getLocalWallTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSNMEAData::Builder::setLocalWallTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GPSNMEAData::Reader::hasNmea() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSNMEAData::Builder::hasNmea() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSNMEAData::Reader::getNmea() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::getNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSNMEAData::Builder::setNmea( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSNMEAData::Builder::initNmea(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GPSNMEAData::Builder::adoptNmea(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSNMEAData::Builder::disownNmea() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::Which SensorEventData::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::cereal::SensorEventData::Which SensorEventData::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getSensor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getSensor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSensor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SensorEventData::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SensorEventData::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t SensorEventData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t SensorEventData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isAcceleration() const {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Builder::isAcceleration() {
  return which() == SensorEventData::ACCELERATION;
}
inline bool SensorEventData::Reader::hasAcceleration() const {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasAcceleration() {
  if (which() != SensorEventData::ACCELERATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getAcceleration() const {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setAcceleration( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initAcceleration() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptAcceleration(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ACCELERATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownAcceleration() {
  KJ_IREQUIRE((which() == SensorEventData::ACCELERATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isMagnetic() const {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Builder::isMagnetic() {
  return which() == SensorEventData::MAGNETIC;
}
inline bool SensorEventData::Reader::hasMagnetic() const {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagnetic() {
  if (which() != SensorEventData::MAGNETIC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagnetic() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagnetic( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagnetic() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagnetic(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagnetic() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isOrientation() const {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Builder::isOrientation() {
  return which() == SensorEventData::ORIENTATION;
}
inline bool SensorEventData::Reader::hasOrientation() const {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasOrientation() {
  if (which() != SensorEventData::ORIENTATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getOrientation() const {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setOrientation( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initOrientation() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptOrientation(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::ORIENTATION);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownOrientation() {
  KJ_IREQUIRE((which() == SensorEventData::ORIENTATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyro() const {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Builder::isGyro() {
  return which() == SensorEventData::GYRO;
}
inline bool SensorEventData::Reader::hasGyro() const {
  if (which() != SensorEventData::GYRO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyro() {
  if (which() != SensorEventData::GYRO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyro() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyro( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyro() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyro(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyro() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::cereal::SensorEventData::SensorSource SensorEventData::Builder::getSource() {
  return _builder.getDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setSource( ::cereal::SensorEventData::SensorSource value) {
  _builder.setDataField< ::cereal::SensorEventData::SensorSource>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isPressure() const {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Builder::isPressure() {
  return which() == SensorEventData::PRESSURE;
}
inline bool SensorEventData::Reader::hasPressure() const {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasPressure() {
  if (which() != SensorEventData::PRESSURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getPressure() const {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setPressure( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initPressure() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptPressure(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PRESSURE);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownPressure() {
  KJ_IREQUIRE((which() == SensorEventData::PRESSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::getUncalibratedDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool SensorEventData::Builder::getUncalibratedDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setUncalibratedDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isMagneticUncalibrated() const {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isMagneticUncalibrated() {
  return which() == SensorEventData::MAGNETIC_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasMagneticUncalibrated() const {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasMagneticUncalibrated() {
  if (which() != SensorEventData::MAGNETIC_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getMagneticUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setMagneticUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initMagneticUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptMagneticUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::MAGNETIC_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownMagneticUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::MAGNETIC_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isGyroUncalibrated() const {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Builder::isGyroUncalibrated() {
  return which() == SensorEventData::GYRO_UNCALIBRATED;
}
inline bool SensorEventData::Reader::hasGyroUncalibrated() const {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::Builder::hasGyroUncalibrated() {
  if (which() != SensorEventData::GYRO_UNCALIBRATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::SensorVec::Reader SensorEventData::Reader::getGyroUncalibrated() const {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::getGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::setGyroUncalibrated( ::cereal::SensorEventData::SensorVec::Reader value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::SensorVec::Builder SensorEventData::Builder::initGyroUncalibrated() {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::Builder::adoptGyroUncalibrated(
    ::capnp::Orphan< ::cereal::SensorEventData::SensorVec>&& value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::GYRO_UNCALIBRATED);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData::SensorVec> SensorEventData::Builder::disownGyroUncalibrated() {
  KJ_IREQUIRE((which() == SensorEventData::GYRO_UNCALIBRATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData::SensorVec>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorEventData::Reader::isProximity() const {
  return which() == SensorEventData::PROXIMITY;
}
inline bool SensorEventData::Builder::isProximity() {
  return which() == SensorEventData::PROXIMITY;
}
inline float SensorEventData::Reader::getProximity() const {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getProximity() {
  KJ_IREQUIRE((which() == SensorEventData::PROXIMITY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setProximity(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::PROXIMITY);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::Reader::isLight() const {
  return which() == SensorEventData::LIGHT;
}
inline bool SensorEventData::Builder::isLight() {
  return which() == SensorEventData::LIGHT;
}
inline float SensorEventData::Reader::getLight() const {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float SensorEventData::Builder::getLight() {
  KJ_IREQUIRE((which() == SensorEventData::LIGHT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::Builder::setLight(float value) {
  _builder.setDataField<SensorEventData::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, SensorEventData::LIGHT);
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool SensorEventData::SensorVec::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorEventData::SensorVec::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader SensorEventData::SensorVec::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder SensorEventData::SensorVec::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorEventData::SensorVec::Builder::setV( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void SensorEventData::SensorVec::Builder::setV(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder SensorEventData::SensorVec::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SensorEventData::SensorVec::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> SensorEventData::SensorVec::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t SensorEventData::SensorVec::Reader::getStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t SensorEventData::SensorVec::Builder::getStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorEventData::SensorVec::Builder::setStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t GpsLocationData::Reader::getFlags() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t GpsLocationData::Builder::getFlags() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setFlags( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GpsLocationData::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GpsLocationData::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearing() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearing() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearing(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t GpsLocationData::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GpsLocationData::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::GpsLocationData::SensorSource GpsLocationData::Builder::getSource() {
  return _builder.getDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSource( ::cereal::GpsLocationData::SensorSource value) {
  _builder.setDataField< ::cereal::GpsLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GpsLocationData::Reader::hasVNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GpsLocationData::Builder::hasVNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader GpsLocationData::Reader::getVNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder GpsLocationData::Builder::getVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GpsLocationData::Builder::setVNED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GpsLocationData::Builder::setVNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder GpsLocationData::Builder::initVNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GpsLocationData::Builder::adoptVNED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> GpsLocationData::Builder::disownVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float GpsLocationData::Reader::getVerticalAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getVerticalAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setVerticalAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getBearingAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getBearingAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setBearingAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float GpsLocationData::Reader::getSpeedAccuracy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float GpsLocationData::Builder::getSpeedAccuracy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void GpsLocationData::Builder::setSpeedAccuracy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CanData::Reader::getAddress() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CanData::Builder::getAddress() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t CanData::Reader::getBusTime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t CanData::Builder::getBusTime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setBusTime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool CanData::Reader::hasDat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CanData::Builder::hasDat() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CanData::Reader::getDat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CanData::Builder::getDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CanData::Builder::setDat( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CanData::Builder::initDat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CanData::Builder::adoptDat(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CanData::Builder::disownDat() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t CanData::Reader::getSrc() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CanData::Builder::getSrc() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CanData::Builder::setSrc( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu0() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu0() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu0( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getCpu3() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getCpu3() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpu3( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getMem() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getMem() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setMem( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getGpu() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getGpu() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setGpu( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ThermalData::Reader::getBat() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ThermalData::Builder::getBat() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBat( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ThermalData::Reader::getFreeSpace() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ThermalData::Builder::getFreeSpace() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setFreeSpace(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ThermalData::Reader::getBatteryPercent() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ThermalData::Builder::getBatteryPercent() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBatteryPercent( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::hasBatteryStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ThermalData::Builder::hasBatteryStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ThermalData::Reader::getBatteryStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ThermalData::Builder::getBatteryStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ThermalData::Builder::setBatteryStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ThermalData::Builder::initBatteryStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ThermalData::Builder::adoptBatteryStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ThermalData::Builder::disownBatteryStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t ThermalData::Reader::getFanSpeed() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getFanSpeed() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setFanSpeed( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::getStarted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool ThermalData::Builder::getStarted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setStarted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::getUsbOnline() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool ThermalData::Builder::getUsbOnline() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setUsbOnline(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ThermalData::Reader::getStartedTs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ThermalData::Builder::getStartedTs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setStartedTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ThermalData::ThermalStatus ThermalData::Reader::getThermalStatus() const {
  return _reader.getDataField< ::cereal::ThermalData::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ThermalData::ThermalStatus ThermalData::Builder::getThermalStatus() {
  return _builder.getDataField< ::cereal::ThermalData::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setThermalStatus( ::cereal::ThermalData::ThermalStatus value) {
  _builder.setDataField< ::cereal::ThermalData::ThermalStatus>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ThermalData::Reader::getBatteryCurrent() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThermalData::Builder::getBatteryCurrent() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBatteryCurrent( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ThermalData::Reader::getBatteryVoltage() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThermalData::Builder::getBatteryVoltage() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setBatteryVoltage( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::getChargingError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}

inline bool ThermalData::Builder::getChargingError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setChargingError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<194>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::getChargingDisabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS);
}

inline bool ThermalData::Builder::getChargingDisabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setChargingDisabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<195>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t ThermalData::Reader::getMemUsedPercent() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::int8_t ThermalData::Builder::getMemUsedPercent() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setMemUsedPercent( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t ThermalData::Reader::getCpuPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::int8_t ThermalData::Builder::getCpuPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setCpuPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ThermalData::Reader::getPa0() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ThermalData::Builder::getPa0() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setPa0( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ThermalData::NetworkType ThermalData::Reader::getNetworkType() const {
  return _reader.getDataField< ::cereal::ThermalData::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ThermalData::NetworkType ThermalData::Builder::getNetworkType() {
  return _builder.getDataField< ::cereal::ThermalData::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setNetworkType( ::cereal::ThermalData::NetworkType value) {
  _builder.setDataField< ::cereal::ThermalData::NetworkType>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ThermalData::Reader::getOffroadPowerUsage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ThermalData::Builder::getOffroadPowerUsage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ThermalData::Builder::setOffroadPowerUsage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool ThermalData::Reader::hasIpAddr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ThermalData::Builder::hasIpAddr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ThermalData::Reader::getIpAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ThermalData::Builder::getIpAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ThermalData::Builder::setIpAddr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ThermalData::Builder::initIpAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ThermalData::Builder::adoptIpAddr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ThermalData::Builder::disownIpAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t HealthData::Reader::getVoltage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getVoltage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setVoltage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getCurrent() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getCurrent() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setCurrent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getIgnitionLine() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getIgnitionLine() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setIgnitionLine(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getControlsAllowed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getControlsAllowed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setControlsAllowed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getGasInterceptorDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getGasInterceptorDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setGasInterceptorDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getStartedSignalDetectedDeprecated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getStartedSignalDetectedDeprecated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setStartedSignalDetectedDeprecated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getHasGps() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getHasGps() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setHasGps(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getCanSendErrs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getCanSendErrs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setCanSendErrs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getCanFwdErrs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getCanFwdErrs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setCanFwdErrs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getGmlanSendErrs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getGmlanSendErrs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setGmlanSendErrs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::HealthData::HwType HealthData::Reader::getHwType() const {
  return _reader.getDataField< ::cereal::HealthData::HwType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::cereal::HealthData::HwType HealthData::Builder::getHwType() {
  return _builder.getDataField< ::cereal::HealthData::HwType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setHwType( ::cereal::HealthData::HwType value) {
  _builder.setDataField< ::cereal::HealthData::HwType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t HealthData::Reader::getFanSpeedRpm() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t HealthData::Builder::getFanSpeedRpm() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setFanSpeedRpm( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::HealthData::UsbPowerMode HealthData::Reader::getUsbPowerMode() const {
  return _reader.getDataField< ::cereal::HealthData::UsbPowerMode>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::cereal::HealthData::UsbPowerMode HealthData::Builder::getUsbPowerMode() {
  return _builder.getDataField< ::cereal::HealthData::UsbPowerMode>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setUsbPowerMode( ::cereal::HealthData::UsbPowerMode value) {
  _builder.setDataField< ::cereal::HealthData::UsbPowerMode>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getIgnitionCan() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getIgnitionCan() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setIgnitionCan(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarParams::SafetyModel HealthData::Reader::getSafetyModel() const {
  return _reader.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarParams::SafetyModel HealthData::Builder::getSafetyModel() {
  return _builder.getDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setSafetyModel( ::cereal::CarParams::SafetyModel value) {
  _builder.setDataField< ::cereal::CarParams::SafetyModel>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::HealthData::FaultStatus HealthData::Reader::getFaultStatus() const {
  return _reader.getDataField< ::cereal::HealthData::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::cereal::HealthData::FaultStatus HealthData::Builder::getFaultStatus() {
  return _builder.getDataField< ::cereal::HealthData::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setFaultStatus( ::cereal::HealthData::FaultStatus value) {
  _builder.setDataField< ::cereal::HealthData::FaultStatus>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::getPowerSaveEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool HealthData::Builder::getPowerSaveEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setPowerSaveEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HealthData::Reader::getUptime() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getUptime() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setUptime( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool HealthData::Reader::hasFaults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HealthData::Builder::hasFaults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::HealthData::FaultType>::Reader HealthData::Reader::getFaults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::HealthData::FaultType>::Builder HealthData::Builder::getFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HealthData::Builder::setFaults( ::capnp::List< ::cereal::HealthData::FaultType>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void HealthData::Builder::setFaults(::kj::ArrayPtr<const  ::cereal::HealthData::FaultType> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::HealthData::FaultType>::Builder HealthData::Builder::initFaults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HealthData::Builder::adoptFaults(
    ::capnp::Orphan< ::capnp::List< ::cereal::HealthData::FaultType>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::HealthData::FaultType>> HealthData::Builder::disownFaults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::HealthData::FaultType>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t HealthData::Reader::getCanRxErrs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HealthData::Builder::getCanRxErrs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void HealthData::Builder::setCanRxErrs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool LiveUI::Reader::getRearViewCam() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveUI::Builder::getRearViewCam() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setRearViewCam(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LiveUI::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveUI::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveUI::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveUI::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveUI::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveUI::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveUI::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveUI::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveUI::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LiveUI::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveUI::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveUI::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasWarpMatrixDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasWarpMatrixDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader RadarState::Reader::getWarpMatrixDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder RadarState::Builder::getWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setWarpMatrixDEPRECATED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setWarpMatrixDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder RadarState::Builder::initWarpMatrixDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptWarpMatrixDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> RadarState::Builder::disownWarpMatrixDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float RadarState::Reader::getAngleOffsetDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float RadarState::Builder::getAngleOffsetDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setAngleOffsetDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RadarState::Reader::getCalStatusDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RadarState::Builder::getCalStatusDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalStatusDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasLeadOne() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadOne() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadOne() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadOne() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadOne( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadOne(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadOne() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarState::Reader::hasLeadTwo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasLeadTwo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::LeadData::Reader RadarState::Reader::getLeadTwo() const {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::getLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::RadarState::LeadData::Pipeline RadarState::Pipeline::getLeadTwo() {
  return  ::cereal::RadarState::LeadData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RadarState::Builder::setLeadTwo( ::cereal::RadarState::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::LeadData::Builder RadarState::Builder::initLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::adoptLeadTwo(
    ::capnp::Orphan< ::cereal::RadarState::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState::LeadData> RadarState::Builder::disownLeadTwo() {
  return ::capnp::_::PointerHelpers< ::cereal::RadarState::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float RadarState::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarState::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarState::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarState::Reader::getFtMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getFtMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setFtMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RadarState::Reader::getCalCycleDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RadarState::Builder::getCalCycleDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalCycleDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RadarState::Reader::getCalPercDEPRECATED() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RadarState::Builder::getCalPercDEPRECATED() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setCalPercDEPRECATED( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader RadarState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder RadarState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder RadarState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> RadarState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarState::Reader::getControlsStateMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarState::Builder::getControlsStateMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::Builder::setControlsStateMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::Reader::hasRadarErrors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RadarState::Builder::hasRadarErrors() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Reader RadarState::Reader::getRadarErrors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Builder RadarState::Builder::getRadarErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RadarState::Builder::setRadarErrors( ::capnp::List< ::cereal::RadarData::Error>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void RadarState::Builder::setRadarErrors(::kj::ArrayPtr<const  ::cereal::RadarData::Error> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::RadarData::Error>::Builder RadarState::Builder::initRadarErrors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void RadarState::Builder::adoptRadarErrors(
    ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::RadarData::Error>> RadarState::Builder::disownRadarErrors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::RadarData::Error>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float RadarState::LeadData::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getDPath() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getDPath() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setDPath(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getVLeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getVLeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setVLeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadK() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadK() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadK(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<320>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<321>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getALeadTau() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getALeadTau() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setALeadTau(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float RadarState::LeadData::Reader::getModelProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float RadarState::LeadData::Builder::getModelProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setModelProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool RadarState::LeadData::Reader::getRadar() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS);
}

inline bool RadarState::LeadData::Builder::getRadar() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS);
}
inline void RadarState::LeadData::Builder::setRadar(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<322>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasWarpMatrix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrix() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getWarpMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getWarpMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrix( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrix(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initWarpMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrix(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownWarpMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t LiveCalibrationData::Reader::getCalStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveCalibrationData::Reader::getCalCycle() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveCalibrationData::Builder::getCalCycle() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalCycle( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t LiveCalibrationData::Reader::getCalPerc() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t LiveCalibrationData::Builder::getCalPerc() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveCalibrationData::Builder::setCalPerc( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveCalibrationData::Reader::hasExtrinsicMatrix() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasExtrinsicMatrix() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getExtrinsicMatrix() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setExtrinsicMatrix(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initExtrinsicMatrix(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptExtrinsicMatrix(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownExtrinsicMatrix() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrix2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrix2() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getWarpMatrix2() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getWarpMatrix2() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrix2( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrix2(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initWarpMatrix2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrix2(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownWarpMatrix2() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasWarpMatrixBig() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasWarpMatrixBig() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getWarpMatrixBig() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getWarpMatrixBig() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setWarpMatrixBig( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setWarpMatrixBig(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initWarpMatrixBig(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptWarpMatrixBig(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownWarpMatrixBig() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveCalibrationData::Reader::hasRpyCalib() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveCalibrationData::Builder::hasRpyCalib() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveCalibrationData::Reader::getRpyCalib() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::getRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveCalibrationData::Builder::setRpyCalib( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveCalibrationData::Builder::setRpyCalib(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveCalibrationData::Builder::initRpyCalib(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveCalibrationData::Builder::adoptRpyCalib(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveCalibrationData::Builder::disownRpyCalib() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveTracks::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveTracks::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getDRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getDRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setDRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getYRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getYRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setYRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getVRel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getVRel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setVRel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getARel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getARel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setARel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getTimeStamp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getTimeStamp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setTimeStamp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveTracks::Reader::getCurrentTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveTracks::Builder::getCurrentTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setCurrentTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getStationary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getStationary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setStationary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<256>() * ::capnp::ELEMENTS, value);
}

inline bool LiveTracks::Reader::getOncoming() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}

inline bool LiveTracks::Builder::getOncoming() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS);
}
inline void LiveTracks::Builder::setOncoming(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<257>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAEgoDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAEgoDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAEgoDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVPid() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVPid() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVPid(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVTargetLead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVTargetLead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVTargetLead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYActualDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYActualDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYActualDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getYDesDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getYDesDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setYDesDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUpSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUpSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUpSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUiSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUiSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUiSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMinDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMinDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMinDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATargetMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATargetMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATargetMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getJerkFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getJerkFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setJerkFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleSteers() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleSteers() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleSteers(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ControlsState::Reader::getHudLeadDEPRECATED() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ControlsState::Builder::getHudLeadDEPRECATED() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setHudLeadDEPRECATED( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCumLagMs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCumLagMs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCumLagMs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getCanMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getCanMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getRadarStateMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getRadarStateMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRadarStateMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getMdMonoTimeDEPRECATED() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getMdMonoTimeDEPRECATED() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMdMonoTimeDEPRECATED( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<704>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getSteerOverride() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getSteerOverride() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setSteerOverride(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<705>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasCanMonoTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasCanMonoTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader ControlsState::Reader::getCanMonoTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder ControlsState::Builder::getCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setCanMonoTimes( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ControlsState::Builder::setCanMonoTimes(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder ControlsState::Builder::initCanMonoTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptCanMonoTimes(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> ControlsState::Builder::disownCanMonoTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCruise() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCruise() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCruise(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getRearViewCam() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getRearViewCam() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setRearViewCam(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<706>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertText1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText1() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertText2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertText2() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertText2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertText2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertText2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertText2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertText2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleModelBiasDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleModelBiasDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleModelBiasDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAngleSteersDes() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAngleSteersDes() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAngleSteersDes(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::LongControlState ControlsState::Reader::getLongControlState() const {
  return _reader.getDataField< ::cereal::ControlsState::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::LongControlState ControlsState::Builder::getLongControlState() {
  return _builder.getDataField< ::cereal::ControlsState::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setLongControlState( ::cereal::ControlsState::LongControlState value) {
  _builder.setDataField< ::cereal::ControlsState::LongControlState>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::OpenpilotState ControlsState::Reader::getState() const {
  return _reader.getDataField< ::cereal::ControlsState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::OpenpilotState ControlsState::Builder::getState() {
  return _builder.getDataField< ::cereal::ControlsState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setState( ::cereal::ControlsState::OpenpilotState value) {
  _builder.setDataField< ::cereal::ControlsState::OpenpilotState>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getVEgoRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVEgoRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVEgoRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfAccelCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfAccelCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfAccelCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getUfSteerDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getUfSteerDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setUfSteerDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getATarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getATarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setATarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<707>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::AlertStatus ControlsState::Reader::getAlertStatus() const {
  return _reader.getDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::AlertStatus ControlsState::Builder::getAlertStatus() {
  return _builder.getDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertStatus( ::cereal::ControlsState::AlertStatus value) {
  _builder.setDataField< ::cereal::ControlsState::AlertStatus>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::AlertSize ControlsState::Reader::getAlertSize() const {
  return _reader.getDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline  ::cereal::ControlsState::AlertSize ControlsState::Builder::getAlertSize() {
  return _builder.getDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSize( ::cereal::ControlsState::AlertSize value) {
  _builder.setDataField< ::cereal::ControlsState::AlertSize>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getGpsPlannerActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getGpsPlannerActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setGpsPlannerActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<708>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getEngageable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getEngageable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setEngageable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<709>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::Reader::getAlertBlinkingRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getAlertBlinkingRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertBlinkingRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDriverMonitoringOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDriverMonitoringOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDriverMonitoringOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<710>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::hasAlertType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertType() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ControlsState::Reader::hasAlertSoundDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::Builder::hasAlertSoundDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ControlsState::Reader::getAlertSoundDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ControlsState::Builder::getAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ControlsState::Builder::setAlertSoundDEPRECATED( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ControlsState::Builder::initAlertSoundDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ControlsState::Builder::adoptAlertSoundDEPRECATED(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ControlsState::Builder::disownAlertSoundDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float ControlsState::Reader::getVCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline float ControlsState::Builder::getVCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setVCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getDecelForTurn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForTurn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForTurn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<711>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getStartMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getStartMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setStartMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getMapValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getMapValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setMapValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<712>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlsState::Reader::getPathPlanMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlsState::Builder::getPathPlanMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setPathPlanMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::Reader::getForceDecel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getForceDecel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setForceDecel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<713>() * ::capnp::ELEMENTS, value);
}

inline typename ControlsState::LateralControlState::Reader ControlsState::Reader::getLateralControlState() const {
  return typename ControlsState::LateralControlState::Reader(_reader);
}
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::getLateralControlState() {
  return typename ControlsState::LateralControlState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ControlsState::LateralControlState::Pipeline ControlsState::Pipeline::getLateralControlState() {
  return typename ControlsState::LateralControlState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ControlsState::LateralControlState::Builder ControlsState::Builder::initLateralControlState() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<71>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename ControlsState::LateralControlState::Builder(_builder);
}
inline bool ControlsState::Reader::getDecelForModel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::Builder::getDecelForModel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setDecelForModel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<714>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Reader::getAlertSound() const {
  return _reader.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}

inline  ::cereal::CarControl::HUDControl::AudibleAlert ControlsState::Builder::getAlertSound() {
  return _builder.getDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setAlertSound( ::cereal::CarControl::HUDControl::AudibleAlert value) {
  _builder.setDataField< ::cereal::CarControl::HUDControl::AudibleAlert>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlsState::Reader::getCanErrorCounter() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlsState::Builder::getCanErrorCounter() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void ControlsState::Builder::setCanErrorCounter( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteerAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteerAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteerAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteerRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteerRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteerRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getSteerAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getSteerAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSteerAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getRateSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getRateSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setRateSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelSetPoint() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelSetPoint() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelSetPoint(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getAccelError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getAccelError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setAccelError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelayedOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelayedOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelayedOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getDelta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getDelta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setDelta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralINDIState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralINDIState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralINDIState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralINDIState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralINDIState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteerAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteerAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteerAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getSteerRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getSteerRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSteerRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getAngleError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getAngleError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setAngleError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getP() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getP() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setP(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralPIDState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralPIDState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralPIDState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralPIDState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralPIDState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getSteerAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getSteerAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSteerAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getI() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getI() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setI(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ControlsState::LateralLQRState::Reader::getLqrOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ControlsState::LateralLQRState::Builder::getLqrOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setLqrOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ControlsState::LateralLQRState::Reader::getSaturated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralLQRState::Builder::getSaturated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlsState::LateralLQRState::Builder::setSaturated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline  ::cereal::ControlsState::LateralControlState::Which ControlsState::LateralControlState::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool ControlsState::LateralControlState::Reader::isIndiState() const {
  return which() == ControlsState::LateralControlState::INDI_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isIndiState() {
  return which() == ControlsState::LateralControlState::INDI_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasIndiState() const {
  if (which() != ControlsState::LateralControlState::INDI_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasIndiState() {
  if (which() != ControlsState::LateralControlState::INDI_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralINDIState::Reader ControlsState::LateralControlState::Reader::getIndiState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::getIndiState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setIndiState( ::cereal::ControlsState::LateralINDIState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralINDIState::Builder ControlsState::LateralControlState::Builder::initIndiState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptIndiState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::INDI_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralINDIState> ControlsState::LateralControlState::Builder::disownIndiState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::INDI_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralINDIState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isPidState() const {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isPidState() {
  return which() == ControlsState::LateralControlState::PID_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasPidState() const {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasPidState() {
  if (which() != ControlsState::LateralControlState::PID_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralPIDState::Reader ControlsState::LateralControlState::Reader::getPidState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::getPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setPidState( ::cereal::ControlsState::LateralPIDState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralPIDState::Builder ControlsState::LateralControlState::Builder::initPidState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptPidState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::PID_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralPIDState> ControlsState::LateralControlState::Builder::disownPidState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::PID_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralPIDState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ControlsState::LateralControlState::Reader::isLqrState() const {
  return which() == ControlsState::LateralControlState::LQR_STATE;
}
inline bool ControlsState::LateralControlState::Builder::isLqrState() {
  return which() == ControlsState::LateralControlState::LQR_STATE;
}
inline bool ControlsState::LateralControlState::Reader::hasLqrState() const {
  if (which() != ControlsState::LateralControlState::LQR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ControlsState::LateralControlState::Builder::hasLqrState() {
  if (which() != ControlsState::LateralControlState::LQR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::LateralLQRState::Reader ControlsState::LateralControlState::Reader::getLqrState() const {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::getLqrState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::setLqrState( ::cereal::ControlsState::LateralLQRState::Reader value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::LateralLQRState::Builder ControlsState::LateralControlState::Builder::initLqrState() {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ControlsState::LateralControlState::Builder::adoptLqrState(
    ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState>&& value) {
  _builder.setDataField<ControlsState::LateralControlState::Which>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, ControlsState::LateralControlState::LQR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState::LateralLQRState> ControlsState::LateralControlState::Builder::disownLqrState() {
  KJ_IREQUIRE((which() == ControlsState::LateralControlState::LQR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState::LateralLQRState>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LiveEventData::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveEventData::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LiveEventData::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LiveEventData::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveEventData::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LiveEventData::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveEventData::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LiveEventData::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LiveEventData::Reader::getValue() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveEventData::Builder::getValue() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveEventData::Builder::setValue( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModelData::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModelData::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getPath() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setPath( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptPath(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLeftLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLeftLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getLeftLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getLeftLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLeftLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLeftLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownLeftLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasRightLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasRightLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::PathData::Reader ModelData::Reader::getRightLane() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::getRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::PathData::Pipeline ModelData::Pipeline::getRightLane() {
  return  ::cereal::ModelData::PathData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setRightLane( ::cereal::ModelData::PathData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::PathData::Builder ModelData::Builder::initRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptRightLane(
    ::capnp::Orphan< ::cereal::ModelData::PathData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::PathData> ModelData::Builder::disownRightLane() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::PathData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LeadData::Reader ModelData::Reader::getLead() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::getLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LeadData::Pipeline ModelData::Pipeline::getLead() {
  return  ::cereal::ModelData::LeadData::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLead( ::cereal::ModelData::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::initLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLead(
    ::capnp::Orphan< ::cereal::ModelData::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LeadData> ModelData::Builder::disownLead() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::ModelSettings::Reader ModelData::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::ModelSettings::Pipeline ModelData::Pipeline::getSettings() {
  return  ::cereal::ModelData::ModelSettings::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setSettings( ::cereal::ModelData::ModelSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::ModelSettings::Builder ModelData::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptSettings(
    ::capnp::Orphan< ::cereal::ModelData::ModelSettings>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::ModelSettings> ModelData::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::ModelSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasFreePath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasFreePath() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::Reader::getFreePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::Builder::getFreePath() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::setFreePath( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ModelData::Builder::setFreePath(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::Builder::initFreePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ModelData::Builder::adoptFreePath(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::Builder::disownFreePath() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLeadFuture() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLeadFuture() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LeadData::Reader ModelData::Reader::getLeadFuture() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::getLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LeadData::Pipeline ModelData::Pipeline::getLeadFuture() {
  return  ::cereal::ModelData::LeadData::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLeadFuture( ::cereal::ModelData::LeadData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LeadData::Builder ModelData::Builder::initLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLeadFuture(
    ::capnp::Orphan< ::cereal::ModelData::LeadData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LeadData> ModelData::Builder::disownLeadFuture() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LeadData>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::Reader::getSpeed() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::Builder::getSpeed() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::setSpeed( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ModelData::Builder::setSpeed(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::Builder::initSpeed(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ModelData::Builder::adoptSpeed(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::Builder::disownSpeed() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t ModelData::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ModelData::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::Reader::hasMeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasMeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::MetaData::Reader ModelData::Reader::getMeta() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::MetaData::Builder ModelData::Builder::getMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::MetaData::Pipeline ModelData::Pipeline::getMeta() {
  return  ::cereal::ModelData::MetaData::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setMeta( ::cereal::ModelData::MetaData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::MetaData::Builder ModelData::Builder::initMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptMeta(
    ::capnp::Orphan< ::cereal::ModelData::MetaData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::MetaData> ModelData::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::MetaData>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ModelData::Reader::hasLongitudinal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::Builder::hasLongitudinal() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::LongitudinalData::Reader ModelData::Reader::getLongitudinal() const {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::LongitudinalData::Builder ModelData::Builder::getLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ModelData::LongitudinalData::Pipeline ModelData::Pipeline::getLongitudinal() {
  return  ::cereal::ModelData::LongitudinalData::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ModelData::Builder::setLongitudinal( ::cereal::ModelData::LongitudinalData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::LongitudinalData::Builder ModelData::Builder::initLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ModelData::Builder::adoptLongitudinal(
    ::capnp::Orphan< ::cereal::ModelData::LongitudinalData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData::LongitudinalData> ModelData::Builder::disownLongitudinal() {
  return ::capnp::_::PointerHelpers< ::cereal::ModelData::LongitudinalData>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ModelData::PathData::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::PathData::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setPoints( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setPoints(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::PathData::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelData::PathData::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::PathData::Reader::getStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::PathData::Builder::getStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::PathData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::PathData::Reader::hasStds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasStds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::PathData::Reader::getStds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::getStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setStds( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setStds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::initStds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptStds(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::PathData::Builder::disownStds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::PathData::Reader::hasPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::PathData::Builder::hasPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::PathData::Reader::getPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::getPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::PathData::Builder::setPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelData::PathData::Builder::setPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::PathData::Builder::initPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelData::PathData::Builder::adoptPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::PathData::Builder::disownPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ModelData::LeadData::Reader::getDist() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getDist() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setDist(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelVelStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelVelStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelVelStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelYStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelYStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelYStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelA() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelA() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelA(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::LeadData::Reader::getRelAStd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ModelData::LeadData::Builder::getRelAStd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ModelData::LeadData::Builder::setRelAStd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxX() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxX() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxX( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxY() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxY() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxY( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxWidth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxWidth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ModelData::ModelSettings::Reader::getBigBoxHeight() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ModelData::ModelSettings::Builder::getBigBoxHeight() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::ModelSettings::Builder::setBigBoxHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::ModelSettings::Reader::hasBoxProjection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasBoxProjection() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::ModelSettings::Reader::getBoxProjection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::getBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setBoxProjection( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setBoxProjection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::initBoxProjection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptBoxProjection(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::ModelSettings::Builder::disownBoxProjection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::ModelSettings::Reader::hasYuvCorrection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasYuvCorrection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::ModelSettings::Reader::getYuvCorrection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::getYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setYuvCorrection(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::initYuvCorrection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptYuvCorrection(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::ModelSettings::Builder::disownYuvCorrection() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ModelData::ModelSettings::Reader::hasInputTransform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::ModelSettings::Builder::hasInputTransform() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::ModelSettings::Reader::getInputTransform() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::getInputTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ModelData::ModelSettings::Builder::setInputTransform( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ModelData::ModelSettings::Builder::setInputTransform(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::ModelSettings::Builder::initInputTransform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ModelData::ModelSettings::Builder::adoptInputTransform(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::ModelSettings::Builder::disownInputTransform() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ModelData::MetaData::Reader::getEngagedProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getEngagedProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setEngagedProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::MetaData::Reader::hasDesirePrediction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::MetaData::Builder::hasDesirePrediction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::MetaData::Reader::getDesirePrediction() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::MetaData::Builder::getDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::MetaData::Builder::setDesirePrediction( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::MetaData::Builder::setDesirePrediction(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::MetaData::Builder::initDesirePrediction(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::MetaData::Builder::adoptDesirePrediction(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::MetaData::Builder::disownDesirePrediction() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ModelData::MetaData::Reader::getBrakeDisengageProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getBrakeDisengageProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setBrakeDisengageProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::MetaData::Reader::getGasDisengageProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getGasDisengageProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setGasDisengageProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ModelData::MetaData::Reader::getSteerOverrideProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ModelData::MetaData::Builder::getSteerOverrideProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModelData::MetaData::Builder::setSteerOverrideProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModelData::LongitudinalData::Reader::hasSpeeds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::LongitudinalData::Builder::hasSpeeds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::LongitudinalData::Reader::getSpeeds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::LongitudinalData::Builder::getSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelData::LongitudinalData::Builder::setSpeeds( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ModelData::LongitudinalData::Builder::setSpeeds(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::LongitudinalData::Builder::initSpeeds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelData::LongitudinalData::Builder::adoptSpeeds(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::LongitudinalData::Builder::disownSpeeds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelData::LongitudinalData::Reader::hasAccelerations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelData::LongitudinalData::Builder::hasAccelerations() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader ModelData::LongitudinalData::Reader::getAccelerations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder ModelData::LongitudinalData::Builder::getAccelerations() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelData::LongitudinalData::Builder::setAccelerations( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelData::LongitudinalData::Builder::setAccelerations(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder ModelData::LongitudinalData::Builder::initAccelerations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelData::LongitudinalData::Builder::adoptAccelerations(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> ModelData::LongitudinalData::Builder::disownAccelerations() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t CalibrationFeatures::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CalibrationFeatures::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CalibrationFeatures::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CalibrationFeatures::Reader::hasP0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP0() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CalibrationFeatures::Reader::getP0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::getP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP0( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP0(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::initP0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP0(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CalibrationFeatures::Builder::disownP0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasP1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasP1() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CalibrationFeatures::Reader::getP1() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::getP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setP1( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setP1(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CalibrationFeatures::Builder::initP1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptP1(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CalibrationFeatures::Builder::disownP1() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CalibrationFeatures::Reader::hasStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CalibrationFeatures::Builder::hasStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader CalibrationFeatures::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t>::Builder CalibrationFeatures::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CalibrationFeatures::Builder::setStatus( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CalibrationFeatures::Builder::setStatus(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder CalibrationFeatures::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CalibrationFeatures::Builder::adoptStatus(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> CalibrationFeatures::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t EncodeIndex::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Reader::getType() const {
  return _reader.getDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::EncodeIndex::Type EncodeIndex::Builder::getType() {
  return _builder.getDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setType( ::cereal::EncodeIndex::Type value) {
  _builder.setDataField< ::cereal::EncodeIndex::Type>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getEncodeId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getEncodeId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setEncodeId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t EncodeIndex::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t EncodeIndex::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getSegmentId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getSegmentId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EncodeIndex::Reader::getSegmentIdEncode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EncodeIndex::Builder::getSegmentIdEncode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void EncodeIndex::Builder::setSegmentIdEncode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AndroidLogEntry::Reader::getTs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AndroidLogEntry::Builder::getTs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AndroidLogEntry::Reader::getPriority() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AndroidLogEntry::Builder::getPriority() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPriority( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidLogEntry::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidLogEntry::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidLogEntry::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidLogEntry::Reader::hasTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidLogEntry::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidLogEntry::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AndroidLogEntry::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AndroidLogEntry::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AndroidLogEntry::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AndroidLogEntry::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AndroidLogEntry::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t LogRotate::Reader::getSegmentNum() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LogRotate::Builder::getSegmentNum() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LogRotate::Builder::setSegmentNum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LogRotate::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LogRotate::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LogRotate::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LogRotate::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LogRotate::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LogRotate::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LogRotate::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LogRotate::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Plan::Reader::getLateralValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getLateralValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setLateralValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::hasDPolyDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Plan::Builder::hasDPolyDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Plan::Reader::getDPolyDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Plan::Builder::getDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Plan::Builder::setDPolyDEPRECATED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Plan::Builder::setDPolyDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Plan::Builder::initDPolyDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Plan::Builder::adoptDPolyDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Plan::Builder::disownDPolyDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Plan::Reader::getLongitudinalValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getLongitudinalValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setLongitudinalValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getVTarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVTarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVTarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getATargetMinDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getATargetMinDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setATargetMinDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getATargetMaxDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getATargetMaxDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setATargetMaxDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getJerkFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getJerkFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setJerkFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getHasLead() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getHasLead() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setHasLead(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getFcw() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getFcw() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setFcw(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Plan::Reader::getMdMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Plan::Builder::getMdMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setMdMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Plan::Reader::getRadarStateMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Plan::Builder::getRadarStateMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setRadarStateMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getLaneWidthDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getLaneWidthDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setLaneWidthDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::hasGpsTrajectory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Plan::Builder::hasGpsTrajectory() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Plan::GpsTrajectory::Reader Plan::Reader::getGpsTrajectory() const {
  return ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::Plan::GpsTrajectory::Builder Plan::Builder::getGpsTrajectory() {
  return ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::Plan::GpsTrajectory::Pipeline Plan::Pipeline::getGpsTrajectory() {
  return  ::cereal::Plan::GpsTrajectory::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Plan::Builder::setGpsTrajectory( ::cereal::Plan::GpsTrajectory::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Plan::GpsTrajectory::Builder Plan::Builder::initGpsTrajectory() {
  return ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Plan::Builder::adoptGpsTrajectory(
    ::capnp::Orphan< ::cereal::Plan::GpsTrajectory>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Plan::GpsTrajectory> Plan::Builder::disownGpsTrajectory() {
  return ::capnp::_::PointerHelpers< ::cereal::Plan::GpsTrajectory>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Plan::Reader::hasEventsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Plan::Builder::hasEventsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent>::Reader Plan::Reader::getEventsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder Plan::Builder::getEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Plan::Builder::setEventsDEPRECATED( ::capnp::List< ::cereal::CarEvent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder Plan::Builder::initEventsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Plan::Builder::adoptEventsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> Plan::Builder::disownEventsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float Plan::Reader::getVTargetFuture() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVTargetFuture() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVTargetFuture(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::Plan::LongitudinalPlanSource Plan::Reader::getLongitudinalPlanSource() const {
  return _reader.getDataField< ::cereal::Plan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::Plan::LongitudinalPlanSource Plan::Builder::getLongitudinalPlanSource() {
  return _builder.getDataField< ::cereal::Plan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setLongitudinalPlanSource( ::cereal::Plan::LongitudinalPlanSource value) {
  _builder.setDataField< ::cereal::Plan::LongitudinalPlanSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getVCruise() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVCruise() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVCruise(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getACruise() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getACruise() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setACruise(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getATarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getATarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setATarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getGpsPlannerActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getGpsPlannerActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setGpsPlannerActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getVMax() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVMax() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVMax(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getVCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getDecelForTurn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getDecelForTurn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setDecelForTurn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getHasLeftLaneDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getHasLeftLaneDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setHasLeftLaneDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getHasRightLaneDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getHasRightLaneDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setHasRightLaneDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getMapValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getMapValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setMapValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getVStart() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getVStart() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setVStart(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getAStart() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getAStart() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setAStart(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getRadarValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getRadarValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setRadarValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Plan::Reader::getProcessingDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float Plan::Builder::getProcessingDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setProcessingDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getRadarCanError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getRadarCanError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setRadarCanError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::Reader::getCommIssue() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool Plan::Builder::getCommIssue() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Plan::Builder::setCommIssue(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Plan::GpsTrajectory::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Plan::GpsTrajectory::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Plan::GpsTrajectory::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Plan::GpsTrajectory::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Plan::GpsTrajectory::Builder::setX( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Plan::GpsTrajectory::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Plan::GpsTrajectory::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Plan::GpsTrajectory::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Plan::GpsTrajectory::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Plan::GpsTrajectory::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Plan::GpsTrajectory::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Plan::GpsTrajectory::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Plan::GpsTrajectory::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Plan::GpsTrajectory::Builder::setY( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Plan::GpsTrajectory::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Plan::GpsTrajectory::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Plan::GpsTrajectory::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Plan::GpsTrajectory::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float PathPlan::Reader::getLaneWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getLaneWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setLaneWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::hasDPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PathPlan::Builder::hasDPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader PathPlan::Reader::getDPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::getDPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PathPlan::Builder::setDPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PathPlan::Builder::setDPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::initDPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PathPlan::Builder::adoptDPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> PathPlan::Builder::disownDPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PathPlan::Reader::hasCPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PathPlan::Builder::hasCPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader PathPlan::Reader::getCPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::getCPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PathPlan::Builder::setCPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PathPlan::Builder::setCPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::initCPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PathPlan::Builder::adoptCPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> PathPlan::Builder::disownCPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float PathPlan::Reader::getCProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getCProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setCProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::hasLPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PathPlan::Builder::hasLPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader PathPlan::Reader::getLPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::getLPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PathPlan::Builder::setLPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void PathPlan::Builder::setLPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::initLPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PathPlan::Builder::adoptLPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> PathPlan::Builder::disownLPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float PathPlan::Reader::getLProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getLProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setLProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::hasRPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PathPlan::Builder::hasRPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader PathPlan::Reader::getRPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::getRPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PathPlan::Builder::setRPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void PathPlan::Builder::setRPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder PathPlan::Builder::initRPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PathPlan::Builder::adoptRPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> PathPlan::Builder::disownRPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float PathPlan::Reader::getRProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getRProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setRProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float PathPlan::Reader::getAngleSteers() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getAngleSteers() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setAngleSteers(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getMpcSolutionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getMpcSolutionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setMpcSolutionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getParamsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getParamsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setParamsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline float PathPlan::Reader::getAngleOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getAngleOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setAngleOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getModelValidDEPRECATED() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getModelValidDEPRECATED() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setModelValidDEPRECATED(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS, value);
}

inline float PathPlan::Reader::getRateSteers() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float PathPlan::Builder::getRateSteers() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setRateSteers(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getSensorValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getSensorValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setSensorValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getCommIssue() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getCommIssue() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setCommIssue(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS, value);
}

inline bool PathPlan::Reader::getPosenetValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}

inline bool PathPlan::Builder::getPosenetValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setPosenetValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PathPlan::Desire PathPlan::Reader::getDesire() const {
  return _reader.getDataField< ::cereal::PathPlan::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PathPlan::Desire PathPlan::Builder::getDesire() {
  return _builder.getDataField< ::cereal::PathPlan::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setDesire( ::cereal::PathPlan::Desire value) {
  _builder.setDataField< ::cereal::PathPlan::Desire>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PathPlan::LaneChangeState PathPlan::Reader::getLaneChangeState() const {
  return _reader.getDataField< ::cereal::PathPlan::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PathPlan::LaneChangeState PathPlan::Builder::getLaneChangeState() {
  return _builder.getDataField< ::cereal::PathPlan::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setLaneChangeState( ::cereal::PathPlan::LaneChangeState value) {
  _builder.setDataField< ::cereal::PathPlan::LaneChangeState>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PathPlan::LaneChangeDirection PathPlan::Reader::getLaneChangeDirection() const {
  return _reader.getDataField< ::cereal::PathPlan::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PathPlan::LaneChangeDirection PathPlan::Builder::getLaneChangeDirection() {
  return _builder.getDataField< ::cereal::PathPlan::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setLaneChangeDirection( ::cereal::PathPlan::LaneChangeDirection value) {
  _builder.setDataField< ::cereal::PathPlan::LaneChangeDirection>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::PathPlan::LaneChangeBSM PathPlan::Reader::getLaneChangeBSM() const {
  return _reader.getDataField< ::cereal::PathPlan::LaneChangeBSM>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::cereal::PathPlan::LaneChangeBSM PathPlan::Builder::getLaneChangeBSM() {
  return _builder.getDataField< ::cereal::PathPlan::LaneChangeBSM>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void PathPlan::Builder::setLaneChangeBSM( ::cereal::PathPlan::LaneChangeBSM value) {
  _builder.setDataField< ::cereal::PathPlan::LaneChangeBSM>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LiveLocationData::Reader::getStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LiveLocationData::Builder::getStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getLon() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getLon() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setLon(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getAlt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getAlt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setAlt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasVNED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasVNED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Reader::getVNED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::getVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setVNED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setVNED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::initVNED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptVNED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Builder::disownVNED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Reader::getRoll() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getRoll() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setRoll(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getPitch() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getPitch() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setPitch(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getWanderAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getWanderAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setWanderAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getTrackAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getTrackAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setTrackAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasGyro() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasGyro() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Reader::getGyro() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::getGyro() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setGyro( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setGyro(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::initGyro(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptGyro(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Builder::disownGyro() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasAccel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasAccel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Reader::getAccel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::getAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setAccel( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setAccel(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::initAccel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptAccel(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Builder::disownAccel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasAccuracy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasAccuracy() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Accuracy::Reader LiveLocationData::Reader::getAccuracy() const {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Accuracy::Builder LiveLocationData::Builder::getAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::LiveLocationData::Accuracy::Pipeline LiveLocationData::Pipeline::getAccuracy() {
  return  ::cereal::LiveLocationData::Accuracy::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void LiveLocationData::Builder::setAccuracy( ::cereal::LiveLocationData::Accuracy::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Accuracy::Builder LiveLocationData::Builder::initAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::adoptAccuracy(
    ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData::Accuracy> LiveLocationData::Builder::disownAccuracy() {
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData::Accuracy>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::cereal::LiveLocationData::SensorSource LiveLocationData::Reader::getSource() const {
  return _reader.getDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::LiveLocationData::SensorSource LiveLocationData::Builder::getSource() {
  return _builder.getDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setSource( ::cereal::LiveLocationData::SensorSource value) {
  _builder.setDataField< ::cereal::LiveLocationData::SensorSource>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveLocationData::Reader::getFixMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveLocationData::Builder::getFixMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setFixMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LiveLocationData::Reader::getGpsWeek() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LiveLocationData::Builder::getGpsWeek() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setGpsWeek( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double LiveLocationData::Reader::getTimeOfWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double LiveLocationData::Builder::getTimeOfWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setTimeOfWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader LiveLocationData::Reader::getPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder LiveLocationData::Builder::getPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setPositionECEF( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setPositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder LiveLocationData::Builder::initPositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptPositionECEF(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> LiveLocationData::Builder::disownPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Reader::hasPoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasPoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Reader::getPoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::getPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setPoseQuatECEF( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setPoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::initPoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptPoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Builder::disownPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Reader::getPitchCalibration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getPitchCalibration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setPitchCalibration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Reader::getYawCalibration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Builder::getYawCalibration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Builder::setYawCalibration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLocationData::Reader::hasImuFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Builder::hasImuFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Reader::getImuFrame() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::getImuFrame() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Builder::setImuFrame( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Builder::setImuFrame(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Builder::initImuFrame(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Builder::adoptImuFrame(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Builder::disownImuFrame() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Accuracy::Reader::hasPNEDError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Accuracy::Builder::hasPNEDError() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Accuracy::Reader::getPNEDError() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Accuracy::Builder::getPNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Accuracy::Builder::setPNEDError( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Accuracy::Builder::setPNEDError(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Accuracy::Builder::initPNEDError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Accuracy::Builder::adoptPNEDError(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Accuracy::Builder::disownPNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLocationData::Accuracy::Reader::hasVNEDError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLocationData::Accuracy::Builder::hasVNEDError() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLocationData::Accuracy::Reader::getVNEDError() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLocationData::Accuracy::Builder::getVNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLocationData::Accuracy::Builder::setVNEDError( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLocationData::Accuracy::Builder::setVNEDError(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLocationData::Accuracy::Builder::initVNEDError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLocationData::Accuracy::Builder::adoptVNEDError(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLocationData::Accuracy::Builder::disownVNEDError() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LiveLocationData::Accuracy::Reader::getRollError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getRollError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setRollError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getPitchError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getPitchError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setPitchError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getHeadingError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getHeadingError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setHeadingError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidSemiMajorError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidSemiMajorError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidSemiMajorError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidSemiMinorError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidSemiMinorError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidSemiMinorError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveLocationData::Accuracy::Reader::getEllipsoidOrientationError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveLocationData::Accuracy::Builder::getEllipsoidOrientationError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveLocationData::Accuracy::Builder::setEllipsoidOrientationError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool EthernetPacket::Reader::hasPkt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EthernetPacket::Builder::hasPkt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EthernetPacket::Reader::getPkt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EthernetPacket::Builder::getPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EthernetPacket::Builder::setPkt( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EthernetPacket::Builder::initPkt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void EthernetPacket::Builder::adoptPkt(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EthernetPacket::Builder::disownPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float EthernetPacket::Reader::getTs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float EthernetPacket::Builder::getTs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EthernetPacket::Builder::setTs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Reader::getIsNavigating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NavUpdate::Builder::getIsNavigating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Builder::setIsNavigating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Reader::getCurSegment() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Builder::getCurSegment() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Builder::setCurSegment( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Reader::hasSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Builder::hasSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Reader NavUpdate::Reader::getSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Builder NavUpdate::Builder::getSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavUpdate::Builder::setSegments( ::capnp::List< ::cereal::NavUpdate::Segment>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavUpdate::Segment>::Builder NavUpdate::Builder::initSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavUpdate::Builder::adoptSegments(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::Segment>> NavUpdate::Builder::disownSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::Segment>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double NavUpdate::LatLng::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NavUpdate::LatLng::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::LatLng::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NavUpdate::LatLng::Reader::getLng() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavUpdate::LatLng::Builder::getLng() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::LatLng::Builder::setLng(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Segment::Reader::hasFrom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasFrom() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::LatLng::Reader NavUpdate::Segment::Reader::getFrom() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::getFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavUpdate::LatLng::Pipeline NavUpdate::Segment::Pipeline::getFrom() {
  return  ::cereal::NavUpdate::LatLng::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavUpdate::Segment::Builder::setFrom( ::cereal::NavUpdate::LatLng::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::initFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::adoptFrom(
    ::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> NavUpdate::Segment::Builder::disownFrom() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavUpdate::Segment::Reader::hasTo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasTo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::LatLng::Reader NavUpdate::Segment::Reader::getTo() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::getTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavUpdate::LatLng::Pipeline NavUpdate::Segment::Pipeline::getTo() {
  return  ::cereal::NavUpdate::LatLng::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void NavUpdate::Segment::Builder::setTo( ::cereal::NavUpdate::LatLng::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::LatLng::Builder NavUpdate::Segment::Builder::initTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::adoptTo(
    ::capnp::Orphan< ::cereal::NavUpdate::LatLng>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate::LatLng> NavUpdate::Segment::Builder::disownTo() {
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate::LatLng>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t NavUpdate::Segment::Reader::getUpdateTime() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getUpdateTime() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setUpdateTime( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getCrossTime() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getCrossTime() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setCrossTime( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t NavUpdate::Segment::Reader::getExitNo() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NavUpdate::Segment::Builder::getExitNo() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setExitNo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::NavUpdate::Segment::Instruction NavUpdate::Segment::Reader::getInstruction() const {
  return _reader.getDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::cereal::NavUpdate::Segment::Instruction NavUpdate::Segment::Builder::getInstruction() {
  return _builder.getDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void NavUpdate::Segment::Builder::setInstruction( ::cereal::NavUpdate::Segment::Instruction value) {
  _builder.setDataField< ::cereal::NavUpdate::Segment::Instruction>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool NavUpdate::Segment::Reader::hasParts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavUpdate::Segment::Builder::hasParts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Reader NavUpdate::Segment::Reader::getParts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Builder NavUpdate::Segment::Builder::getParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavUpdate::Segment::Builder::setParts( ::capnp::List< ::cereal::NavUpdate::LatLng>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::NavUpdate::LatLng>::Builder NavUpdate::Segment::Builder::initParts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavUpdate::Segment::Builder::adoptParts(
    ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::NavUpdate::LatLng>> NavUpdate::Segment::Builder::disownParts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::NavUpdate::LatLng>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavStatus::Reader::getIsNavigating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NavStatus::Builder::getIsNavigating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Builder::setIsNavigating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavStatus::Reader::hasCurrentAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Builder::hasCurrentAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavStatus::Address::Reader NavStatus::Reader::getCurrentAddress() const {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavStatus::Address::Builder NavStatus::Builder::getCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::NavStatus::Address::Pipeline NavStatus::Pipeline::getCurrentAddress() {
  return  ::cereal::NavStatus::Address::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavStatus::Builder::setCurrentAddress( ::cereal::NavStatus::Address::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavStatus::Address::Builder NavStatus::Builder::initCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStatus::Builder::adoptCurrentAddress(
    ::capnp::Orphan< ::cereal::NavStatus::Address>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavStatus::Address> NavStatus::Builder::disownCurrentAddress() {
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus::Address>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double NavStatus::Address::Reader::getLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NavStatus::Address::Builder::getLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Address::Builder::setLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NavStatus::Address::Reader::getLng() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavStatus::Address::Builder::getLng() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavStatus::Address::Builder::setLng(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavStatus::Address::Reader::hasHouse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasHouse() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getHouse() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getHouse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setHouse( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initHouse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptHouse(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownHouse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasStreet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasStreet() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getStreet() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getStreet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setStreet( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initStreet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptStreet(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownStreet() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasCity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasCity() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getCity() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getCity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setCity( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initCity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptCity(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownCity() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool NavStatus::Address::Reader::hasCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool NavStatus::Address::Builder::hasCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStatus::Address::Reader::getCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::getCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void NavStatus::Address::Builder::setCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStatus::Address::Builder::initCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void NavStatus::Address::Builder::adoptCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStatus::Address::Builder::disownCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t CellInfo::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CellInfo::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CellInfo::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CellInfo::Reader::hasRepr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CellInfo::Builder::hasRepr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CellInfo::Reader::getRepr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CellInfo::Builder::getRepr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CellInfo::Builder::setRepr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CellInfo::Builder::initRepr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CellInfo::Builder::adoptRepr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CellInfo::Builder::disownRepr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasBssid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasBssid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getBssid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getBssid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setBssid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initBssid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptBssid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownBssid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasSsid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasSsid() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getSsid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getSsid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setSsid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initSsid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptSsid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownSsid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasCapabilities() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasCapabilities() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getCapabilities() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getCapabilities() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setCapabilities( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initCapabilities(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptCapabilities(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownCapabilities() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t WifiScan::Reader::getFrequency() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getFrequency() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setFrequency( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getLevel() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getLevel() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t WifiScan::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t WifiScan::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getCenterFreq0() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getCenterFreq0() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setCenterFreq0( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getCenterFreq1() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getCenterFreq1() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setCenterFreq1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::WifiScan::ChannelWidth WifiScan::Reader::getChannelWidth() const {
  return _reader.getDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::cereal::WifiScan::ChannelWidth WifiScan::Builder::getChannelWidth() {
  return _builder.getDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setChannelWidth( ::cereal::WifiScan::ChannelWidth value) {
  _builder.setDataField< ::cereal::WifiScan::ChannelWidth>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool WifiScan::Reader::hasOperatorFriendlyName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasOperatorFriendlyName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getOperatorFriendlyName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getOperatorFriendlyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setOperatorFriendlyName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initOperatorFriendlyName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptOperatorFriendlyName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownOperatorFriendlyName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::hasVenueName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool WifiScan::Builder::hasVenueName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WifiScan::Reader::getVenueName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WifiScan::Builder::getVenueName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void WifiScan::Builder::setVenueName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WifiScan::Builder::initVenueName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void WifiScan::Builder::adoptVenueName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WifiScan::Builder::disownVenueName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool WifiScan::Reader::getIs80211mcResponder() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}

inline bool WifiScan::Builder::getIs80211mcResponder() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setIs80211mcResponder(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS, value);
}

inline bool WifiScan::Reader::getPasspoint() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}

inline bool WifiScan::Builder::getPasspoint() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setPasspoint(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getDistanceCm() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getDistanceCm() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setDistanceCm( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WifiScan::Reader::getDistanceSdCm() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WifiScan::Builder::getDistanceSdCm() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void WifiScan::Builder::setDistanceSdCm( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Which AndroidGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::AndroidGnss::Which AndroidGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Reader::isMeasurements() const {
  return which() == AndroidGnss::MEASUREMENTS;
}
inline bool AndroidGnss::Builder::isMeasurements() {
  return which() == AndroidGnss::MEASUREMENTS;
}
inline bool AndroidGnss::Reader::hasMeasurements() const {
  if (which() != AndroidGnss::MEASUREMENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Builder::hasMeasurements() {
  if (which() != AndroidGnss::MEASUREMENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Measurements::Reader AndroidGnss::Reader::getMeasurements() const {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Measurements::Builder AndroidGnss::Builder::getMeasurements() {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::setMeasurements( ::cereal::AndroidGnss::Measurements::Reader value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Measurements::Builder AndroidGnss::Builder::initMeasurements() {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::adoptMeasurements(
    ::capnp::Orphan< ::cereal::AndroidGnss::Measurements>&& value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::MEASUREMENTS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements> AndroidGnss::Builder::disownMeasurements() {
  KJ_IREQUIRE((which() == AndroidGnss::MEASUREMENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Reader::isNavigationMessage() const {
  return which() == AndroidGnss::NAVIGATION_MESSAGE;
}
inline bool AndroidGnss::Builder::isNavigationMessage() {
  return which() == AndroidGnss::NAVIGATION_MESSAGE;
}
inline bool AndroidGnss::Reader::hasNavigationMessage() const {
  if (which() != AndroidGnss::NAVIGATION_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Builder::hasNavigationMessage() {
  if (which() != AndroidGnss::NAVIGATION_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::NavigationMessage::Reader AndroidGnss::Reader::getNavigationMessage() const {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::NavigationMessage::Builder AndroidGnss::Builder::getNavigationMessage() {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::setNavigationMessage( ::cereal::AndroidGnss::NavigationMessage::Reader value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::NavigationMessage::Builder AndroidGnss::Builder::initNavigationMessage() {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Builder::adoptNavigationMessage(
    ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage>&& value) {
  _builder.setDataField<AndroidGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AndroidGnss::NAVIGATION_MESSAGE);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::NavigationMessage> AndroidGnss::Builder::disownNavigationMessage() {
  KJ_IREQUIRE((which() == AndroidGnss::NAVIGATION_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::NavigationMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Measurements::Reader::hasClock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Measurements::Builder::hasClock() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Reader AndroidGnss::Measurements::Reader::getClock() const {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Builder AndroidGnss::Measurements::Builder::getClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::AndroidGnss::Measurements::Clock::Pipeline AndroidGnss::Measurements::Pipeline::getClock() {
  return  ::cereal::AndroidGnss::Measurements::Clock::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AndroidGnss::Measurements::Builder::setClock( ::cereal::AndroidGnss::Measurements::Clock::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Measurements::Clock::Builder AndroidGnss::Measurements::Builder::initClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Measurements::Builder::adoptClock(
    ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss::Measurements::Clock> AndroidGnss::Measurements::Builder::disownClock() {
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss::Measurements::Clock>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AndroidGnss::Measurements::Reader::hasMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::Measurements::Builder::hasMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Reader AndroidGnss::Measurements::Reader::getMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Builder AndroidGnss::Measurements::Builder::getMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AndroidGnss::Measurements::Builder::setMeasurements( ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>::Builder AndroidGnss::Measurements::Builder::initMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AndroidGnss::Measurements::Builder::adoptMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>> AndroidGnss::Measurements::Builder::disownMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::AndroidGnss::Measurements::Measurement>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Reader::getTimeNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Builder::getTimeNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setTimeNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Reader::getHardwareClockDiscontinuityCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Builder::getHardwareClockDiscontinuityCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHardwareClockDiscontinuityCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasTimeUncertaintyNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasTimeUncertaintyNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasTimeUncertaintyNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getTimeUncertaintyNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getTimeUncertaintyNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setTimeUncertaintyNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasLeapSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasLeapSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasLeapSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Reader::getLeapSecond() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Clock::Builder::getLeapSecond() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setLeapSecond( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasFullBiasNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasFullBiasNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasFullBiasNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Reader::getFullBiasNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Clock::Builder::getFullBiasNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setFullBiasNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasBiasNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasBiasNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasBiasNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getBiasNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getBiasNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setBiasNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasBiasUncertaintyNanos() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasBiasUncertaintyNanos() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasBiasUncertaintyNanos(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getBiasUncertaintyNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getBiasUncertaintyNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setBiasUncertaintyNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasDriftNanosPerSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasDriftNanosPerSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasDriftNanosPerSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getDriftNanosPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getDriftNanosPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setDriftNanosPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Clock::Reader::getHasDriftUncertaintyNanosPerSecond() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Clock::Builder::getHasDriftUncertaintyNanosPerSecond() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setHasDriftUncertaintyNanosPerSecond(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Clock::Reader::getDriftUncertaintyNanosPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Clock::Builder::getDriftUncertaintyNanosPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Clock::Builder::setDriftUncertaintyNanosPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getSvId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getSvId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setSvId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation AndroidGnss::Measurements::Measurement::Reader::getConstellation() const {
  return _reader.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::Constellation AndroidGnss::Measurements::Measurement::Builder::getConstellation() {
  return _builder.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setConstellation( ::cereal::AndroidGnss::Measurements::Measurement::Constellation value) {
  _builder.setDataField< ::cereal::AndroidGnss::Measurements::Measurement::Constellation>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getTimeOffsetNanos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getTimeOffsetNanos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setTimeOffsetNanos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getState() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getState() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setState( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getReceivedSvTimeNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getReceivedSvTimeNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setReceivedSvTimeNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getReceivedSvTimeUncertaintyNanos() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getReceivedSvTimeUncertaintyNanos() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setReceivedSvTimeUncertaintyNanos( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCn0DbHz() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCn0DbHz() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCn0DbHz(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getPseudorangeRateMetersPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getPseudorangeRateMetersPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setPseudorangeRateMetersPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getPseudorangeRateUncertaintyMetersPerSecond() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getPseudorangeRateUncertaintyMetersPerSecond() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setPseudorangeRateUncertaintyMetersPerSecond(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeState() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeState() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeState( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeMeters() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeMeters() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeMeters(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getAccumulatedDeltaRangeUncertaintyMeters() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getAccumulatedDeltaRangeUncertaintyMeters() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setAccumulatedDeltaRangeUncertaintyMeters(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierFrequencyHz() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierFrequencyHz() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierFrequencyHz(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline float AndroidGnss::Measurements::Measurement::Reader::getCarrierFrequencyHz() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float AndroidGnss::Measurements::Measurement::Builder::getCarrierFrequencyHz() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierFrequencyHz(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierCycles() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierCycles() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierCycles(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Reader::getCarrierCycles() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AndroidGnss::Measurements::Measurement::Builder::getCarrierCycles() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierCycles( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierPhase() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierPhase() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierPhase(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCarrierPhase() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCarrierPhase() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierPhase(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasCarrierPhaseUncertainty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasCarrierPhaseUncertainty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasCarrierPhaseUncertainty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getCarrierPhaseUncertainty() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getCarrierPhaseUncertainty() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setCarrierPhaseUncertainty(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::Measurements::Measurement::Reader::getHasSnrInDb() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline bool AndroidGnss::Measurements::Measurement::Builder::getHasSnrInDb() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setHasSnrInDb(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline double AndroidGnss::Measurements::Measurement::Reader::getSnrInDb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double AndroidGnss::Measurements::Measurement::Builder::getSnrInDb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setSnrInDb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator AndroidGnss::Measurements::Measurement::Reader::getMultipathIndicator() const {
  return _reader.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator AndroidGnss::Measurements::Measurement::Builder::getMultipathIndicator() {
  return _builder.getDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::Measurements::Measurement::Builder::setMultipathIndicator( ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator value) {
  _builder.setDataField< ::cereal::AndroidGnss::Measurements::Measurement::MultipathIndicator>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getSvId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getSvId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setSvId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getMessageId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getMessageId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setMessageId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Reader::getSubmessageId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AndroidGnss::NavigationMessage::Builder::getSubmessageId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setSubmessageId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AndroidGnss::NavigationMessage::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AndroidGnss::NavigationMessage::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AndroidGnss::NavigationMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AndroidGnss::NavigationMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AndroidGnss::NavigationMessage::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AndroidGnss::NavigationMessage::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AndroidGnss::NavigationMessage::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AndroidGnss::NavigationMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cereal::AndroidGnss::NavigationMessage::Status AndroidGnss::NavigationMessage::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::cereal::AndroidGnss::NavigationMessage::Status AndroidGnss::NavigationMessage::Builder::getStatus() {
  return _builder.getDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AndroidGnss::NavigationMessage::Builder::setStatus( ::cereal::AndroidGnss::NavigationMessage::Status value) {
  _builder.setDataField< ::cereal::AndroidGnss::NavigationMessage::Status>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::Which QcomGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cereal::QcomGnss::Which QcomGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::Reader::getLogTs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::Builder::getLogTs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::Builder::setLogTs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::Reader::isMeasurementReport() const {
  return which() == QcomGnss::MEASUREMENT_REPORT;
}
inline bool QcomGnss::Builder::isMeasurementReport() {
  return which() == QcomGnss::MEASUREMENT_REPORT;
}
inline bool QcomGnss::Reader::hasMeasurementReport() const {
  if (which() != QcomGnss::MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasMeasurementReport() {
  if (which() != QcomGnss::MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementReport::Reader QcomGnss::Reader::getMeasurementReport() const {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementReport::Builder QcomGnss::Builder::getMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setMeasurementReport( ::cereal::QcomGnss::MeasurementReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementReport::Builder QcomGnss::Builder::initMeasurementReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptMeasurementReport(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementReport> QcomGnss::Builder::disownMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isClockReport() const {
  return which() == QcomGnss::CLOCK_REPORT;
}
inline bool QcomGnss::Builder::isClockReport() {
  return which() == QcomGnss::CLOCK_REPORT;
}
inline bool QcomGnss::Reader::hasClockReport() const {
  if (which() != QcomGnss::CLOCK_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasClockReport() {
  if (which() != QcomGnss::CLOCK_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::ClockReport::Reader QcomGnss::Reader::getClockReport() const {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::ClockReport::Builder QcomGnss::Builder::getClockReport() {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setClockReport( ::cereal::QcomGnss::ClockReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::ClockReport::Builder QcomGnss::Builder::initClockReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptClockReport(
    ::capnp::Orphan< ::cereal::QcomGnss::ClockReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::CLOCK_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::ClockReport> QcomGnss::Builder::disownClockReport() {
  KJ_IREQUIRE((which() == QcomGnss::CLOCK_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::ClockReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isDrMeasurementReport() const {
  return which() == QcomGnss::DR_MEASUREMENT_REPORT;
}
inline bool QcomGnss::Builder::isDrMeasurementReport() {
  return which() == QcomGnss::DR_MEASUREMENT_REPORT;
}
inline bool QcomGnss::Reader::hasDrMeasurementReport() const {
  if (which() != QcomGnss::DR_MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasDrMeasurementReport() {
  if (which() != QcomGnss::DR_MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Reader QcomGnss::Reader::getDrMeasurementReport() const {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Builder QcomGnss::Builder::getDrMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setDrMeasurementReport( ::cereal::QcomGnss::DrMeasurementReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::DrMeasurementReport::Builder QcomGnss::Builder::initDrMeasurementReport() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptDrMeasurementReport(
    ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::DrMeasurementReport> QcomGnss::Builder::disownDrMeasurementReport() {
  KJ_IREQUIRE((which() == QcomGnss::DR_MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrMeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isDrSvPoly() const {
  return which() == QcomGnss::DR_SV_POLY;
}
inline bool QcomGnss::Builder::isDrSvPoly() {
  return which() == QcomGnss::DR_SV_POLY;
}
inline bool QcomGnss::Reader::hasDrSvPoly() const {
  if (which() != QcomGnss::DR_SV_POLY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasDrSvPoly() {
  if (which() != QcomGnss::DR_SV_POLY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Reader QcomGnss::Reader::getDrSvPoly() const {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Builder QcomGnss::Builder::getDrSvPoly() {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setDrSvPoly( ::cereal::QcomGnss::DrSvPolyReport::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::DrSvPolyReport::Builder QcomGnss::Builder::initDrSvPoly() {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::adoptDrSvPoly(
    ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::DR_SV_POLY);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::DrSvPolyReport> QcomGnss::Builder::disownDrSvPoly() {
  KJ_IREQUIRE((which() == QcomGnss::DR_SV_POLY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::DrSvPolyReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::Reader::isRawLog() const {
  return which() == QcomGnss::RAW_LOG;
}
inline bool QcomGnss::Builder::isRawLog() {
  return which() == QcomGnss::RAW_LOG;
}
inline bool QcomGnss::Reader::hasRawLog() const {
  if (which() != QcomGnss::RAW_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::Builder::hasRawLog() {
  if (which() != QcomGnss::RAW_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader QcomGnss::Reader::getRawLog() const {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder QcomGnss::Builder::getRawLog() {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::Builder::setRawLog( ::capnp::Data::Reader value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder QcomGnss::Builder::initRawLog(unsigned int size) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::Builder::adoptRawLog(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<QcomGnss::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, QcomGnss::RAW_LOG);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> QcomGnss::Builder::disownRawLog() {
  KJ_IREQUIRE((which() == QcomGnss::RAW_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::MeasurementStatus::Reader::getSubMillisecondIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSubMillisecondIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSubMillisecondIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSubBitTimeIsKnown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSubBitTimeIsKnown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSubBitTimeIsKnown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSatelliteTimeIsKnown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSatelliteTimeIsKnown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSatelliteTimeIsKnown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getBitEdgeConfirmedFromSignal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getBitEdgeConfirmedFromSignal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setBitEdgeConfirmedFromSignal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMeasuredVelocity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMeasuredVelocity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMeasuredVelocity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getFineOrCoarseVelocity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getFineOrCoarseVelocity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setFineOrCoarseVelocity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLockPointValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLockPointValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLockPointValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLockPointPositive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLockPointPositive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLockPointPositive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLastUpdateFromDifference() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLastUpdateFromDifference() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLastUpdateFromDifference(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLastUpdateFromVelocityDifference() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLastUpdateFromVelocityDifference() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLastUpdateFromVelocityDifference(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getStrongIndicationOfCrossCorelation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getStrongIndicationOfCrossCorelation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setStrongIndicationOfCrossCorelation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getTentativeMeasurement() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getTentativeMeasurement() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setTentativeMeasurement(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMeasurementNotUsable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMeasurementNotUsable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMeasurementNotUsable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getSirCheckIsNeeded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getSirCheckIsNeeded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setSirCheckIsNeeded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getProbationMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getProbationMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setProbationMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGlonassMeanderBitEdgeValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGlonassMeanderBitEdgeValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGlonassMeanderBitEdgeValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGlonassTimeMarkValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGlonassTimeMarkValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGlonassTimeMarkValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsRoundRobinRxDiversity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsRoundRobinRxDiversity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsRoundRobinRxDiversity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsRxDiversity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsRxDiversity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsRxDiversity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsLowBandwidthRxDiversityCombined() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsLowBandwidthRxDiversityCombined() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsLowBandwidthRxDiversityCombined(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthNu4() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthNu4() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthNu4(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthNu8() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthNu8() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthNu8(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getGpsHighBandwidthUniform() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getGpsHighBandwidthUniform() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setGpsHighBandwidthUniform(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMultipathIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMultipathIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMultipathIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getImdJammingIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getImdJammingIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setImdJammingIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getLteB13TxJammingIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getLteB13TxJammingIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setLteB13TxJammingIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getFreshMeasurementIndicator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getFreshMeasurementIndicator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setFreshMeasurementIndicator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getMultipathEstimateIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getMultipathEstimateIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setMultipathEstimateIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementStatus::Reader::getDirectionIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::MeasurementStatus::Builder::getDirectionIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementStatus::Builder::setDirectionIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::MeasurementReport::Reader::getSource() const {
  return _reader.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::MeasurementReport::Builder::getSource() {
  return _builder.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setSource( ::cereal::QcomGnss::MeasurementSource value) {
  _builder.setDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::Reader::getGlonassCycleNumber() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::Builder::getGlonassCycleNumber() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGlonassCycleNumber( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Reader::getGlonassNumberOfDays() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::Builder::getGlonassNumberOfDays() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setGlonassNumberOfDays( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Reader::getMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::Builder::getMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementReport::Reader::hasSv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::MeasurementReport::Builder::hasSv() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Reader QcomGnss::MeasurementReport::Reader::getSv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Builder QcomGnss::MeasurementReport::Builder::getSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::MeasurementReport::Builder::setSv( ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>::Builder QcomGnss::MeasurementReport::Builder::initSv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::MeasurementReport::Builder::adoptSv(
    ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>> QcomGnss::MeasurementReport::Builder::disownSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::MeasurementReport::SV>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::MeasurementReport::SV::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::MeasurementReport::SV::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGlonassFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::MeasurementReport::SV::Reader::getObservationState() const {
  return _reader.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::MeasurementReport::SV::Builder::getObservationState() {
  return _builder.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setObservationState( ::cereal::QcomGnss::SVObservationState value) {
  _builder.setDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getGoodObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getGoodObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGoodObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getGpsParityErrorCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getGpsParityErrorCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGpsParityErrorCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getGlonassHemmingErrorCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getGlonassHemmingErrorCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setGlonassHemmingErrorCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getFilterStages() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getFilterStages() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFilterStages( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getCarrierNoise() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getCarrierNoise() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierNoise( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t QcomGnss::MeasurementReport::SV::Reader::getLatency() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t QcomGnss::MeasurementReport::SV::Builder::getLatency() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setLatency( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getPredetectInterval() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getPredetectInterval() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setPredetectInterval( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getPostdetections() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getPostdetections() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setPostdetections( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Reader::getUnfilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Builder::getUnfilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getUnfilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getUnfilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setUnfilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::MeasurementReport::SV::Reader::hasMeasurementStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::MeasurementReport::SV::Builder::hasMeasurementStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementStatus::Reader QcomGnss::MeasurementReport::SV::Reader::getMeasurementStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::MeasurementReport::SV::Builder::getMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline QcomGnss::MeasurementReport::SV::Pipeline::getMeasurementStatus() {
  return  ::cereal::QcomGnss::MeasurementStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void QcomGnss::MeasurementReport::SV::Builder::setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::MeasurementReport::SV::Builder::initMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::MeasurementReport::SV::Builder::adoptMeasurementStatus(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> QcomGnss::MeasurementReport::SV::Builder::disownMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Reader::getMultipathEstimate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::MeasurementReport::SV::Builder::getMultipathEstimate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setMultipathEstimate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getAzimuth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getAzimuth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setAzimuth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QcomGnss::MeasurementReport::SV::Reader::getCarrierPhaseCyclesIntegral() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int32_t QcomGnss::MeasurementReport::SV::Builder::getCarrierPhaseCyclesIntegral() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierPhaseCyclesIntegral( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Reader::getCarrierPhaseCyclesFraction() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::MeasurementReport::SV::Builder::getCarrierPhaseCyclesFraction() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCarrierPhaseCyclesFraction( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getFineSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getFineSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFineSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::MeasurementReport::SV::Reader::getFineSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::MeasurementReport::SV::Builder::getFineSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setFineSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Reader::getCycleSlipCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::MeasurementReport::SV::Builder::getCycleSlipCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::MeasurementReport::SV::Builder::setCycleSlipCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasFCount() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasFCount() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasFCount(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGpsWeek() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGpsWeek() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGpsWeek(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGpsMilliseconds() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGpsMilliseconds() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGpsMilliseconds(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGpsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGpsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassYear() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassYear() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassYear(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGlonassYear() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGlonassYear() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassYear( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassDay() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassDay() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassDay(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGlonassDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGlonassDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasGlonassMilliseconds() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasGlonassMilliseconds() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasGlonassMilliseconds(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGlonassMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGlonassMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGlonassTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGlonassTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGlonassClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGlonassClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGlonassClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGlonassClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGlonassClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getBdsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getBdsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getBdsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getBdsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getBdsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getBdsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::ClockReport::Reader::getGalWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::ClockReport::Builder::getGalWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getGalMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getGalMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGalClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGalClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getFrequencySource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getFrequencySource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFrequencySource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSeconds() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSeconds() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSeconds( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSecondsUncertainty() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSecondsUncertainty() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSecondsUncertainty( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::ClockReport::Reader::getGpsLeapSecondsSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::ClockReport::Builder::getGpsLeapSecondsSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsLeapSecondsSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGlonassTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGlonassTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGlonassTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGlonassTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGlonassTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGlonassTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToBdsTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToBdsTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToBdsTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToBdsTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToBdsTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToBdsTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsToGloTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsToGloTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsToGloTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getBdsToGloTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getBdsToGloTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setBdsToGloTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGalTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGalTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGalTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGpsToGalTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGpsToGalTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGpsToGalTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToGloTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToGloTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToGloTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToGloTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToGloTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToGloTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToBdsTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToBdsTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToBdsTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::ClockReport::Reader::getGalToBdsTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::ClockReport::Builder::getGalToBdsTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setGalToBdsTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::ClockReport::Reader::getHasRtcTime() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::ClockReport::Builder::getHasRtcTime() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setHasRtcTime(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getSystemRtcTime() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getSystemRtcTime() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setSystemRtcTime( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getFCountOffset() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getFCountOffset() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setFCountOffset( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getLpmRtcCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getLpmRtcCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setLpmRtcCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::ClockReport::Reader::getClockResets() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::ClockReport::Builder::getClockResets() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::ClockReport::Builder::setClockResets( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getReason() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getReason() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setReason( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getSeqNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getSeqNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSeqNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getSeqMax() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getSeqMax() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSeqMax( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getRfLoss() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getRfLoss() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setRfLoss( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::Reader::getSystemRtcValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrMeasurementReport::Builder::getSystemRtcValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSystemRtcValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getClockResets() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getClockResets() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockResets( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t QcomGnss::DrMeasurementReport::Reader::getSystemRtcTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QcomGnss::DrMeasurementReport::Builder::getSystemRtcTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSystemRtcTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsLeapSeconds() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsLeapSeconds() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsLeapSeconds( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsLeapSecondsUncertainty() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsLeapSecondsUncertainty() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsLeapSecondsUncertainty( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGpsToGlonassTimeBiasMilliseconds() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGpsToGlonassTimeBiasMilliseconds() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsToGlonassTimeBiasMilliseconds(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGpsToGlonassTimeBiasMillisecondsUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGpsToGlonassTimeBiasMillisecondsUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsToGlonassTimeBiasMillisecondsUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsTimeBiasMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsTimeBiasMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsTimeBiasMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGpsClockTimeUncertaintyMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGpsClockTimeUncertaintyMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsClockTimeUncertaintyMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGpsClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGpsClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGpsClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGlonassClockSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGlonassClockSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassClockSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getGlonassYear() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getGlonassYear() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassYear( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Reader::getGlonassDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::Builder::getGlonassDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Reader::getGlonassMilliseconds() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::Builder::getGlonassMilliseconds() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassMilliseconds( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGlonassTimeBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGlonassTimeBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassTimeBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getGlonassClockTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getGlonassClockTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setGlonassClockTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getClockFrequencyBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getClockFrequencyBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockFrequencyBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::Reader::getClockFrequencyUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::Builder::getClockFrequencyUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setClockFrequencyUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Reader::getFrequencySource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::Builder::getFrequencySource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setFrequencySource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::DrMeasurementReport::Reader::getSource() const {
  return _reader.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::MeasurementSource QcomGnss::DrMeasurementReport::Builder::getSource() {
  return _builder.getDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::Builder::setSource( ::cereal::QcomGnss::MeasurementSource value) {
  _builder.setDataField< ::cereal::QcomGnss::MeasurementSource>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::Reader::hasSv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrMeasurementReport::Builder::hasSv() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Reader QcomGnss::DrMeasurementReport::Reader::getSv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Builder QcomGnss::DrMeasurementReport::Builder::getSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrMeasurementReport::Builder::setSv( ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>::Builder QcomGnss::DrMeasurementReport::Builder::initSv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrMeasurementReport::Builder::adoptSv(
    ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>> QcomGnss::DrMeasurementReport::Builder::disownSv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::QcomGnss::DrMeasurementReport::SV>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::DrMeasurementReport::SV::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::DrMeasurementReport::SV::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGlonassFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::DrMeasurementReport::SV::Reader::getObservationState() const {
  return _reader.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::QcomGnss::SVObservationState QcomGnss::DrMeasurementReport::SV::Builder::getObservationState() {
  return _builder.getDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setObservationState( ::cereal::QcomGnss::SVObservationState value) {
  _builder.setDataField< ::cereal::QcomGnss::SVObservationState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getGoodObservations() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getGoodObservations() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGoodObservations( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getFilterStages() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getFilterStages() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilterStages( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getPredetectInterval() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getPredetectInterval() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setPredetectInterval( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Reader::getCycleSlipCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t QcomGnss::DrMeasurementReport::SV::Builder::getCycleSlipCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCycleSlipCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getPostdetections() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getPostdetections() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setPostdetections( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::SV::Reader::hasMeasurementStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrMeasurementReport::SV::Builder::hasMeasurementStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::MeasurementStatus::Reader QcomGnss::DrMeasurementReport::SV::Reader::getMeasurementStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::DrMeasurementReport::SV::Builder::getMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::QcomGnss::MeasurementStatus::Pipeline QcomGnss::DrMeasurementReport::SV::Pipeline::getMeasurementStatus() {
  return  ::cereal::QcomGnss::MeasurementStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void QcomGnss::DrMeasurementReport::SV::Builder::setMeasurementStatus( ::cereal::QcomGnss::MeasurementStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::MeasurementStatus::Builder QcomGnss::DrMeasurementReport::SV::Builder::initMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::adoptMeasurementStatus(
    ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss::MeasurementStatus> QcomGnss::DrMeasurementReport::SV::Builder::disownMeasurementStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss::MeasurementStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getCarrierNoise() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getCarrierNoise() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCarrierNoise( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getRfLoss() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getRfLoss() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setRfLoss( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t QcomGnss::DrMeasurementReport::SV::Reader::getLatency() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t QcomGnss::DrMeasurementReport::SV::Builder::getLatency() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setLatency( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getFilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getFilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredMeasurementFraction() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredMeasurementFraction() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredMeasurementFraction(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredMeasurementIntegral() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredMeasurementIntegral() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredMeasurementIntegral( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredTimeUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredTimeUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredTimeUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getUnfilteredSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getUnfilteredSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setUnfilteredSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getMultipathEstimate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getMultipathEstimate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setMultipathEstimate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getAzimuth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getAzimuth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setAzimuth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getDopplerAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getDopplerAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setDopplerAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFineSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFineSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFineSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrMeasurementReport::SV::Reader::getFineSpeedUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrMeasurementReport::SV::Builder::getFineSpeedUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFineSpeedUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double QcomGnss::DrMeasurementReport::SV::Reader::getCarrierPhase() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double QcomGnss::DrMeasurementReport::SV::Builder::getCarrierPhase() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setCarrierPhase(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Reader::getFCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t QcomGnss::DrMeasurementReport::SV::Builder::getFCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setFCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Reader::getParityErrorCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrMeasurementReport::SV::Builder::getParityErrorCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setParityErrorCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrMeasurementReport::SV::Reader::getGoodParity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrMeasurementReport::SV::Builder::getGoodParity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrMeasurementReport::SV::Builder::setGoodParity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t QcomGnss::DrSvPolyReport::Reader::getFrequencyIndex() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t QcomGnss::DrSvPolyReport::Builder::getFrequencyIndex() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setFrequencyIndex( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasPosition() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasPosition() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasPosition(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasIono() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasIono() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasIono(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasTropo() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasTropo() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasTropo(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasElevation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasElevation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasElevation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getPolyFromXtra() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getPolyFromXtra() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setPolyFromXtra(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::getHasSbasIono() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline bool QcomGnss::DrSvPolyReport::Builder::getHasSbasIono() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setHasSbasIono(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Reader::getIode() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t QcomGnss::DrSvPolyReport::Builder::getIode() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIode( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double QcomGnss::DrSvPolyReport::Reader::getT0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double QcomGnss::DrSvPolyReport::Builder::getT0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setT0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasXyz0() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasXyz0() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader QcomGnss::DrSvPolyReport::Reader::getXyz0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::getXyz0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyz0( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyz0(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::initXyz0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptXyz0(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> QcomGnss::DrSvPolyReport::Builder::disownXyz0() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasXyzN() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasXyzN() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader QcomGnss::DrSvPolyReport::Reader::getXyzN() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::getXyzN() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyzN( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setXyzN(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::initXyzN(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptXyzN(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> QcomGnss::DrSvPolyReport::Builder::disownXyzN() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasOther() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasOther() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader QcomGnss::DrSvPolyReport::Reader::getOther() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder QcomGnss::DrSvPolyReport::Builder::getOther() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setOther( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setOther(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder QcomGnss::DrSvPolyReport::Builder::initOther(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptOther(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> QcomGnss::DrSvPolyReport::Builder::disownOther() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float QcomGnss::DrSvPolyReport::Reader::getPositionUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getPositionUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setPositionUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getIonoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getIonoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIonoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getIonoDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getIonoDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setIonoDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getSbasIonoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getSbasIonoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSbasIonoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getSbasIonoDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getSbasIonoDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setSbasIonoDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getTropoDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getTropoDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setTropoDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevationDot() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevationDot() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevationDot(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float QcomGnss::DrSvPolyReport::Reader::getElevationUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float QcomGnss::DrSvPolyReport::Builder::getElevationUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void QcomGnss::DrSvPolyReport::Builder::setElevationUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool QcomGnss::DrSvPolyReport::Reader::hasVelocityCoeff() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool QcomGnss::DrSvPolyReport::Builder::hasVelocityCoeff() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader QcomGnss::DrSvPolyReport::Reader::getVelocityCoeff() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::getVelocityCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void QcomGnss::DrSvPolyReport::Builder::setVelocityCoeff( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void QcomGnss::DrSvPolyReport::Builder::setVelocityCoeff(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder QcomGnss::DrSvPolyReport::Builder::initVelocityCoeff(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void QcomGnss::DrSvPolyReport::Builder::adoptVelocityCoeff(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> QcomGnss::DrSvPolyReport::Builder::disownVelocityCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LidarPts::Reader::hasR() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasR() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t>::Reader LidarPts::Reader::getR() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t>::Builder LidarPts::Builder::getR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setR( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setR(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t>::Builder LidarPts::Builder::initR(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptR(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> LidarPts::Builder::disownR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LidarPts::Reader::hasTheta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasTheta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t>::Reader LidarPts::Reader::getTheta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t>::Builder LidarPts::Builder::getTheta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setTheta( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setTheta(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t>::Builder LidarPts::Builder::initTheta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptTheta(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> LidarPts::Builder::disownTheta() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LidarPts::Reader::hasReflect() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasReflect() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader LidarPts::Reader::getReflect() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder LidarPts::Builder::getReflect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setReflect( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LidarPts::Builder::setReflect(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder LidarPts::Builder::initReflect(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptReflect(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> LidarPts::Builder::disownReflect() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t LidarPts::Reader::getIdx() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LidarPts::Builder::getIdx() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LidarPts::Builder::setIdx( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LidarPts::Reader::hasPkt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LidarPts::Builder::hasPkt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LidarPts::Reader::getPkt() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LidarPts::Builder::getPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LidarPts::Builder::setPkt( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LidarPts::Builder::initPkt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LidarPts::Builder::adoptPkt(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LidarPts::Builder::disownPkt() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasCpuTimes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasCpuTimes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Reader ProcLog::Reader::getCpuTimes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Builder ProcLog::Builder::getCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setCpuTimes( ::capnp::List< ::cereal::ProcLog::CPUTimes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::CPUTimes>::Builder ProcLog::Builder::initCpuTimes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptCpuTimes(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::CPUTimes>> ProcLog::Builder::disownCpuTimes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::CPUTimes>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasMem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasMem() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Mem::Reader ProcLog::Reader::getMem() const {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::getMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ProcLog::Mem::Pipeline ProcLog::Pipeline::getMem() {
  return  ::cereal::ProcLog::Mem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ProcLog::Builder::setMem( ::cereal::ProcLog::Mem::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Mem::Builder ProcLog::Builder::initMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::adoptMem(
    ::capnp::Orphan< ::cereal::ProcLog::Mem>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog::Mem> ProcLog::Builder::disownMem() {
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog::Mem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Reader::hasProcs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Builder::hasProcs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ProcLog::Process>::Reader ProcLog::Reader::getProcs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ProcLog::Process>::Builder ProcLog::Builder::getProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Builder::setProcs( ::capnp::List< ::cereal::ProcLog::Process>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ProcLog::Process>::Builder ProcLog::Builder::initProcs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Builder::adoptProcs(
    ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ProcLog::Process>> ProcLog::Builder::disownProcs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ProcLog::Process>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t ProcLog::Process::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t ProcLog::Process::Reader::getState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ProcLog::Process::Builder::getState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getPpid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getPpid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPpid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::Process::Reader::getCpuChildrenSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::Process::Builder::getCpuChildrenSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setCpuChildrenSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ProcLog::Process::Reader::getPriority() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::Process::Builder::getPriority() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setPriority( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNice() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNice() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNice( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getNumThreads() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getNumThreads() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setNumThreads( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double ProcLog::Process::Reader::getStartTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double ProcLog::Process::Builder::getStartTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setStartTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemVms() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemVms() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemVms( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Process::Reader::getMemRss() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Process::Builder::getMemRss() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setMemRss( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ProcLog::Process::Reader::getProcessor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ProcLog::Process::Builder::getProcessor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Process::Builder::setProcessor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ProcLog::Process::Reader::hasCmdline() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasCmdline() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ProcLog::Process::Reader::getCmdline() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ProcLog::Process::Builder::getCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setCmdline( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ProcLog::Process::Builder::setCmdline(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ProcLog::Process::Builder::initCmdline(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptCmdline(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ProcLog::Process::Builder::disownCmdline() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ProcLog::Process::Reader::hasExe() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ProcLog::Process::Builder::hasExe() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcLog::Process::Reader::getExe() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::getExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ProcLog::Process::Builder::setExe( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcLog::Process::Builder::initExe(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ProcLog::Process::Builder::adoptExe(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcLog::Process::Builder::disownExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int64_t ProcLog::CPUTimes::Reader::getCpuNum() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ProcLog::CPUTimes::Builder::getCpuNum() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setCpuNum( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getUser() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getUser() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setUser(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getNice() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getNice() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setNice(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSystem() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSystem() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSystem(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIdle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIdle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIdle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIowait() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIowait() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIowait(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getIrq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getIrq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setIrq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ProcLog::CPUTimes::Reader::getSoftirq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ProcLog::CPUTimes::Builder::getSoftirq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ProcLog::CPUTimes::Builder::setSoftirq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getFree() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getFree() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setFree( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getAvailable() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getAvailable() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setAvailable( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getBuffers() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getBuffers() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setBuffers( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getCached() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getCached() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setCached( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getActive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getActive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setActive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getInactive() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getInactive() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setInactive( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcLog::Mem::Reader::getShared() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcLog::Mem::Builder::getShared() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ProcLog::Mem::Builder::setShared( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::Which UbloxGnss::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cereal::UbloxGnss::Which UbloxGnss::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Reader::isMeasurementReport() const {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Builder::isMeasurementReport() {
  return which() == UbloxGnss::MEASUREMENT_REPORT;
}
inline bool UbloxGnss::Reader::hasMeasurementReport() const {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasMeasurementReport() {
  if (which() != UbloxGnss::MEASUREMENT_REPORT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Reader UbloxGnss::Reader::getMeasurementReport() const {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::getMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setMeasurementReport( ::cereal::UbloxGnss::MeasurementReport::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Builder UbloxGnss::Builder::initMeasurementReport() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptMeasurementReport(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::MEASUREMENT_REPORT);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport> UbloxGnss::Builder::disownMeasurementReport() {
  KJ_IREQUIRE((which() == UbloxGnss::MEASUREMENT_REPORT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isEphemeris() const {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Builder::isEphemeris() {
  return which() == UbloxGnss::EPHEMERIS;
}
inline bool UbloxGnss::Reader::hasEphemeris() const {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasEphemeris() {
  if (which() != UbloxGnss::EPHEMERIS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Ephemeris::Reader UbloxGnss::Reader::getEphemeris() const {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::getEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setEphemeris( ::cereal::UbloxGnss::Ephemeris::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Ephemeris::Builder UbloxGnss::Builder::initEphemeris() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptEphemeris(
    ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::EPHEMERIS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::Ephemeris> UbloxGnss::Builder::disownEphemeris() {
  KJ_IREQUIRE((which() == UbloxGnss::EPHEMERIS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::Ephemeris>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isIonoData() const {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Builder::isIonoData() {
  return which() == UbloxGnss::IONO_DATA;
}
inline bool UbloxGnss::Reader::hasIonoData() const {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasIonoData() {
  if (which() != UbloxGnss::IONO_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::IonoData::Reader UbloxGnss::Reader::getIonoData() const {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::getIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setIonoData( ::cereal::UbloxGnss::IonoData::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::IonoData::Builder UbloxGnss::Builder::initIonoData() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptIonoData(
    ::capnp::Orphan< ::cereal::UbloxGnss::IonoData>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::IONO_DATA);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::IonoData> UbloxGnss::Builder::disownIonoData() {
  KJ_IREQUIRE((which() == UbloxGnss::IONO_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::IonoData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Reader::isHwStatus() const {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Builder::isHwStatus() {
  return which() == UbloxGnss::HW_STATUS;
}
inline bool UbloxGnss::Reader::hasHwStatus() const {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Builder::hasHwStatus() {
  if (which() != UbloxGnss::HW_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::HwStatus::Reader UbloxGnss::Reader::getHwStatus() const {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::getHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::setHwStatus( ::cereal::UbloxGnss::HwStatus::Reader value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::HwStatus::Builder UbloxGnss::Builder::initHwStatus() {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Builder::adoptHwStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus>&& value) {
  _builder.setDataField<UbloxGnss::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, UbloxGnss::HW_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::HwStatus> UbloxGnss::Builder::disownHwStatus() {
  KJ_IREQUIRE((which() == UbloxGnss::HW_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::HwStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UbloxGnss::MeasurementReport::Reader::getRcvTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Builder::getRcvTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setRcvTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getGpsWeek() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getGpsWeek() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setGpsWeek( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Reader::getLeapSeconds() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Builder::getLeapSeconds() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setLeapSeconds( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasReceiverStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasReceiverStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader UbloxGnss::MeasurementReport::Reader::getReceiverStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::getReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline UbloxGnss::MeasurementReport::Pipeline::getReceiverStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Builder::setReceiverStatus( ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus::Builder UbloxGnss::MeasurementReport::Builder::initReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::adoptReceiverStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus> UbloxGnss::MeasurementReport::Builder::disownReceiverStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::ReceiverStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Reader::getNumMeas() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Builder::getNumMeas() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Builder::setNumMeas( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Reader::hasMeasurements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Builder::hasMeasurements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Reader UbloxGnss::MeasurementReport::Reader::getMeasurements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Builder UbloxGnss::MeasurementReport::Builder::getMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Builder::setMeasurements( ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>::Builder UbloxGnss::MeasurementReport::Builder::initMeasurements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::MeasurementReport::Builder::adoptMeasurements(
    ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>> UbloxGnss::MeasurementReport::Builder::disownMeasurements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::UbloxGnss::MeasurementReport::Measurement>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getLeapSecValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getLeapSecValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setLeapSecValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Reader::getClkReset() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::ReceiverStatus::Builder::getClkReset() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::ReceiverStatus::Builder::setClkReset(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSvId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSvId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSvId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::Reader::hasTrackingStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::MeasurementReport::Measurement::Builder::hasTrackingStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader UbloxGnss::MeasurementReport::Measurement::Reader::getTrackingStatus() const {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::getTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline UbloxGnss::MeasurementReport::Measurement::Pipeline::getTrackingStatus() {
  return  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setTrackingStatus( ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder UbloxGnss::MeasurementReport::Measurement::Builder::initTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::adoptTrackingStatus(
    ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus> UbloxGnss::MeasurementReport::Measurement::Builder::disownTrackingStatus() {
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss::MeasurementReport::Measurement::TrackingStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierCycles() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierCycles() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierCycles(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDoppler() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDoppler() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDoppler(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGnssId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGnssId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGnssId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getGlonassFrequencyIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getGlonassFrequencyIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setGlonassFrequencyIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Reader::getLocktime() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::MeasurementReport::Measurement::Builder::getLocktime() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setLocktime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getCno() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getCno() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCno( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getPseudorangeStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getPseudorangeStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setPseudorangeStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getCarrierPhaseStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getCarrierPhaseStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setCarrierPhaseStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::MeasurementReport::Measurement::Reader::getDopplerStdev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::MeasurementReport::Measurement::Builder::getDopplerStdev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setDopplerStdev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Reader::getSigId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::MeasurementReport::Measurement::Builder::getSigId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::Builder::setSigId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getPseudorangeValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getPseudorangeValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setPseudorangeValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getCarrierPhaseValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getCarrierPhaseValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setCarrierPhaseValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Reader::getHalfCycleSubtracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::getHalfCycleSubtracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::MeasurementReport::Measurement::TrackingStatus::Builder::setHalfCycleSubtracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getSvId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getSvId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMonth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMonth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMonth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getDay() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getDay() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDay( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getHour() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getHour() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setHour( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Reader::getMinute() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::Ephemeris::Builder::getMinute() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setMinute( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float UbloxGnss::Ephemeris::Reader::getSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float UbloxGnss::Ephemeris::Builder::getSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getAf2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getAf2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setAf2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIode() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIode() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIode(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getDeltaN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getDeltaN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setDeltaN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getM0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getM0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setM0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCuc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCuc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCuc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getEcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getEcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setEcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCus() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCus() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCus(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToe() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToe() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToe(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCic() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCic() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCic(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCis() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCis() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCis(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getI0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getI0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setI0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCrc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCrc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCrc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmega() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmega() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmega(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getOmegaDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getOmegaDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setOmegaDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getCodesL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getCodesL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setCodesL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getGpsWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getGpsWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setGpsWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getL2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getL2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setL2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvAcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvAcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvAcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getSvHealth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getSvHealth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setSvHealth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTgd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTgd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTgd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getIodc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getIodc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIodc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getTransmissionTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getTransmissionTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setTransmissionTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getFitInterval() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getFitInterval() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setFitInterval(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::Ephemeris::Reader::getToc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::Ephemeris::Builder::getToc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setToc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::Ephemeris::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2048>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader UbloxGnss::Ephemeris::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder UbloxGnss::Ephemeris::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder UbloxGnss::Ephemeris::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> UbloxGnss::Ephemeris::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::Ephemeris::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::Ephemeris::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader UbloxGnss::Ephemeris::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder UbloxGnss::Ephemeris::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::Ephemeris::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder UbloxGnss::Ephemeris::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::Ephemeris::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> UbloxGnss::Ephemeris::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t UbloxGnss::IonoData::Reader::getSvHealth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UbloxGnss::IonoData::Builder::getSvHealth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setSvHealth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getTow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getTow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setTow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UbloxGnss::IonoData::Reader::getGpsWeek() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UbloxGnss::IonoData::Builder::getGpsWeek() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setGpsWeek(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::hasIonoAlpha() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoAlpha() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader UbloxGnss::IonoData::Reader::getIonoAlpha() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder UbloxGnss::IonoData::Builder::getIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoAlpha(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder UbloxGnss::IonoData::Builder::initIonoAlpha(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoAlpha(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> UbloxGnss::IonoData::Builder::disownIonoAlpha() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::hasIonoBeta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UbloxGnss::IonoData::Builder::hasIonoBeta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader UbloxGnss::IonoData::Reader::getIonoBeta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder UbloxGnss::IonoData::Builder::getIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UbloxGnss::IonoData::Builder::setIonoBeta(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder UbloxGnss::IonoData::Builder::initIonoBeta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UbloxGnss::IonoData::Builder::adoptIonoBeta(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> UbloxGnss::IonoData::Builder::disownIonoBeta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UbloxGnss::IonoData::Reader::getHealthValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getHealthValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setHealthValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool UbloxGnss::IonoData::Reader::getIonoCoeffsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool UbloxGnss::IonoData::Builder::getIonoCoeffsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::IonoData::Builder::setIonoCoeffsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getNoisePerMS() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getNoisePerMS() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setNoisePerMS( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UbloxGnss::HwStatus::Reader::getAgcCnt() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UbloxGnss::HwStatus::Builder::getAgcCnt() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAgcCnt( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Reader::getAStatus() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState UbloxGnss::HwStatus::Builder::getAStatus() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAStatus( ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaSupervisorState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Reader::getAPower() const {
  return _reader.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus UbloxGnss::HwStatus::Builder::getAPower() {
  return _builder.getDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setAPower( ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus value) {
  _builder.setDataField< ::cereal::UbloxGnss::HwStatus::AntennaPowerStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UbloxGnss::HwStatus::Reader::getJamInd() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UbloxGnss::HwStatus::Builder::getJamInd() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UbloxGnss::HwStatus::Builder::setJamInd( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getBootTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getBootTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setBootTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getMonotonicRawNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getMonotonicRawNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setMonotonicRawNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Clocks::Reader::getModemUptimeMillis() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Clocks::Builder::getModemUptimeMillis() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Clocks::Builder::setModemUptimeMillis( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMpcData::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMpcData::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setX( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMpcData::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMpcData::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setY( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMpcData::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasPsi() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasPsi() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMpcData::Reader::getPsi() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::getPsi() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setPsi( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setPsi(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::initPsi(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptPsi(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMpcData::Builder::disownPsi() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveMpcData::Reader::hasDelta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMpcData::Builder::hasDelta() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMpcData::Reader::getDelta() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::getDelta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveMpcData::Builder::setDelta( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveMpcData::Builder::setDelta(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMpcData::Builder::initDelta(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveMpcData::Builder::adoptDelta(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMpcData::Builder::disownDelta() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t LiveMpcData::Reader::getQpIterations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveMpcData::Builder::getQpIterations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setQpIterations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveMpcData::Reader::getCalculationTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveMpcData::Builder::getCalculationTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setCalculationTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double LiveMpcData::Reader::getCost() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LiveMpcData::Builder::getCost() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMpcData::Builder::setCost(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveLongitudinalMpcData::Reader::hasXEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasXEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getXEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getXEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setXEgo( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setXEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initXEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptXEgo(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownXEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasVEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasVEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getVEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getVEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setVEgo( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setVEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initVEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptVEgo(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownVEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasAEgo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasAEgo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getAEgo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getAEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setAEgo( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setAEgo(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initAEgo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptAEgo(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownAEgo() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasXLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasXLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getXLead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getXLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setXLead( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setXLead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initXLead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptXLead(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownXLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasVLead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasVLead() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getVLead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getVLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setVLead( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setVLead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initVLead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptVLead(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownVLead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LiveLongitudinalMpcData::Reader::hasALead() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LiveLongitudinalMpcData::Builder::hasALead() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveLongitudinalMpcData::Reader::getALead() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::getALead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LiveLongitudinalMpcData::Builder::setALead( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void LiveLongitudinalMpcData::Builder::setALead(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveLongitudinalMpcData::Builder::initALead(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LiveLongitudinalMpcData::Builder::adoptALead(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveLongitudinalMpcData::Builder::disownALead() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float LiveLongitudinalMpcData::Reader::getALeadTau() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LiveLongitudinalMpcData::Builder::getALeadTau() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setALeadTau(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LiveLongitudinalMpcData::Reader::getQpIterations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveLongitudinalMpcData::Builder::getQpIterations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setQpIterations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LiveLongitudinalMpcData::Reader::getMpcId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LiveLongitudinalMpcData::Builder::getMpcId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setMpcId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveLongitudinalMpcData::Reader::getCalculationTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveLongitudinalMpcData::Builder::getCalculationTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setCalculationTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double LiveLongitudinalMpcData::Reader::getCost() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double LiveLongitudinalMpcData::Builder::getCost() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveLongitudinalMpcData::Builder::setCost(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ECEFPointDEPRECATED::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ECEFPointDEPRECATED::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ECEFPointDEPRECATED::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ECEFPoint::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ECEFPoint::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ECEFPoint::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ECEFPoint::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ECEFPoint::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasCurPosDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasCurPosDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPointDEPRECATED::Reader GPSPlannerPoints::Reader::getCurPosDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPointDEPRECATED::Builder GPSPlannerPoints::Builder::getCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPointDEPRECATED::Pipeline GPSPlannerPoints::Pipeline::getCurPosDEPRECATED() {
  return  ::cereal::ECEFPointDEPRECATED::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GPSPlannerPoints::Builder::setCurPosDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPointDEPRECATED::Builder GPSPlannerPoints::Builder::initCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::adoptCurPosDEPRECATED(
    ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> GPSPlannerPoints::Builder::disownCurPosDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::hasPointsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasPointsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader GPSPlannerPoints::Reader::getPointsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder GPSPlannerPoints::Builder::getPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder GPSPlannerPoints::Builder::initPointsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptPointsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>> GPSPlannerPoints::Builder::disownPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GPSPlannerPoints::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasTrackName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasTrackName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSPlannerPoints::Reader::getTrackName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSPlannerPoints::Builder::getTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setTrackName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSPlannerPoints::Builder::initTrackName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptTrackName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSPlannerPoints::Builder::disownTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float GPSPlannerPoints::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPoints::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GPSPlannerPoints::Reader::getAccelTarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPoints::Builder::getAccelTarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPoints::Builder::setAccelTarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPoints::Reader::hasCurPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasCurPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader GPSPlannerPoints::Reader::getCurPos() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder GPSPlannerPoints::Builder::getCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline GPSPlannerPoints::Pipeline::getCurPos() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GPSPlannerPoints::Builder::setCurPos( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder GPSPlannerPoints::Builder::initCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::adoptCurPos(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> GPSPlannerPoints::Builder::disownCurPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPoints::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPoints::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Reader GPSPlannerPoints::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder GPSPlannerPoints::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void GPSPlannerPoints::Builder::setPoints( ::capnp::List< ::cereal::ECEFPoint>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder GPSPlannerPoints::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPoints::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> GPSPlannerPoints::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GPSPlannerPlan::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPlan::Reader::hasPoly() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPoly() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader GPSPlannerPlan::Reader::getPoly() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder GPSPlannerPlan::Builder::getPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPoly( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GPSPlannerPlan::Builder::setPoly(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder GPSPlannerPlan::Builder::initPoly(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPoly(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> GPSPlannerPlan::Builder::disownPoly() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::hasTrackName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasTrackName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GPSPlannerPlan::Reader::getTrackName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GPSPlannerPlan::Builder::getTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setTrackName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GPSPlannerPlan::Builder::initTrackName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptTrackName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GPSPlannerPlan::Builder::disownTrackName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float GPSPlannerPlan::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float GPSPlannerPlan::Reader::getAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GPSPlannerPlan::Reader::hasPointsDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPointsDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader GPSPlannerPlan::Reader::getPointsDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder GPSPlannerPlan::Builder::getPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPointsDEPRECATED( ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPointDEPRECATED>::Builder GPSPlannerPlan::Builder::initPointsDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPointsDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPointDEPRECATED>> GPSPlannerPlan::Builder::disownPointsDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPointDEPRECATED>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GPSPlannerPlan::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GPSPlannerPlan::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Reader GPSPlannerPlan::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder GPSPlannerPlan::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GPSPlannerPlan::Builder::setPoints( ::capnp::List< ::cereal::ECEFPoint>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder GPSPlannerPlan::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void GPSPlannerPlan::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> GPSPlannerPlan::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float GPSPlannerPlan::Reader::getXLookahead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float GPSPlannerPlan::Builder::getXLookahead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GPSPlannerPlan::Builder::setXLookahead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::TrafficEvent::Type TrafficEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::TrafficEvent::Type TrafficEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setType( ::cereal::TrafficEvent::Type value) {
  _builder.setDataField< ::cereal::TrafficEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float TrafficEvent::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TrafficEvent::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::TrafficEvent::Action TrafficEvent::Reader::getAction() const {
  return _reader.getDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::TrafficEvent::Action TrafficEvent::Builder::getAction() {
  return _builder.getDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setAction( ::cereal::TrafficEvent::Action value) {
  _builder.setDataField< ::cereal::TrafficEvent::Action>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficEvent::Reader::getResuming() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool TrafficEvent::Builder::getResuming() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void TrafficEvent::Builder::setResuming(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbslamCorrection::Reader::getCorrectionMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbslamCorrection::Builder::getCorrectionMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbslamCorrection::Builder::setCorrectionMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbslamCorrection::Reader::hasPrePositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPrePositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader OrbslamCorrection::Reader::getPrePositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder OrbslamCorrection::Builder::getPrePositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPrePositionECEF( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPrePositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder OrbslamCorrection::Builder::initPrePositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPrePositionECEF(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> OrbslamCorrection::Builder::disownPrePositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPostPositionECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPostPositionECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader OrbslamCorrection::Reader::getPostPositionECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder OrbslamCorrection::Builder::getPostPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPostPositionECEF( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPostPositionECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder OrbslamCorrection::Builder::initPostPositionECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPostPositionECEF(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> OrbslamCorrection::Builder::disownPostPositionECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPrePoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPrePoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader OrbslamCorrection::Reader::getPrePoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder OrbslamCorrection::Builder::getPrePoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPrePoseQuatECEF( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPrePoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder OrbslamCorrection::Builder::initPrePoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPrePoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> OrbslamCorrection::Builder::disownPrePoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool OrbslamCorrection::Reader::hasPostPoseQuatECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OrbslamCorrection::Builder::hasPostPoseQuatECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader OrbslamCorrection::Reader::getPostPoseQuatECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder OrbslamCorrection::Builder::getPostPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OrbslamCorrection::Builder::setPostPoseQuatECEF( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void OrbslamCorrection::Builder::setPostPoseQuatECEF(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder OrbslamCorrection::Builder::initPostPoseQuatECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void OrbslamCorrection::Builder::adoptPostPoseQuatECEF(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> OrbslamCorrection::Builder::disownPostPoseQuatECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t OrbslamCorrection::Reader::getNumInliers() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OrbslamCorrection::Builder::getNumInliers() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbslamCorrection::Builder::setNumInliers( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbObservation::Reader::getObservationMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbObservation::Builder::getObservationMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbObservation::Builder::setObservationMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbObservation::Reader::hasNormalizedCoordinates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbObservation::Builder::hasNormalizedCoordinates() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader OrbObservation::Reader::getNormalizedCoordinates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder OrbObservation::Builder::getNormalizedCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbObservation::Builder::setNormalizedCoordinates( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbObservation::Builder::setNormalizedCoordinates(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder OrbObservation::Builder::initNormalizedCoordinates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbObservation::Builder::adoptNormalizedCoordinates(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> OrbObservation::Builder::disownNormalizedCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbObservation::Reader::hasLocationECEF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbObservation::Builder::hasLocationECEF() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader OrbObservation::Reader::getLocationECEF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder OrbObservation::Builder::getLocationECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbObservation::Builder::setLocationECEF( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbObservation::Builder::setLocationECEF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder OrbObservation::Builder::initLocationECEF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbObservation::Builder::adoptLocationECEF(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> OrbObservation::Builder::disownLocationECEF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t OrbObservation::Reader::getMatchDistance() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OrbObservation::Builder::getMatchDistance() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbObservation::Builder::setMatchDistance( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UiNavigationEvent::Type UiNavigationEvent::Reader::getType() const {
  return _reader.getDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiNavigationEvent::Type UiNavigationEvent::Builder::getType() {
  return _builder.getDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setType( ::cereal::UiNavigationEvent::Type value) {
  _builder.setDataField< ::cereal::UiNavigationEvent::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cereal::UiNavigationEvent::Status UiNavigationEvent::Reader::getStatus() const {
  return _reader.getDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiNavigationEvent::Status UiNavigationEvent::Builder::getStatus() {
  return _builder.getDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setStatus( ::cereal::UiNavigationEvent::Status value) {
  _builder.setDataField< ::cereal::UiNavigationEvent::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float UiNavigationEvent::Reader::getDistanceTo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float UiNavigationEvent::Builder::getDistanceTo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UiNavigationEvent::Builder::setDistanceTo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UiNavigationEvent::Reader::hasEndRoadPointDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UiNavigationEvent::Builder::hasEndRoadPointDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPointDEPRECATED::Reader UiNavigationEvent::Reader::getEndRoadPointDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPointDEPRECATED::Builder UiNavigationEvent::Builder::getEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPointDEPRECATED::Pipeline UiNavigationEvent::Pipeline::getEndRoadPointDEPRECATED() {
  return  ::cereal::ECEFPointDEPRECATED::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UiNavigationEvent::Builder::setEndRoadPointDEPRECATED( ::cereal::ECEFPointDEPRECATED::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPointDEPRECATED::Builder UiNavigationEvent::Builder::initEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UiNavigationEvent::Builder::adoptEndRoadPointDEPRECATED(
    ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPointDEPRECATED> UiNavigationEvent::Builder::disownEndRoadPointDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPointDEPRECATED>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UiNavigationEvent::Reader::hasEndRoadPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UiNavigationEvent::Builder::hasEndRoadPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader UiNavigationEvent::Reader::getEndRoadPoint() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder UiNavigationEvent::Builder::getEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline UiNavigationEvent::Pipeline::getEndRoadPoint() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UiNavigationEvent::Builder::setEndRoadPoint( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder UiNavigationEvent::Builder::initEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UiNavigationEvent::Builder::adoptEndRoadPoint(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> UiNavigationEvent::Builder::disownEndRoadPoint() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cereal::UiLayoutState::App UiLayoutState::Reader::getActiveApp() const {
  return _reader.getDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::cereal::UiLayoutState::App UiLayoutState::Builder::getActiveApp() {
  return _builder.getDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setActiveApp( ::cereal::UiLayoutState::App value) {
  _builder.setDataField< ::cereal::UiLayoutState::App>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UiLayoutState::Reader::getSidebarCollapsed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool UiLayoutState::Builder::getSidebarCollapsed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setSidebarCollapsed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool UiLayoutState::Reader::getMapEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool UiLayoutState::Builder::getMapEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void UiLayoutState::Builder::setMapEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool Joystick::Reader::hasAxes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasAxes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Joystick::Reader::getAxes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Joystick::Builder::getAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setAxes( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setAxes(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Joystick::Builder::initAxes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptAxes(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Joystick::Builder::disownAxes() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Joystick::Reader::hasButtons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Joystick::Builder::hasButtons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Joystick::Reader::getButtons() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Joystick::Builder::getButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Joystick::Builder::setButtons( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Joystick::Builder::setButtons(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Joystick::Builder::initButtons(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Joystick::Builder::adoptButtons(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Joystick::Builder::disownButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbOdometry::Reader::getStartMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbOdometry::Builder::getStartMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setStartMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbOdometry::Reader::getEndMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbOdometry::Builder::getEndMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setEndMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OrbOdometry::Reader::hasF() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbOdometry::Builder::hasF() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader OrbOdometry::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder OrbOdometry::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbOdometry::Builder::setF( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbOdometry::Builder::setF(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder OrbOdometry::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbOdometry::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> OrbOdometry::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double OrbOdometry::Reader::getErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double OrbOdometry::Builder::getErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t OrbOdometry::Reader::getInliers() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t OrbOdometry::Builder::getInliers() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void OrbOdometry::Builder::setInliers( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool OrbOdometry::Reader::hasMatches() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbOdometry::Builder::hasMatches() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t>::Reader OrbOdometry::Reader::getMatches() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t>::Builder OrbOdometry::Builder::getMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbOdometry::Builder::setMatches( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbOdometry::Builder::setMatches(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t>::Builder OrbOdometry::Builder::initMatches(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbOdometry::Builder::adoptMatches(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> OrbOdometry::Builder::disownMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeatures::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeatures::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbFeatures::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbFeatures::Reader::hasXs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasXs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader OrbFeatures::Reader::getXs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder OrbFeatures::Builder::getXs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setXs( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setXs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder OrbFeatures::Builder::initXs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptXs(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> OrbFeatures::Builder::disownXs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasYs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasYs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader OrbFeatures::Reader::getYs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder OrbFeatures::Builder::getYs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setYs( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setYs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder OrbFeatures::Builder::initYs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptYs(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> OrbFeatures::Builder::disownYs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasDescriptors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasDescriptors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader OrbFeatures::Reader::getDescriptors() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder OrbFeatures::Builder::getDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setDescriptors( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder OrbFeatures::Builder::initDescriptors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptDescriptors(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> OrbFeatures::Builder::disownDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool OrbFeatures::Reader::hasOctaves() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasOctaves() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader OrbFeatures::Reader::getOctaves() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t>::Builder OrbFeatures::Builder::getOctaves() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setOctaves( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setOctaves(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder OrbFeatures::Builder::initOctaves(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptOctaves(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> OrbFeatures::Builder::disownOctaves() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeatures::Reader::getTimestampLastEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeatures::Builder::getTimestampLastEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbFeatures::Builder::setTimestampLastEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OrbFeatures::Reader::hasMatches() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool OrbFeatures::Builder::hasMatches() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t>::Reader OrbFeatures::Reader::getMatches() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t>::Builder OrbFeatures::Builder::getMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void OrbFeatures::Builder::setMatches( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void OrbFeatures::Builder::setMatches(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t>::Builder OrbFeatures::Builder::initMatches(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void OrbFeatures::Builder::adoptMatches(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> OrbFeatures::Builder::disownMatches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getTimestampLastEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getTimestampLastEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setTimestampLastEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t OrbFeaturesSummary::Reader::getFeatureCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t OrbFeaturesSummary::Builder::getFeatureCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setFeatureCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t OrbFeaturesSummary::Reader::getMatchCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t OrbFeaturesSummary::Builder::getMatchCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setMatchCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbFeaturesSummary::Reader::getComputeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbFeaturesSummary::Builder::getComputeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void OrbFeaturesSummary::Builder::setComputeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OrbKeyFrame::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OrbKeyFrame::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrbKeyFrame::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OrbKeyFrame::Reader::hasPos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasPos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ECEFPoint::Reader OrbKeyFrame::Reader::getPos() const {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ECEFPoint::Builder OrbKeyFrame::Builder::getPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::ECEFPoint::Pipeline OrbKeyFrame::Pipeline::getPos() {
  return  ::cereal::ECEFPoint::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OrbKeyFrame::Builder::setPos( ::cereal::ECEFPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ECEFPoint::Builder OrbKeyFrame::Builder::initPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::adoptPos(
    ::capnp::Orphan< ::cereal::ECEFPoint>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ECEFPoint> OrbKeyFrame::Builder::disownPos() {
  return ::capnp::_::PointerHelpers< ::cereal::ECEFPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OrbKeyFrame::Reader::hasDpos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasDpos() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Reader OrbKeyFrame::Reader::getDpos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder OrbKeyFrame::Builder::getDpos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::setDpos( ::capnp::List< ::cereal::ECEFPoint>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::ECEFPoint>::Builder OrbKeyFrame::Builder::initDpos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OrbKeyFrame::Builder::adoptDpos(
    ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::ECEFPoint>> OrbKeyFrame::Builder::disownDpos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::ECEFPoint>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OrbKeyFrame::Reader::hasDescriptors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OrbKeyFrame::Builder::hasDescriptors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader OrbKeyFrame::Reader::getDescriptors() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder OrbKeyFrame::Builder::getDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OrbKeyFrame::Builder::setDescriptors( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder OrbKeyFrame::Builder::initDescriptors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OrbKeyFrame::Builder::adoptDescriptors(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> OrbKeyFrame::Builder::disownDescriptors() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t DriverState::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DriverState::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasDescriptorDEPRECATED() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasDescriptorDEPRECATED() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader DriverState::Reader::getDescriptorDEPRECATED() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder DriverState::Builder::getDescriptorDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setDescriptorDEPRECATED( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setDescriptorDEPRECATED(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder DriverState::Builder::initDescriptorDEPRECATED(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptDescriptorDEPRECATED(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> DriverState::Builder::disownDescriptorDEPRECATED() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DriverState::Reader::getStdDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getStdDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setStdDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasFaceOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFaceOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader DriverState::Reader::getFaceOrientation() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder DriverState::Builder::getFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFaceOrientation( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFaceOrientation(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder DriverState::Builder::initFaceOrientation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFaceOrientation(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> DriverState::Builder::disownFaceOrientation() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasFacePosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFacePosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader DriverState::Reader::getFacePosition() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder DriverState::Builder::getFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFacePosition( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFacePosition(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder DriverState::Builder::initFacePosition(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFacePosition(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> DriverState::Builder::disownFacePosition() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DriverState::Reader::getFaceProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getFaceProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setFaceProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getLeftEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getLeftEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setLeftEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getRightEyeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getRightEyeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setRightEyeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getLeftBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getLeftBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setLeftBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getRightBlinkProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getRightBlinkProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setRightBlinkProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DriverState::Reader::getIrPwrDEPRECATED() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DriverState::Builder::getIrPwrDEPRECATED() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DriverState::Builder::setIrPwrDEPRECATED(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DriverState::Reader::hasFaceOrientationStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFaceOrientationStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader DriverState::Reader::getFaceOrientationStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder DriverState::Builder::getFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFaceOrientationStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFaceOrientationStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder DriverState::Builder::initFaceOrientationStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFaceOrientationStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> DriverState::Builder::disownFaceOrientationStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DriverState::Reader::hasFacePositionStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DriverState::Builder::hasFacePositionStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader DriverState::Reader::getFacePositionStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder DriverState::Builder::getFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DriverState::Builder::setFacePositionStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DriverState::Builder::setFacePositionStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder DriverState::Builder::initFacePositionStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DriverState::Builder::adoptFacePositionStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> DriverState::Builder::disownFacePositionStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DMonitoringState::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DMonitoringState::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent>::Reader DMonitoringState::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder DMonitoringState::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DMonitoringState::Builder::setEvents( ::capnp::List< ::cereal::CarEvent>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder DMonitoringState::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DMonitoringState::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> DMonitoringState::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DMonitoringState::Reader::getFaceDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DMonitoringState::Builder::getFaceDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setFaceDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DMonitoringState::Reader::getIsDistracted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DMonitoringState::Builder::getIsDistracted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setIsDistracted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getAwarenessStatus() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getAwarenessStatus() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setAwarenessStatus(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DMonitoringState::Reader::getIsRHD() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DMonitoringState::Builder::getIsRHD() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setIsRHD(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DMonitoringState::Reader::getRhdChecked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool DMonitoringState::Builder::getRhdChecked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setRhdChecked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getPosePitchOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getPosePitchOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setPosePitchOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DMonitoringState::Reader::getPosePitchValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DMonitoringState::Builder::getPosePitchValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setPosePitchValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getPoseYawOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getPoseYawOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setPoseYawOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DMonitoringState::Reader::getPoseYawValidCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DMonitoringState::Builder::getPoseYawValidCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setPoseYawValidCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getStepChange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getStepChange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setStepChange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getAwarenessActive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getAwarenessActive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setAwarenessActive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DMonitoringState::Reader::getAwarenessPassive() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DMonitoringState::Builder::getAwarenessPassive() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setAwarenessPassive(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DMonitoringState::Reader::getIsLowStd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool DMonitoringState::Builder::getIsLowStd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setIsLowStd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DMonitoringState::Reader::getHiStdCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DMonitoringState::Builder::getHiStdCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DMonitoringState::Builder::setHiStdCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Boot::Reader::getWallTimeNanos() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Boot::Builder::getWallTimeNanos() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Boot::Builder::setWallTimeNanos( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Boot::Reader::hasLastKmsg() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasLastKmsg() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Boot::Reader::getLastKmsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Boot::Builder::getLastKmsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Boot::Builder::setLastKmsg( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Boot::Builder::initLastKmsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Boot::Builder::adoptLastKmsg(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Boot::Builder::disownLastKmsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Boot::Reader::hasLastPmsg() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Boot::Builder::hasLastPmsg() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Boot::Reader::getLastPmsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Boot::Builder::getLastPmsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Boot::Builder::setLastPmsg( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Boot::Builder::initLastPmsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Boot::Builder::adoptLastPmsg(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Boot::Builder::disownLastPmsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveParametersData::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getGyroBias() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getGyroBias() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setGyroBias(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getAngleOffsetAverage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getAngleOffsetAverage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setAngleOffsetAverage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getStiffnessFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getStiffnessFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setStiffnessFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getSteerRatio() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getSteerRatio() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSteerRatio(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getSensorValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getSensorValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setSensorValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LiveParametersData::Reader::getPosenetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveParametersData::Builder::getPosenetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LiveParametersData::Reader::getPosenetValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveParametersData::Builder::getPosenetValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveParametersData::Builder::setPosenetValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::getSpeedLimitValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LiveMapData::Builder::getSpeedLimitValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedLimitValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapData::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::getCurvatureValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LiveMapData::Builder::getCurvatureValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setCurvatureValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapData::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LiveMapData::Reader::getWayId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LiveMapData::Builder::getWayId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setWayId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::hasRoadX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapData::Builder::hasRoadX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMapData::Reader::getRoadX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::getRoadX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LiveMapData::Builder::setRoadX( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LiveMapData::Builder::setRoadX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::initRoadX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LiveMapData::Builder::adoptRoadX(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMapData::Builder::disownRoadX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LiveMapData::Reader::hasRoadY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapData::Builder::hasRoadY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMapData::Reader::getRoadY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::getRoadY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LiveMapData::Builder::setRoadY( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LiveMapData::Builder::setRoadY(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::initRoadY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LiveMapData::Builder::adoptRoadY(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMapData::Builder::disownRoadY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LiveMapData::Reader::hasLastGps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapData::Builder::hasLastGps() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader LiveMapData::Reader::getLastGps() const {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder LiveMapData::Builder::getLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cereal::GpsLocationData::Pipeline LiveMapData::Pipeline::getLastGps() {
  return  ::cereal::GpsLocationData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LiveMapData::Builder::setLastGps( ::cereal::GpsLocationData::Reader value) {
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder LiveMapData::Builder::initLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LiveMapData::Builder::adoptLastGps(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> LiveMapData::Builder::disownLastGps() {
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LiveMapData::Reader::hasRoadCurvatureX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapData::Builder::hasRoadCurvatureX() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMapData::Reader::getRoadCurvatureX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::getRoadCurvatureX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LiveMapData::Builder::setRoadCurvatureX( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LiveMapData::Builder::setRoadCurvatureX(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::initRoadCurvatureX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LiveMapData::Builder::adoptRoadCurvatureX(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMapData::Builder::disownRoadCurvatureX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LiveMapData::Reader::hasRoadCurvature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LiveMapData::Builder::hasRoadCurvature() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader LiveMapData::Reader::getRoadCurvature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::getRoadCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LiveMapData::Builder::setRoadCurvature( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LiveMapData::Builder::setRoadCurvature(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder LiveMapData::Builder::initRoadCurvature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LiveMapData::Builder::adoptRoadCurvature(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> LiveMapData::Builder::disownRoadCurvature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float LiveMapData::Reader::getDistToTurn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getDistToTurn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setDistToTurn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::getMapValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool LiveMapData::Builder::getMapValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setMapValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::getSpeedAdvisoryValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool LiveMapData::Builder::getSpeedAdvisoryValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedAdvisoryValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapData::Reader::getSpeedAdvisory() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getSpeedAdvisory() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedAdvisory(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool LiveMapData::Reader::getSpeedLimitAheadValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool LiveMapData::Builder::getSpeedLimitAheadValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedLimitAheadValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapData::Reader::getSpeedLimitAhead() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getSpeedLimitAhead() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedLimitAhead(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LiveMapData::Reader::getSpeedLimitAheadDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LiveMapData::Builder::getSpeedLimitAheadDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LiveMapData::Builder::setSpeedLimitAheadDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CameraOdometry::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CameraOdometry::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTrans( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CameraOdometry::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CameraOdometry::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRot( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CameraOdometry::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CameraOdometry::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setTransStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CameraOdometry::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CameraOdometry::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CameraOdometry::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader CameraOdometry::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CameraOdometry::Builder::setRotStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CameraOdometry::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder CameraOdometry::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CameraOdometry::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> CameraOdometry::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t CameraOdometry::Reader::getFrameId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraOdometry::Builder::getFrameId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setFrameId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CameraOdometry::Reader::getTimestampEof() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CameraOdometry::Builder::getTimestampEof() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraOdometry::Builder::setTimestampEof( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool KalmanOdometry::Reader::hasTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader KalmanOdometry::Reader::getTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::getTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setTrans( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setTrans(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::initTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptTrans(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> KalmanOdometry::Builder::disownTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasRot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasRot() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader KalmanOdometry::Reader::getRot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::getRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setRot( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setRot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::initRot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptRot(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> KalmanOdometry::Builder::disownRot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasTransStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasTransStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader KalmanOdometry::Reader::getTransStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::getTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setTransStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setTransStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::initTransStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptTransStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> KalmanOdometry::Builder::disownTransStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KalmanOdometry::Reader::hasRotStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool KalmanOdometry::Builder::hasRotStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader KalmanOdometry::Reader::getRotStd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::getRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void KalmanOdometry::Builder::setRotStd( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void KalmanOdometry::Builder::setRotStd(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder KalmanOdometry::Builder::initRotStd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void KalmanOdometry::Builder::adoptRotStd(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> KalmanOdometry::Builder::disownRotStd() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::cereal::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cereal::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Reader::getLogMonoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Builder::getLogMonoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setLogMonoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::isInitData() const {
  return which() == Event::INIT_DATA;
}
inline bool Event::Builder::isInitData() {
  return which() == Event::INIT_DATA;
}
inline bool Event::Reader::hasInitData() const {
  if (which() != Event::INIT_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasInitData() {
  if (which() != Event::INIT_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::InitData::Reader Event::Reader::getInitData() const {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::InitData::Builder Event::Builder::getInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setInitData( ::cereal::InitData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::InitData::Builder Event::Builder::initInitData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptInitData(
    ::capnp::Orphan< ::cereal::InitData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::INIT_DATA);
  ::capnp::_::PointerHelpers< ::cereal::InitData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::InitData> Event::Builder::disownInitData() {
  KJ_IREQUIRE((which() == Event::INIT_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::InitData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isFrame() const {
  return which() == Event::FRAME;
}
inline bool Event::Builder::isFrame() {
  return which() == Event::FRAME;
}
inline bool Event::Reader::hasFrame() const {
  if (which() != Event::FRAME) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFrame() {
  if (which() != Event::FRAME) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getFrame() const {
  KJ_IREQUIRE((which() == Event::FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getFrame() {
  KJ_IREQUIRE((which() == Event::FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setFrame( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initFrame() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRAME);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFrame(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownFrame() {
  KJ_IREQUIRE((which() == Event::FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsNMEA() const {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Builder::isGpsNMEA() {
  return which() == Event::GPS_N_M_E_A;
}
inline bool Event::Reader::hasGpsNMEA() const {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsNMEA() {
  if (which() != Event::GPS_N_M_E_A) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSNMEAData::Reader Event::Reader::getGpsNMEA() const {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::getGpsNMEA() {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsNMEA( ::cereal::GPSNMEAData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSNMEAData::Builder Event::Builder::initGpsNMEA() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsNMEA(
    ::capnp::Orphan< ::cereal::GPSNMEAData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_N_M_E_A);
  ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSNMEAData> Event::Builder::disownGpsNMEA() {
  KJ_IREQUIRE((which() == Event::GPS_N_M_E_A),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSNMEAData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEventDEPRECATED() const {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isSensorEventDEPRECATED() {
  return which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasSensorEventDEPRECATED() const {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEventDEPRECATED() {
  if (which() != Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::SensorEventData::Reader Event::Reader::getSensorEventDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::SensorEventData::Builder Event::Builder::getSensorEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEventDEPRECATED( ::cereal::SensorEventData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::SensorEventData::Builder Event::Builder::initSensorEventDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptSensorEventDEPRECATED(
    ::capnp::Orphan< ::cereal::SensorEventData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::SensorEventData> Event::Builder::disownSensorEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::SensorEventData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCan() const {
  return which() == Event::CAN;
}
inline bool Event::Builder::isCan() {
  return which() == Event::CAN;
}
inline bool Event::Reader::hasCan() const {
  if (which() != Event::CAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCan() {
  if (which() != Event::CAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData>::Reader Event::Reader::getCan() const {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::getCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCan( ::capnp::List< ::cereal::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::initCan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> Event::Builder::disownCan() {
  KJ_IREQUIRE((which() == Event::CAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isThermal() const {
  return which() == Event::THERMAL;
}
inline bool Event::Builder::isThermal() {
  return which() == Event::THERMAL;
}
inline bool Event::Reader::hasThermal() const {
  if (which() != Event::THERMAL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasThermal() {
  if (which() != Event::THERMAL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ThermalData::Reader Event::Reader::getThermal() const {
  KJ_IREQUIRE((which() == Event::THERMAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ThermalData::Builder Event::Builder::getThermal() {
  KJ_IREQUIRE((which() == Event::THERMAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setThermal( ::cereal::ThermalData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THERMAL);
  ::capnp::_::PointerHelpers< ::cereal::ThermalData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ThermalData::Builder Event::Builder::initThermal() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THERMAL);
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptThermal(
    ::capnp::Orphan< ::cereal::ThermalData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THERMAL);
  ::capnp::_::PointerHelpers< ::cereal::ThermalData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ThermalData> Event::Builder::disownThermal() {
  KJ_IREQUIRE((which() == Event::THERMAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ThermalData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isControlsState() const {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Builder::isControlsState() {
  return which() == Event::CONTROLS_STATE;
}
inline bool Event::Reader::hasControlsState() const {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasControlsState() {
  if (which() != Event::CONTROLS_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ControlsState::Reader Event::Reader::getControlsState() const {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ControlsState::Builder Event::Builder::getControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setControlsState( ::cereal::ControlsState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ControlsState::Builder Event::Builder::initControlsState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptControlsState(
    ::capnp::Orphan< ::cereal::ControlsState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CONTROLS_STATE);
  ::capnp::_::PointerHelpers< ::cereal::ControlsState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ControlsState> Event::Builder::disownControlsState() {
  KJ_IREQUIRE((which() == Event::CONTROLS_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ControlsState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveEventDEPRECATED() const {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveEventDEPRECATED() {
  return which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveEventDEPRECATED() const {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveEventDEPRECATED() {
  if (which() != Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveEventData>::Reader Event::Reader::getLiveEventDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveEventData>::Builder Event::Builder::getLiveEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveEventDEPRECATED( ::capnp::List< ::cereal::LiveEventData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveEventData>::Builder Event::Builder::initLiveEventDEPRECATED(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveEventDEPRECATED(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveEventData>> Event::Builder::disownLiveEventDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_EVENT_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveEventData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isModel() const {
  return which() == Event::MODEL;
}
inline bool Event::Builder::isModel() {
  return which() == Event::MODEL;
}
inline bool Event::Reader::hasModel() const {
  if (which() != Event::MODEL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasModel() {
  if (which() != Event::MODEL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ModelData::Reader Event::Reader::getModel() const {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ModelData::Builder Event::Builder::getModel() {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setModel( ::cereal::ModelData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ModelData::Builder Event::Builder::initModel() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptModel(
    ::capnp::Orphan< ::cereal::ModelData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::MODEL);
  ::capnp::_::PointerHelpers< ::cereal::ModelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ModelData> Event::Builder::disownModel() {
  KJ_IREQUIRE((which() == Event::MODEL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ModelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isFeatures() const {
  return which() == Event::FEATURES;
}
inline bool Event::Builder::isFeatures() {
  return which() == Event::FEATURES;
}
inline bool Event::Reader::hasFeatures() const {
  if (which() != Event::FEATURES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFeatures() {
  if (which() != Event::FEATURES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CalibrationFeatures::Reader Event::Reader::getFeatures() const {
  KJ_IREQUIRE((which() == Event::FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::getFeatures() {
  KJ_IREQUIRE((which() == Event::FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setFeatures( ::cereal::CalibrationFeatures::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CalibrationFeatures::Builder Event::Builder::initFeatures() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES);
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFeatures(
    ::capnp::Orphan< ::cereal::CalibrationFeatures>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CalibrationFeatures> Event::Builder::disownFeatures() {
  KJ_IREQUIRE((which() == Event::FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CalibrationFeatures>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSensorEvents() const {
  return which() == Event::SENSOR_EVENTS;
}
inline bool Event::Builder::isSensorEvents() {
  return which() == Event::SENSOR_EVENTS;
}
inline bool Event::Reader::hasSensorEvents() const {
  if (which() != Event::SENSOR_EVENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSensorEvents() {
  if (which() != Event::SENSOR_EVENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::SensorEventData>::Reader Event::Reader::getSensorEvents() const {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::SensorEventData>::Builder Event::Builder::getSensorEvents() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSensorEvents( ::capnp::List< ::cereal::SensorEventData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::SensorEventData>::Builder Event::Builder::initSensorEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSensorEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENSOR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::SensorEventData>> Event::Builder::disownSensorEvents() {
  KJ_IREQUIRE((which() == Event::SENSOR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::SensorEventData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isHealth() const {
  return which() == Event::HEALTH;
}
inline bool Event::Builder::isHealth() {
  return which() == Event::HEALTH;
}
inline bool Event::Reader::hasHealth() const {
  if (which() != Event::HEALTH) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasHealth() {
  if (which() != Event::HEALTH) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::HealthData::Reader Event::Reader::getHealth() const {
  KJ_IREQUIRE((which() == Event::HEALTH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::HealthData::Builder Event::Builder::getHealth() {
  KJ_IREQUIRE((which() == Event::HEALTH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setHealth( ::cereal::HealthData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::HEALTH);
  ::capnp::_::PointerHelpers< ::cereal::HealthData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::HealthData::Builder Event::Builder::initHealth() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::HEALTH);
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptHealth(
    ::capnp::Orphan< ::cereal::HealthData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::HEALTH);
  ::capnp::_::PointerHelpers< ::cereal::HealthData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::HealthData> Event::Builder::disownHealth() {
  KJ_IREQUIRE((which() == Event::HEALTH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::HealthData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isRadarState() const {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Builder::isRadarState() {
  return which() == Event::RADAR_STATE;
}
inline bool Event::Reader::hasRadarState() const {
  if (which() != Event::RADAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasRadarState() {
  if (which() != Event::RADAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::RadarState::Reader Event::Reader::getRadarState() const {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::RadarState::Builder Event::Builder::getRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setRadarState( ::cereal::RadarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::RadarState::Builder Event::Builder::initRadarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptRadarState(
    ::capnp::Orphan< ::cereal::RadarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::RADAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::RadarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::RadarState> Event::Builder::disownRadarState() {
  KJ_IREQUIRE((which() == Event::RADAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::RadarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveUIDEPRECATED() const {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isLiveUIDEPRECATED() {
  return which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasLiveUIDEPRECATED() const {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveUIDEPRECATED() {
  if (which() != Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveUI::Reader Event::Reader::getLiveUIDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveUI::Builder Event::Builder::getLiveUIDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveUIDEPRECATED( ::cereal::LiveUI::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveUI::Builder Event::Builder::initLiveUIDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveUIDEPRECATED(
    ::capnp::Orphan< ::cereal::LiveUI>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::LiveUI>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveUI> Event::Builder::disownLiveUIDEPRECATED() {
  KJ_IREQUIRE((which() == Event::LIVE_U_I_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveUI>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isEncodeIdx() const {
  return which() == Event::ENCODE_IDX;
}
inline bool Event::Builder::isEncodeIdx() {
  return which() == Event::ENCODE_IDX;
}
inline bool Event::Reader::hasEncodeIdx() const {
  if (which() != Event::ENCODE_IDX) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasEncodeIdx() {
  if (which() != Event::ENCODE_IDX) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::EncodeIndex::Reader Event::Reader::getEncodeIdx() const {
  KJ_IREQUIRE((which() == Event::ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::getEncodeIdx() {
  KJ_IREQUIRE((which() == Event::ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setEncodeIdx( ::cereal::EncodeIndex::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::EncodeIndex::Builder Event::Builder::initEncodeIdx() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptEncodeIdx(
    ::capnp::Orphan< ::cereal::EncodeIndex>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ENCODE_IDX);
  ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::EncodeIndex> Event::Builder::disownEncodeIdx() {
  KJ_IREQUIRE((which() == Event::ENCODE_IDX),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::EncodeIndex>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveTracks() const {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Builder::isLiveTracks() {
  return which() == Event::LIVE_TRACKS;
}
inline bool Event::Reader::hasLiveTracks() const {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveTracks() {
  if (which() != Event::LIVE_TRACKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::LiveTracks>::Reader Event::Reader::getLiveTracks() const {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::LiveTracks>::Builder Event::Builder::getLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveTracks( ::capnp::List< ::cereal::LiveTracks>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::LiveTracks>::Builder Event::Builder::initLiveTracks(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLiveTracks(
    ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_TRACKS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::LiveTracks>> Event::Builder::disownLiveTracks() {
  KJ_IREQUIRE((which() == Event::LIVE_TRACKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::LiveTracks>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isSendcan() const {
  return which() == Event::SENDCAN;
}
inline bool Event::Builder::isSendcan() {
  return which() == Event::SENDCAN;
}
inline bool Event::Reader::hasSendcan() const {
  if (which() != Event::SENDCAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSendcan() {
  if (which() != Event::SENDCAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CanData>::Reader Event::Reader::getSendcan() const {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::getSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setSendcan( ::capnp::List< ::cereal::CanData>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CanData>::Builder Event::Builder::initSendcan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSendcan(
    ::capnp::Orphan< ::capnp::List< ::cereal::CanData>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::SENDCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CanData>> Event::Builder::disownSendcan() {
  KJ_IREQUIRE((which() == Event::SENDCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CanData>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLogMessage() const {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Builder::isLogMessage() {
  return which() == Event::LOG_MESSAGE;
}
inline bool Event::Reader::hasLogMessage() const {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLogMessage() {
  if (which() != Event::LOG_MESSAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Reader::getLogMessage() const {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Builder::getLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLogMessage( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Builder::initLogMessage(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptLogMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Builder::disownLogMessage() {
  KJ_IREQUIRE((which() == Event::LOG_MESSAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveCalibration() const {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Builder::isLiveCalibration() {
  return which() == Event::LIVE_CALIBRATION;
}
inline bool Event::Reader::hasLiveCalibration() const {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveCalibration() {
  if (which() != Event::LIVE_CALIBRATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveCalibrationData::Reader Event::Reader::getLiveCalibration() const {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::getLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveCalibration( ::cereal::LiveCalibrationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveCalibrationData::Builder Event::Builder::initLiveCalibration() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveCalibration(
    ::capnp::Orphan< ::cereal::LiveCalibrationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_CALIBRATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveCalibrationData> Event::Builder::disownLiveCalibration() {
  KJ_IREQUIRE((which() == Event::LIVE_CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveCalibrationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAndroidLogEntry() const {
  return which() == Event::ANDROID_LOG_ENTRY;
}
inline bool Event::Builder::isAndroidLogEntry() {
  return which() == Event::ANDROID_LOG_ENTRY;
}
inline bool Event::Reader::hasAndroidLogEntry() const {
  if (which() != Event::ANDROID_LOG_ENTRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAndroidLogEntry() {
  if (which() != Event::ANDROID_LOG_ENTRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidLogEntry::Reader Event::Reader::getAndroidLogEntry() const {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG_ENTRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::getAndroidLogEntry() {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG_ENTRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAndroidLogEntry( ::cereal::AndroidLogEntry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidLogEntry::Builder Event::Builder::initAndroidLogEntry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAndroidLogEntry(
    ::capnp::Orphan< ::cereal::AndroidLogEntry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_LOG_ENTRY);
  ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidLogEntry> Event::Builder::disownAndroidLogEntry() {
  KJ_IREQUIRE((which() == Event::ANDROID_LOG_ENTRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidLogEntry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocation() const {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Builder::isGpsLocation() {
  return which() == Event::GPS_LOCATION;
}
inline bool Event::Reader::hasGpsLocation() const {
  if (which() != Event::GPS_LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocation() {
  if (which() != Event::GPS_LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocation() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocation( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocation(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocation() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarState() const {
  return which() == Event::CAR_STATE;
}
inline bool Event::Builder::isCarState() {
  return which() == Event::CAR_STATE;
}
inline bool Event::Reader::hasCarState() const {
  if (which() != Event::CAR_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarState() {
  if (which() != Event::CAR_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarState::Reader Event::Reader::getCarState() const {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarState::Builder Event::Builder::getCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarState( ::cereal::CarState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarState::Builder Event::Builder::initCarState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarState(
    ::capnp::Orphan< ::cereal::CarState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_STATE);
  ::capnp::_::PointerHelpers< ::cereal::CarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarState> Event::Builder::disownCarState() {
  KJ_IREQUIRE((which() == Event::CAR_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarControl() const {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Builder::isCarControl() {
  return which() == Event::CAR_CONTROL;
}
inline bool Event::Reader::hasCarControl() const {
  if (which() != Event::CAR_CONTROL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarControl() {
  if (which() != Event::CAR_CONTROL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarControl::Reader Event::Reader::getCarControl() const {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarControl::Builder Event::Builder::getCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarControl( ::cereal::CarControl::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarControl::Builder Event::Builder::initCarControl() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarControl(
    ::capnp::Orphan< ::cereal::CarControl>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_CONTROL);
  ::capnp::_::PointerHelpers< ::cereal::CarControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarControl> Event::Builder::disownCarControl() {
  KJ_IREQUIRE((which() == Event::CAR_CONTROL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarControl>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPlan() const {
  return which() == Event::PLAN;
}
inline bool Event::Builder::isPlan() {
  return which() == Event::PLAN;
}
inline bool Event::Reader::hasPlan() const {
  if (which() != Event::PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPlan() {
  if (which() != Event::PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Plan::Reader Event::Reader::getPlan() const {
  KJ_IREQUIRE((which() == Event::PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Plan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Plan::Builder Event::Builder::getPlan() {
  KJ_IREQUIRE((which() == Event::PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Plan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPlan( ::cereal::Plan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PLAN);
  ::capnp::_::PointerHelpers< ::cereal::Plan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Plan::Builder Event::Builder::initPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::Plan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptPlan(
    ::capnp::Orphan< ::cereal::Plan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PLAN);
  ::capnp::_::PointerHelpers< ::cereal::Plan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Plan> Event::Builder::disownPlan() {
  KJ_IREQUIRE((which() == Event::PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Plan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocation() const {
  return which() == Event::LIVE_LOCATION;
}
inline bool Event::Builder::isLiveLocation() {
  return which() == Event::LIVE_LOCATION;
}
inline bool Event::Reader::hasLiveLocation() const {
  if (which() != Event::LIVE_LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocation() {
  if (which() != Event::LIVE_LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocation() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocation() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocation( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocation(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocation() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isEthernetData() const {
  return which() == Event::ETHERNET_DATA;
}
inline bool Event::Builder::isEthernetData() {
  return which() == Event::ETHERNET_DATA;
}
inline bool Event::Reader::hasEthernetData() const {
  if (which() != Event::ETHERNET_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasEthernetData() {
  if (which() != Event::ETHERNET_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::EthernetPacket>::Reader Event::Reader::getEthernetData() const {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::EthernetPacket>::Builder Event::Builder::getEthernetData() {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setEthernetData( ::capnp::List< ::cereal::EthernetPacket>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::EthernetPacket>::Builder Event::Builder::initEthernetData(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptEthernetData(
    ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ETHERNET_DATA);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::EthernetPacket>> Event::Builder::disownEthernetData() {
  KJ_IREQUIRE((which() == Event::ETHERNET_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::EthernetPacket>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavUpdate() const {
  return which() == Event::NAV_UPDATE;
}
inline bool Event::Builder::isNavUpdate() {
  return which() == Event::NAV_UPDATE;
}
inline bool Event::Reader::hasNavUpdate() const {
  if (which() != Event::NAV_UPDATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavUpdate() {
  if (which() != Event::NAV_UPDATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavUpdate::Reader Event::Reader::getNavUpdate() const {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavUpdate::Builder Event::Builder::getNavUpdate() {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavUpdate( ::cereal::NavUpdate::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE);
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavUpdate::Builder Event::Builder::initNavUpdate() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE);
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavUpdate(
    ::capnp::Orphan< ::cereal::NavUpdate>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_UPDATE);
  ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavUpdate> Event::Builder::disownNavUpdate() {
  KJ_IREQUIRE((which() == Event::NAV_UPDATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavUpdate>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCellInfo() const {
  return which() == Event::CELL_INFO;
}
inline bool Event::Builder::isCellInfo() {
  return which() == Event::CELL_INFO;
}
inline bool Event::Reader::hasCellInfo() const {
  if (which() != Event::CELL_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCellInfo() {
  if (which() != Event::CELL_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CellInfo>::Reader Event::Reader::getCellInfo() const {
  KJ_IREQUIRE((which() == Event::CELL_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CellInfo>::Builder Event::Builder::getCellInfo() {
  KJ_IREQUIRE((which() == Event::CELL_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCellInfo( ::capnp::List< ::cereal::CellInfo>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CellInfo>::Builder Event::Builder::initCellInfo(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCellInfo(
    ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CELL_INFO);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CellInfo>> Event::Builder::disownCellInfo() {
  KJ_IREQUIRE((which() == Event::CELL_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CellInfo>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isWifiScan() const {
  return which() == Event::WIFI_SCAN;
}
inline bool Event::Builder::isWifiScan() {
  return which() == Event::WIFI_SCAN;
}
inline bool Event::Reader::hasWifiScan() const {
  if (which() != Event::WIFI_SCAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasWifiScan() {
  if (which() != Event::WIFI_SCAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::WifiScan>::Reader Event::Reader::getWifiScan() const {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::WifiScan>::Builder Event::Builder::getWifiScan() {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setWifiScan( ::capnp::List< ::cereal::WifiScan>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::WifiScan>::Builder Event::Builder::initWifiScan(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptWifiScan(
    ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::WIFI_SCAN);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::WifiScan>> Event::Builder::disownWifiScan() {
  KJ_IREQUIRE((which() == Event::WIFI_SCAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::WifiScan>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAndroidGnss() const {
  return which() == Event::ANDROID_GNSS;
}
inline bool Event::Builder::isAndroidGnss() {
  return which() == Event::ANDROID_GNSS;
}
inline bool Event::Reader::hasAndroidGnss() const {
  if (which() != Event::ANDROID_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasAndroidGnss() {
  if (which() != Event::ANDROID_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::AndroidGnss::Reader Event::Reader::getAndroidGnss() const {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::AndroidGnss::Builder Event::Builder::getAndroidGnss() {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setAndroidGnss( ::cereal::AndroidGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::AndroidGnss::Builder Event::Builder::initAndroidGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptAndroidGnss(
    ::capnp::Orphan< ::cereal::AndroidGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ANDROID_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::AndroidGnss> Event::Builder::disownAndroidGnss() {
  KJ_IREQUIRE((which() == Event::ANDROID_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::AndroidGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isQcomGnss() const {
  return which() == Event::QCOM_GNSS;
}
inline bool Event::Builder::isQcomGnss() {
  return which() == Event::QCOM_GNSS;
}
inline bool Event::Reader::hasQcomGnss() const {
  if (which() != Event::QCOM_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasQcomGnss() {
  if (which() != Event::QCOM_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::QcomGnss::Reader Event::Reader::getQcomGnss() const {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::QcomGnss::Builder Event::Builder::getQcomGnss() {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setQcomGnss( ::cereal::QcomGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::QcomGnss::Builder Event::Builder::initQcomGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptQcomGnss(
    ::capnp::Orphan< ::cereal::QcomGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::QCOM_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::QcomGnss> Event::Builder::disownQcomGnss() {
  KJ_IREQUIRE((which() == Event::QCOM_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::QcomGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLidarPts() const {
  return which() == Event::LIDAR_PTS;
}
inline bool Event::Builder::isLidarPts() {
  return which() == Event::LIDAR_PTS;
}
inline bool Event::Reader::hasLidarPts() const {
  if (which() != Event::LIDAR_PTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLidarPts() {
  if (which() != Event::LIDAR_PTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LidarPts::Reader Event::Reader::getLidarPts() const {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LidarPts::Builder Event::Builder::getLidarPts() {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLidarPts( ::cereal::LidarPts::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS);
  ::capnp::_::PointerHelpers< ::cereal::LidarPts>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LidarPts::Builder Event::Builder::initLidarPts() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS);
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLidarPts(
    ::capnp::Orphan< ::cereal::LidarPts>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIDAR_PTS);
  ::capnp::_::PointerHelpers< ::cereal::LidarPts>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LidarPts> Event::Builder::disownLidarPts() {
  KJ_IREQUIRE((which() == Event::LIDAR_PTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LidarPts>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isProcLog() const {
  return which() == Event::PROC_LOG;
}
inline bool Event::Builder::isProcLog() {
  return which() == Event::PROC_LOG;
}
inline bool Event::Reader::hasProcLog() const {
  if (which() != Event::PROC_LOG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasProcLog() {
  if (which() != Event::PROC_LOG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::ProcLog::Reader Event::Reader::getProcLog() const {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::ProcLog::Builder Event::Builder::getProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setProcLog( ::cereal::ProcLog::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::ProcLog::Builder Event::Builder::initProcLog() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptProcLog(
    ::capnp::Orphan< ::cereal::ProcLog>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PROC_LOG);
  ::capnp::_::PointerHelpers< ::cereal::ProcLog>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::ProcLog> Event::Builder::disownProcLog() {
  KJ_IREQUIRE((which() == Event::PROC_LOG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::ProcLog>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxGnss() const {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Builder::isUbloxGnss() {
  return which() == Event::UBLOX_GNSS;
}
inline bool Event::Reader::hasUbloxGnss() const {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxGnss() {
  if (which() != Event::UBLOX_GNSS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UbloxGnss::Reader Event::Reader::getUbloxGnss() const {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::getUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxGnss( ::cereal::UbloxGnss::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UbloxGnss::Builder Event::Builder::initUbloxGnss() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUbloxGnss(
    ::capnp::Orphan< ::cereal::UbloxGnss>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_GNSS);
  ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UbloxGnss> Event::Builder::disownUbloxGnss() {
  KJ_IREQUIRE((which() == Event::UBLOX_GNSS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UbloxGnss>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isClocks() const {
  return which() == Event::CLOCKS;
}
inline bool Event::Builder::isClocks() {
  return which() == Event::CLOCKS;
}
inline bool Event::Reader::hasClocks() const {
  if (which() != Event::CLOCKS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasClocks() {
  if (which() != Event::CLOCKS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Clocks::Reader Event::Reader::getClocks() const {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Clocks::Builder Event::Builder::getClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setClocks( ::cereal::Clocks::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Clocks::Builder Event::Builder::initClocks() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptClocks(
    ::capnp::Orphan< ::cereal::Clocks>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CLOCKS);
  ::capnp::_::PointerHelpers< ::cereal::Clocks>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Clocks> Event::Builder::disownClocks() {
  KJ_IREQUIRE((which() == Event::CLOCKS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Clocks>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveMpc() const {
  return which() == Event::LIVE_MPC;
}
inline bool Event::Builder::isLiveMpc() {
  return which() == Event::LIVE_MPC;
}
inline bool Event::Reader::hasLiveMpc() const {
  if (which() != Event::LIVE_MPC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveMpc() {
  if (which() != Event::LIVE_MPC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveMpcData::Reader Event::Reader::getLiveMpc() const {
  KJ_IREQUIRE((which() == Event::LIVE_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveMpcData::Builder Event::Builder::getLiveMpc() {
  KJ_IREQUIRE((which() == Event::LIVE_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveMpc( ::cereal::LiveMpcData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC);
  ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveMpcData::Builder Event::Builder::initLiveMpc() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC);
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveMpc(
    ::capnp::Orphan< ::cereal::LiveMpcData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MPC);
  ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveMpcData> Event::Builder::disownLiveMpc() {
  KJ_IREQUIRE((which() == Event::LIVE_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMpcData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLongitudinalMpc() const {
  return which() == Event::LIVE_LONGITUDINAL_MPC;
}
inline bool Event::Builder::isLiveLongitudinalMpc() {
  return which() == Event::LIVE_LONGITUDINAL_MPC;
}
inline bool Event::Reader::hasLiveLongitudinalMpc() const {
  if (which() != Event::LIVE_LONGITUDINAL_MPC) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLongitudinalMpc() {
  if (which() != Event::LIVE_LONGITUDINAL_MPC) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLongitudinalMpcData::Reader Event::Reader::getLiveLongitudinalMpc() const {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLongitudinalMpcData::Builder Event::Builder::getLiveLongitudinalMpc() {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLongitudinalMpc( ::cereal::LiveLongitudinalMpcData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC);
  ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLongitudinalMpcData::Builder Event::Builder::initLiveLongitudinalMpc() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLongitudinalMpc(
    ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LONGITUDINAL_MPC);
  ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLongitudinalMpcData> Event::Builder::disownLiveLongitudinalMpc() {
  KJ_IREQUIRE((which() == Event::LIVE_LONGITUDINAL_MPC),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLongitudinalMpcData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isNavStatus() const {
  return which() == Event::NAV_STATUS;
}
inline bool Event::Builder::isNavStatus() {
  return which() == Event::NAV_STATUS;
}
inline bool Event::Reader::hasNavStatus() const {
  if (which() != Event::NAV_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasNavStatus() {
  if (which() != Event::NAV_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::NavStatus::Reader Event::Reader::getNavStatus() const {
  KJ_IREQUIRE((which() == Event::NAV_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::NavStatus::Builder Event::Builder::getNavStatus() {
  KJ_IREQUIRE((which() == Event::NAV_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setNavStatus( ::cereal::NavStatus::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::NavStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::NavStatus::Builder Event::Builder::initNavStatus() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS);
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptNavStatus(
    ::capnp::Orphan< ::cereal::NavStatus>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::NAV_STATUS);
  ::capnp::_::PointerHelpers< ::cereal::NavStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::NavStatus> Event::Builder::disownNavStatus() {
  KJ_IREQUIRE((which() == Event::NAV_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::NavStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUbloxRaw() const {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Builder::isUbloxRaw() {
  return which() == Event::UBLOX_RAW;
}
inline bool Event::Reader::hasUbloxRaw() const {
  if (which() != Event::UBLOX_RAW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUbloxRaw() {
  if (which() != Event::UBLOX_RAW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getUbloxRaw() const {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUbloxRaw( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initUbloxRaw(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptUbloxRaw(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UBLOX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownUbloxRaw() {
  KJ_IREQUIRE((which() == Event::UBLOX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsPlannerPoints() const {
  return which() == Event::GPS_PLANNER_POINTS;
}
inline bool Event::Builder::isGpsPlannerPoints() {
  return which() == Event::GPS_PLANNER_POINTS;
}
inline bool Event::Reader::hasGpsPlannerPoints() const {
  if (which() != Event::GPS_PLANNER_POINTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsPlannerPoints() {
  if (which() != Event::GPS_PLANNER_POINTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSPlannerPoints::Reader Event::Reader::getGpsPlannerPoints() const {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSPlannerPoints::Builder Event::Builder::getGpsPlannerPoints() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsPlannerPoints( ::cereal::GPSPlannerPoints::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSPlannerPoints::Builder Event::Builder::initGpsPlannerPoints() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS);
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsPlannerPoints(
    ::capnp::Orphan< ::cereal::GPSPlannerPoints>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_POINTS);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSPlannerPoints> Event::Builder::disownGpsPlannerPoints() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_POINTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPoints>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsPlannerPlan() const {
  return which() == Event::GPS_PLANNER_PLAN;
}
inline bool Event::Builder::isGpsPlannerPlan() {
  return which() == Event::GPS_PLANNER_PLAN;
}
inline bool Event::Reader::hasGpsPlannerPlan() const {
  if (which() != Event::GPS_PLANNER_PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsPlannerPlan() {
  if (which() != Event::GPS_PLANNER_PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GPSPlannerPlan::Reader Event::Reader::getGpsPlannerPlan() const {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GPSPlannerPlan::Builder Event::Builder::getGpsPlannerPlan() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsPlannerPlan( ::cereal::GPSPlannerPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GPSPlannerPlan::Builder Event::Builder::initGpsPlannerPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsPlannerPlan(
    ::capnp::Orphan< ::cereal::GPSPlannerPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_PLANNER_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GPSPlannerPlan> Event::Builder::disownGpsPlannerPlan() {
  KJ_IREQUIRE((which() == Event::GPS_PLANNER_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GPSPlannerPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isApplanixRaw() const {
  return which() == Event::APPLANIX_RAW;
}
inline bool Event::Builder::isApplanixRaw() {
  return which() == Event::APPLANIX_RAW;
}
inline bool Event::Reader::hasApplanixRaw() const {
  if (which() != Event::APPLANIX_RAW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasApplanixRaw() {
  if (which() != Event::APPLANIX_RAW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getApplanixRaw() const {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getApplanixRaw() {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setApplanixRaw( ::capnp::Data::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initApplanixRaw(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptApplanixRaw(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownApplanixRaw() {
  KJ_IREQUIRE((which() == Event::APPLANIX_RAW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTrafficEvents() const {
  return which() == Event::TRAFFIC_EVENTS;
}
inline bool Event::Builder::isTrafficEvents() {
  return which() == Event::TRAFFIC_EVENTS;
}
inline bool Event::Reader::hasTrafficEvents() const {
  if (which() != Event::TRAFFIC_EVENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTrafficEvents() {
  if (which() != Event::TRAFFIC_EVENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::TrafficEvent>::Reader Event::Reader::getTrafficEvents() const {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::TrafficEvent>::Builder Event::Builder::getTrafficEvents() {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTrafficEvents( ::capnp::List< ::cereal::TrafficEvent>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::TrafficEvent>::Builder Event::Builder::initTrafficEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptTrafficEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TRAFFIC_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::TrafficEvent>> Event::Builder::disownTrafficEvents() {
  KJ_IREQUIRE((which() == Event::TRAFFIC_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::TrafficEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationTiming() const {
  return which() == Event::LIVE_LOCATION_TIMING;
}
inline bool Event::Builder::isLiveLocationTiming() {
  return which() == Event::LIVE_LOCATION_TIMING;
}
inline bool Event::Reader::hasLiveLocationTiming() const {
  if (which() != Event::LIVE_LOCATION_TIMING) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationTiming() {
  if (which() != Event::LIVE_LOCATION_TIMING) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationTiming() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationTiming() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationTiming( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationTiming() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationTiming(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_TIMING);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationTiming() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_TIMING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbslamCorrectionDEPRECATED() const {
  return which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Builder::isOrbslamCorrectionDEPRECATED() {
  return which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D;
}
inline bool Event::Reader::hasOrbslamCorrectionDEPRECATED() const {
  if (which() != Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbslamCorrectionDEPRECATED() {
  if (which() != Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbslamCorrection::Reader Event::Reader::getOrbslamCorrectionDEPRECATED() const {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbslamCorrection::Builder Event::Builder::getOrbslamCorrectionDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbslamCorrectionDEPRECATED( ::cereal::OrbslamCorrection::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbslamCorrection::Builder Event::Builder::initOrbslamCorrectionDEPRECATED() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbslamCorrectionDEPRECATED(
    ::capnp::Orphan< ::cereal::OrbslamCorrection>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D);
  ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbslamCorrection> Event::Builder::disownOrbslamCorrectionDEPRECATED() {
  KJ_IREQUIRE((which() == Event::ORBSLAM_CORRECTION_D_E_P_R_E_C_A_T_E_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbslamCorrection>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationCorrected() const {
  return which() == Event::LIVE_LOCATION_CORRECTED;
}
inline bool Event::Builder::isLiveLocationCorrected() {
  return which() == Event::LIVE_LOCATION_CORRECTED;
}
inline bool Event::Reader::hasLiveLocationCorrected() const {
  if (which() != Event::LIVE_LOCATION_CORRECTED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationCorrected() {
  if (which() != Event::LIVE_LOCATION_CORRECTED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationCorrected() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationCorrected() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationCorrected( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationCorrected() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationCorrected(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_CORRECTED);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationCorrected() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_CORRECTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbObservation() const {
  return which() == Event::ORB_OBSERVATION;
}
inline bool Event::Builder::isOrbObservation() {
  return which() == Event::ORB_OBSERVATION;
}
inline bool Event::Reader::hasOrbObservation() const {
  if (which() != Event::ORB_OBSERVATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbObservation() {
  if (which() != Event::ORB_OBSERVATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::OrbObservation>::Reader Event::Reader::getOrbObservation() const {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::OrbObservation>::Builder Event::Builder::getOrbObservation() {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbObservation( ::capnp::List< ::cereal::OrbObservation>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::OrbObservation>::Builder Event::Builder::initOrbObservation(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptOrbObservation(
    ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_OBSERVATION);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::OrbObservation>> Event::Builder::disownOrbObservation() {
  KJ_IREQUIRE((which() == Event::ORB_OBSERVATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::OrbObservation>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isGpsLocationExternal() const {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Builder::isGpsLocationExternal() {
  return which() == Event::GPS_LOCATION_EXTERNAL;
}
inline bool Event::Reader::hasGpsLocationExternal() const {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasGpsLocationExternal() {
  if (which() != Event::GPS_LOCATION_EXTERNAL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::GpsLocationData::Reader Event::Reader::getGpsLocationExternal() const {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::getGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setGpsLocationExternal( ::cereal::GpsLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::GpsLocationData::Builder Event::Builder::initGpsLocationExternal() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptGpsLocationExternal(
    ::capnp::Orphan< ::cereal::GpsLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::GPS_LOCATION_EXTERNAL);
  ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::GpsLocationData> Event::Builder::disownGpsLocationExternal() {
  KJ_IREQUIRE((which() == Event::GPS_LOCATION_EXTERNAL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::GpsLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLocation() const {
  return which() == Event::LOCATION;
}
inline bool Event::Builder::isLocation() {
  return which() == Event::LOCATION;
}
inline bool Event::Reader::hasLocation() const {
  if (which() != Event::LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLocation() {
  if (which() != Event::LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLocation() const {
  KJ_IREQUIRE((which() == Event::LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLocation() {
  KJ_IREQUIRE((which() == Event::LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLocation( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLocation(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLocation() {
  KJ_IREQUIRE((which() == Event::LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiNavigationEvent() const {
  return which() == Event::UI_NAVIGATION_EVENT;
}
inline bool Event::Builder::isUiNavigationEvent() {
  return which() == Event::UI_NAVIGATION_EVENT;
}
inline bool Event::Reader::hasUiNavigationEvent() const {
  if (which() != Event::UI_NAVIGATION_EVENT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiNavigationEvent() {
  if (which() != Event::UI_NAVIGATION_EVENT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UiNavigationEvent::Reader Event::Reader::getUiNavigationEvent() const {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UiNavigationEvent::Builder Event::Builder::getUiNavigationEvent() {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiNavigationEvent( ::cereal::UiNavigationEvent::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT);
  ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UiNavigationEvent::Builder Event::Builder::initUiNavigationEvent() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT);
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiNavigationEvent(
    ::capnp::Orphan< ::cereal::UiNavigationEvent>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_NAVIGATION_EVENT);
  ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UiNavigationEvent> Event::Builder::disownUiNavigationEvent() {
  KJ_IREQUIRE((which() == Event::UI_NAVIGATION_EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiNavigationEvent>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveLocationKalman() const {
  return which() == Event::LIVE_LOCATION_KALMAN;
}
inline bool Event::Builder::isLiveLocationKalman() {
  return which() == Event::LIVE_LOCATION_KALMAN;
}
inline bool Event::Reader::hasLiveLocationKalman() const {
  if (which() != Event::LIVE_LOCATION_KALMAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveLocationKalman() {
  if (which() != Event::LIVE_LOCATION_KALMAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getLiveLocationKalman() const {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getLiveLocationKalman() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveLocationKalman( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initLiveLocationKalman() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveLocationKalman(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_LOCATION_KALMAN);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownLiveLocationKalman() {
  KJ_IREQUIRE((which() == Event::LIVE_LOCATION_KALMAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isTestJoystick() const {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Builder::isTestJoystick() {
  return which() == Event::TEST_JOYSTICK;
}
inline bool Event::Reader::hasTestJoystick() const {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasTestJoystick() {
  if (which() != Event::TEST_JOYSTICK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Joystick::Reader Event::Reader::getTestJoystick() const {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Joystick::Builder Event::Builder::getTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setTestJoystick( ::cereal::Joystick::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Joystick::Builder Event::Builder::initTestJoystick() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptTestJoystick(
    ::capnp::Orphan< ::cereal::Joystick>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::TEST_JOYSTICK);
  ::capnp::_::PointerHelpers< ::cereal::Joystick>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Joystick> Event::Builder::disownTestJoystick() {
  KJ_IREQUIRE((which() == Event::TEST_JOYSTICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Joystick>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbOdometry() const {
  return which() == Event::ORB_ODOMETRY;
}
inline bool Event::Builder::isOrbOdometry() {
  return which() == Event::ORB_ODOMETRY;
}
inline bool Event::Reader::hasOrbOdometry() const {
  if (which() != Event::ORB_ODOMETRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbOdometry() {
  if (which() != Event::ORB_ODOMETRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbOdometry::Reader Event::Reader::getOrbOdometry() const {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbOdometry::Builder Event::Builder::getOrbOdometry() {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbOdometry( ::cereal::OrbOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbOdometry::Builder Event::Builder::initOrbOdometry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY);
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbOdometry(
    ::capnp::Orphan< ::cereal::OrbOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbOdometry> Event::Builder::disownOrbOdometry() {
  KJ_IREQUIRE((which() == Event::ORB_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbFeatures() const {
  return which() == Event::ORB_FEATURES;
}
inline bool Event::Builder::isOrbFeatures() {
  return which() == Event::ORB_FEATURES;
}
inline bool Event::Reader::hasOrbFeatures() const {
  if (which() != Event::ORB_FEATURES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbFeatures() {
  if (which() != Event::ORB_FEATURES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbFeatures::Reader Event::Reader::getOrbFeatures() const {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbFeatures::Builder Event::Builder::getOrbFeatures() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbFeatures( ::cereal::OrbFeatures::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbFeatures::Builder Event::Builder::initOrbFeatures() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES);
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbFeatures(
    ::capnp::Orphan< ::cereal::OrbFeatures>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbFeatures> Event::Builder::disownOrbFeatures() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeatures>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isApplanixLocation() const {
  return which() == Event::APPLANIX_LOCATION;
}
inline bool Event::Builder::isApplanixLocation() {
  return which() == Event::APPLANIX_LOCATION;
}
inline bool Event::Reader::hasApplanixLocation() const {
  if (which() != Event::APPLANIX_LOCATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasApplanixLocation() {
  if (which() != Event::APPLANIX_LOCATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveLocationData::Reader Event::Reader::getApplanixLocation() const {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::getApplanixLocation() {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setApplanixLocation( ::cereal::LiveLocationData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveLocationData::Builder Event::Builder::initApplanixLocation() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION);
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptApplanixLocation(
    ::capnp::Orphan< ::cereal::LiveLocationData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::APPLANIX_LOCATION);
  ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveLocationData> Event::Builder::disownApplanixLocation() {
  KJ_IREQUIRE((which() == Event::APPLANIX_LOCATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveLocationData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbKeyFrame() const {
  return which() == Event::ORB_KEY_FRAME;
}
inline bool Event::Builder::isOrbKeyFrame() {
  return which() == Event::ORB_KEY_FRAME;
}
inline bool Event::Reader::hasOrbKeyFrame() const {
  if (which() != Event::ORB_KEY_FRAME) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbKeyFrame() {
  if (which() != Event::ORB_KEY_FRAME) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbKeyFrame::Reader Event::Reader::getOrbKeyFrame() const {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbKeyFrame::Builder Event::Builder::getOrbKeyFrame() {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbKeyFrame( ::cereal::OrbKeyFrame::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME);
  ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbKeyFrame::Builder Event::Builder::initOrbKeyFrame() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME);
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbKeyFrame(
    ::capnp::Orphan< ::cereal::OrbKeyFrame>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_KEY_FRAME);
  ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbKeyFrame> Event::Builder::disownOrbKeyFrame() {
  KJ_IREQUIRE((which() == Event::ORB_KEY_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbKeyFrame>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isUiLayoutState() const {
  return which() == Event::UI_LAYOUT_STATE;
}
inline bool Event::Builder::isUiLayoutState() {
  return which() == Event::UI_LAYOUT_STATE;
}
inline bool Event::Reader::hasUiLayoutState() const {
  if (which() != Event::UI_LAYOUT_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasUiLayoutState() {
  if (which() != Event::UI_LAYOUT_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::UiLayoutState::Reader Event::Reader::getUiLayoutState() const {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::UiLayoutState::Builder Event::Builder::getUiLayoutState() {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setUiLayoutState( ::cereal::UiLayoutState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::UiLayoutState::Builder Event::Builder::initUiLayoutState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptUiLayoutState(
    ::capnp::Orphan< ::cereal::UiLayoutState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::UI_LAYOUT_STATE);
  ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::UiLayoutState> Event::Builder::disownUiLayoutState() {
  KJ_IREQUIRE((which() == Event::UI_LAYOUT_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::UiLayoutState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isOrbFeaturesSummary() const {
  return which() == Event::ORB_FEATURES_SUMMARY;
}
inline bool Event::Builder::isOrbFeaturesSummary() {
  return which() == Event::ORB_FEATURES_SUMMARY;
}
inline bool Event::Reader::hasOrbFeaturesSummary() const {
  if (which() != Event::ORB_FEATURES_SUMMARY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasOrbFeaturesSummary() {
  if (which() != Event::ORB_FEATURES_SUMMARY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::OrbFeaturesSummary::Reader Event::Reader::getOrbFeaturesSummary() const {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::OrbFeaturesSummary::Builder Event::Builder::getOrbFeaturesSummary() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setOrbFeaturesSummary( ::cereal::OrbFeaturesSummary::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::OrbFeaturesSummary::Builder Event::Builder::initOrbFeaturesSummary() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY);
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptOrbFeaturesSummary(
    ::capnp::Orphan< ::cereal::OrbFeaturesSummary>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::ORB_FEATURES_SUMMARY);
  ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::OrbFeaturesSummary> Event::Builder::disownOrbFeaturesSummary() {
  KJ_IREQUIRE((which() == Event::ORB_FEATURES_SUMMARY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::OrbFeaturesSummary>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDriverState() const {
  return which() == Event::DRIVER_STATE;
}
inline bool Event::Builder::isDriverState() {
  return which() == Event::DRIVER_STATE;
}
inline bool Event::Reader::hasDriverState() const {
  if (which() != Event::DRIVER_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDriverState() {
  if (which() != Event::DRIVER_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DriverState::Reader Event::Reader::getDriverState() const {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DriverState::Builder Event::Builder::getDriverState() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDriverState( ::cereal::DriverState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DriverState::Builder Event::Builder::initDriverState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDriverState(
    ::capnp::Orphan< ::cereal::DriverState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::DRIVER_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DriverState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DriverState> Event::Builder::disownDriverState() {
  KJ_IREQUIRE((which() == Event::DRIVER_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DriverState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isBoot() const {
  return which() == Event::BOOT;
}
inline bool Event::Builder::isBoot() {
  return which() == Event::BOOT;
}
inline bool Event::Reader::hasBoot() const {
  if (which() != Event::BOOT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasBoot() {
  if (which() != Event::BOOT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Boot::Reader Event::Reader::getBoot() const {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Boot::Builder Event::Builder::getBoot() {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setBoot( ::cereal::Boot::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  ::capnp::_::PointerHelpers< ::cereal::Boot>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Boot::Builder Event::Builder::initBoot() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptBoot(
    ::capnp::Orphan< ::cereal::Boot>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::BOOT);
  ::capnp::_::PointerHelpers< ::cereal::Boot>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Boot> Event::Builder::disownBoot() {
  KJ_IREQUIRE((which() == Event::BOOT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Boot>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveParameters() const {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Builder::isLiveParameters() {
  return which() == Event::LIVE_PARAMETERS;
}
inline bool Event::Reader::hasLiveParameters() const {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveParameters() {
  if (which() != Event::LIVE_PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveParametersData::Reader Event::Reader::getLiveParameters() const {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::getLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveParameters( ::cereal::LiveParametersData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveParametersData::Builder Event::Builder::initLiveParameters() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveParameters(
    ::capnp::Orphan< ::cereal::LiveParametersData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_PARAMETERS);
  ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveParametersData> Event::Builder::disownLiveParameters() {
  KJ_IREQUIRE((which() == Event::LIVE_PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveParametersData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isLiveMapData() const {
  return which() == Event::LIVE_MAP_DATA;
}
inline bool Event::Builder::isLiveMapData() {
  return which() == Event::LIVE_MAP_DATA;
}
inline bool Event::Reader::hasLiveMapData() const {
  if (which() != Event::LIVE_MAP_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasLiveMapData() {
  if (which() != Event::LIVE_MAP_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::LiveMapData::Reader Event::Reader::getLiveMapData() const {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::LiveMapData::Builder Event::Builder::getLiveMapData() {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setLiveMapData( ::cereal::LiveMapData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA);
  ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::LiveMapData::Builder Event::Builder::initLiveMapData() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA);
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptLiveMapData(
    ::capnp::Orphan< ::cereal::LiveMapData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::LIVE_MAP_DATA);
  ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::LiveMapData> Event::Builder::disownLiveMapData() {
  KJ_IREQUIRE((which() == Event::LIVE_MAP_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::LiveMapData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCameraOdometry() const {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Builder::isCameraOdometry() {
  return which() == Event::CAMERA_ODOMETRY;
}
inline bool Event::Reader::hasCameraOdometry() const {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCameraOdometry() {
  if (which() != Event::CAMERA_ODOMETRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CameraOdometry::Reader Event::Reader::getCameraOdometry() const {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::getCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCameraOdometry( ::cereal::CameraOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CameraOdometry::Builder Event::Builder::initCameraOdometry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCameraOdometry(
    ::capnp::Orphan< ::cereal::CameraOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAMERA_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CameraOdometry> Event::Builder::disownCameraOdometry() {
  KJ_IREQUIRE((which() == Event::CAMERA_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CameraOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isPathPlan() const {
  return which() == Event::PATH_PLAN;
}
inline bool Event::Builder::isPathPlan() {
  return which() == Event::PATH_PLAN;
}
inline bool Event::Reader::hasPathPlan() const {
  if (which() != Event::PATH_PLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasPathPlan() {
  if (which() != Event::PATH_PLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::PathPlan::Reader Event::Reader::getPathPlan() const {
  KJ_IREQUIRE((which() == Event::PATH_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PathPlan>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::PathPlan::Builder Event::Builder::getPathPlan() {
  KJ_IREQUIRE((which() == Event::PATH_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PathPlan>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setPathPlan( ::cereal::PathPlan::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PATH_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::PathPlan>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::PathPlan::Builder Event::Builder::initPathPlan() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PATH_PLAN);
  return ::capnp::_::PointerHelpers< ::cereal::PathPlan>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptPathPlan(
    ::capnp::Orphan< ::cereal::PathPlan>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::PATH_PLAN);
  ::capnp::_::PointerHelpers< ::cereal::PathPlan>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::PathPlan> Event::Builder::disownPathPlan() {
  KJ_IREQUIRE((which() == Event::PATH_PLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::PathPlan>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isKalmanOdometry() const {
  return which() == Event::KALMAN_ODOMETRY;
}
inline bool Event::Builder::isKalmanOdometry() {
  return which() == Event::KALMAN_ODOMETRY;
}
inline bool Event::Reader::hasKalmanOdometry() const {
  if (which() != Event::KALMAN_ODOMETRY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasKalmanOdometry() {
  if (which() != Event::KALMAN_ODOMETRY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::KalmanOdometry::Reader Event::Reader::getKalmanOdometry() const {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::KalmanOdometry::Builder Event::Builder::getKalmanOdometry() {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setKalmanOdometry( ::cereal::KalmanOdometry::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::KalmanOdometry::Builder Event::Builder::initKalmanOdometry() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY);
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptKalmanOdometry(
    ::capnp::Orphan< ::cereal::KalmanOdometry>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::KALMAN_ODOMETRY);
  ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::KalmanOdometry> Event::Builder::disownKalmanOdometry() {
  KJ_IREQUIRE((which() == Event::KALMAN_ODOMETRY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::KalmanOdometry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isThumbnail() const {
  return which() == Event::THUMBNAIL;
}
inline bool Event::Builder::isThumbnail() {
  return which() == Event::THUMBNAIL;
}
inline bool Event::Reader::hasThumbnail() const {
  if (which() != Event::THUMBNAIL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasThumbnail() {
  if (which() != Event::THUMBNAIL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::Thumbnail::Reader Event::Reader::getThumbnail() const {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::Thumbnail::Builder Event::Builder::getThumbnail() {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setThumbnail( ::cereal::Thumbnail::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::Thumbnail::Builder Event::Builder::initThumbnail() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptThumbnail(
    ::capnp::Orphan< ::cereal::Thumbnail>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::THUMBNAIL);
  ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::Thumbnail> Event::Builder::disownThumbnail() {
  KJ_IREQUIRE((which() == Event::THUMBNAIL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::Thumbnail>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::getValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, true);
}

inline bool Event::Builder::getValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, true);
}
inline void Event::Builder::setValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value, true);
}

inline bool Event::Reader::isCarEvents() const {
  return which() == Event::CAR_EVENTS;
}
inline bool Event::Builder::isCarEvents() {
  return which() == Event::CAR_EVENTS;
}
inline bool Event::Reader::hasCarEvents() const {
  if (which() != Event::CAR_EVENTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarEvents() {
  if (which() != Event::CAR_EVENTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cereal::CarEvent>::Reader Event::Reader::getCarEvents() const {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder Event::Builder::getCarEvents() {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarEvents( ::capnp::List< ::cereal::CarEvent>::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cereal::CarEvent>::Builder Event::Builder::initCarEvents(unsigned int size) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptCarEvents(
    ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_EVENTS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cereal::CarEvent>> Event::Builder::disownCarEvents() {
  KJ_IREQUIRE((which() == Event::CAR_EVENTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cereal::CarEvent>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isCarParams() const {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Builder::isCarParams() {
  return which() == Event::CAR_PARAMS;
}
inline bool Event::Reader::hasCarParams() const {
  if (which() != Event::CAR_PARAMS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasCarParams() {
  if (which() != Event::CAR_PARAMS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::CarParams::Reader Event::Reader::getCarParams() const {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::CarParams::Builder Event::Builder::getCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setCarParams( ::cereal::CarParams::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::CarParams::Builder Event::Builder::initCarParams() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptCarParams(
    ::capnp::Orphan< ::cereal::CarParams>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::CAR_PARAMS);
  ::capnp::_::PointerHelpers< ::cereal::CarParams>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::CarParams> Event::Builder::disownCarParams() {
  KJ_IREQUIRE((which() == Event::CAR_PARAMS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::CarParams>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isFrontFrame() const {
  return which() == Event::FRONT_FRAME;
}
inline bool Event::Builder::isFrontFrame() {
  return which() == Event::FRONT_FRAME;
}
inline bool Event::Reader::hasFrontFrame() const {
  if (which() != Event::FRONT_FRAME) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasFrontFrame() {
  if (which() != Event::FRONT_FRAME) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::FrameData::Reader Event::Reader::getFrontFrame() const {
  KJ_IREQUIRE((which() == Event::FRONT_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::FrameData::Builder Event::Builder::getFrontFrame() {
  KJ_IREQUIRE((which() == Event::FRONT_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setFrontFrame( ::cereal::FrameData::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRONT_FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::FrameData::Builder Event::Builder::initFrontFrame() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRONT_FRAME);
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptFrontFrame(
    ::capnp::Orphan< ::cereal::FrameData>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::FRONT_FRAME);
  ::capnp::_::PointerHelpers< ::cereal::FrameData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::FrameData> Event::Builder::disownFrontFrame() {
  KJ_IREQUIRE((which() == Event::FRONT_FRAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::FrameData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isDMonitoringState() const {
  return which() == Event::D_MONITORING_STATE;
}
inline bool Event::Builder::isDMonitoringState() {
  return which() == Event::D_MONITORING_STATE;
}
inline bool Event::Reader::hasDMonitoringState() const {
  if (which() != Event::D_MONITORING_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDMonitoringState() {
  if (which() != Event::D_MONITORING_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cereal::DMonitoringState::Reader Event::Reader::getDMonitoringState() const {
  KJ_IREQUIRE((which() == Event::D_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cereal::DMonitoringState::Builder Event::Builder::getDMonitoringState() {
  KJ_IREQUIRE((which() == Event::D_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setDMonitoringState( ::cereal::DMonitoringState::Reader value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::D_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cereal::DMonitoringState::Builder Event::Builder::initDMonitoringState() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::D_MONITORING_STATE);
  return ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptDMonitoringState(
    ::capnp::Orphan< ::cereal::DMonitoringState>&& value) {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Event::D_MONITORING_STATE);
  ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cereal::DMonitoringState> Event::Builder::disownDMonitoringState() {
  KJ_IREQUIRE((which() == Event::D_MONITORING_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cereal::DMonitoringState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_f3b1f17e25a4285b_
